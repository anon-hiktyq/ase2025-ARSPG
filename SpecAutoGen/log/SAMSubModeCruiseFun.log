FUNCTION INITIALIZATION
========================================

type_name:__SAMSubModeCruise
type_name:TAG_FAULT_WARNING
初始待处理函数: ['SAMSubModeCruiseFun']

GENERATE ANNOTATION FOR SAMSubModeCruiseFun
========================================

函数 SAMSubModeCruiseFun 已经初始化
开始生成 SAMSubModeCruiseFun 的注释代码
ACSL SAMSubModeCruiseFun.c文件的内容为: 

typedef struct TAG_FAULT_WARNING
{
 	int CWsp;
 	int CWtf;

    int Wsp;
    int Wtf;
    int Wav;

    int flgups;
    int flgModeChange;

    int countAV;
    int countSPLost;
    int countSPSeen;
    int countSPset;
    int countUPSpc;

} SFWarning;

typedef struct __SAMSubModeCruise
{
	const int			countMode;
	SFWarning			mFWarning;
	int      		    Count160ms;

} SAMSubModeCruise;

void SAMSubModeCruiseFun(SAMSubModeCruise *pIp)
{

	if (pIp -> countMode == 4000)
	{
		pIp -> mFWarning.CWsp = 1 ;
	}

	return ;
}
文件 3_output/test_ip/SAMSubModeCruiseFun.c 已成功创建并写入。
预注释SAMSubModeCruiseFun.c文件的内容为: 

#include "../verification_stdlib.h"
#include "../verification_list.h"
#include "../int_array_def.h"

/*@ Extern Coq (Result: Assertion) */
/*@ Extern Coq (Results: Z -> Assertion) */

    typedef struct TAG_FAULT_WARNING
{
 	int CWsp;
 	int CWtf;

    int Wsp;
    int Wtf;
    int Wav;

    int flgups;
    int flgModeChange;

    int countAV;
    int countSPLost;
    int countSPSeen;
    int countSPset;
    int countUPSpc;

} SFWarning;
typedef struct __SAMSubModeCruise
{
	const int			countMode;
	SFWarning			mFWarning;
	int      		    Count160ms;

} SAMSubModeCruise;

void SAMSubModeCruiseFun(SAMSubModeCruise *pIp)

/*@
With pIp_countMode pIp_mFWarning_CWsp pIp_mFWarning_CWtf pIp_mFWarning_Wsp pIp_mFWarning_Wtf pIp_mFWarning_Wav pIp_mFWarning_flgups pIp_mFWarning_flgModeChange pIp_mFWarning_countAV pIp_mFWarning_countSPLost pIp_mFWarning_countSPSeen pIp_mFWarning_countSPset pIp_mFWarning_countUPSpc pIp_Count160ms
Require pIp->countMode == pIp_countMode && pIp->mFWarning.CWsp == pIp_mFWarning_CWsp && pIp->mFWarning.CWtf == pIp_mFWarning_CWtf && pIp->mFWarning.Wsp == pIp_mFWarning_Wsp && pIp->mFWarning.Wtf == pIp_mFWarning_Wtf && pIp->mFWarning.Wav == pIp_mFWarning_Wav && pIp->mFWarning.flgups == pIp_mFWarning_flgups && pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange && pIp->mFWarning.countAV == pIp_mFWarning_countAV && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset && pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc && pIp->Count160ms == pIp_Count160ms
Ensure emp
*/{

	if (pIp -> countMode == 4000)
	{
		pIp -> mFWarning.CWsp = 1 ;
	}

	return ;
}
文件 1_output/test_ip/SAMSubModeCruiseFun.c 已成功创建并写入。
文件 2_output/test_ip/SAMSubModeCruiseFun.c 已成功创建并写入。

GENERATE FUNCTION SUMMARY FOR SAMSubModeCruiseFun
========================================

----------------------------------------
路径约束与返回值
Combined path condition:
(pIp_countMode == 4000 && (pIp->countMode == pIp_countMode) * (pIp->mFWarning.CWsp == 1) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->Count160ms == pIp_Count160ms)) || (pIp_countMode != 4000 && (pIp->countMode == pIp_countMode) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->Count160ms == pIp_Count160ms))
----------------------------------------

开始生成完整的 SAMSubModeCruiseFun 的注释代码
完整注释SAMSubModeCruiseFun.c 文件的内容为: 

#include "../verification_stdlib.h"
#include "../verification_list.h"
#include "../int_array_def.h"

/*@ Extern Coq (Result: Assertion) */
/*@ Extern Coq (Results: Z -> Assertion) */

    typedef struct TAG_FAULT_WARNING
{
 	int CWsp;
 	int CWtf;

    int Wsp;
    int Wtf;
    int Wav;

    int flgups;
    int flgModeChange;

    int countAV;
    int countSPLost;
    int countSPSeen;
    int countSPset;
    int countUPSpc;

} SFWarning;
typedef struct __SAMSubModeCruise
{
	const int			countMode;
	SFWarning			mFWarning;
	int      		    Count160ms;

} SAMSubModeCruise;

void SAMSubModeCruiseFun(SAMSubModeCruise *pIp)

/*@
With pIp_countMode pIp_mFWarning_CWsp pIp_mFWarning_CWtf pIp_mFWarning_Wsp pIp_mFWarning_Wtf pIp_mFWarning_Wav pIp_mFWarning_flgups pIp_mFWarning_flgModeChange pIp_mFWarning_countAV pIp_mFWarning_countSPLost pIp_mFWarning_countSPSeen pIp_mFWarning_countSPset pIp_mFWarning_countUPSpc pIp_Count160ms
Require pIp->countMode == pIp_countMode && pIp->mFWarning.CWsp == pIp_mFWarning_CWsp && pIp->mFWarning.CWtf == pIp_mFWarning_CWtf && pIp->mFWarning.Wsp == pIp_mFWarning_Wsp && pIp->mFWarning.Wtf == pIp_mFWarning_Wtf && pIp->mFWarning.Wav == pIp_mFWarning_Wav && pIp->mFWarning.flgups == pIp_mFWarning_flgups && pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange && pIp->mFWarning.countAV == pIp_mFWarning_countAV && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset && pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc && pIp->Count160ms == pIp_Count160ms
Ensure (pIp_countMode == 4000 && (pIp->countMode == pIp_countMode) * (pIp->mFWarning.CWsp == 1) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->Count160ms == pIp_Count160ms)) || (pIp_countMode != 4000 && (pIp->countMode == pIp_countMode) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->Count160ms == pIp_Count160ms))
*/
{

	if (pIp -> countMode == 4000)
	{
		pIp -> mFWarning.CWsp = 1 ;
	}

	return ;
}
文件 2_output/test_ip/SAMSubModeCruiseFun.c 已成功创建并写入。
开始生成 SAMSubModeCruiseFun 的 ACSL 规约
Variable Map: {'pIp->countMode': 'pIp_countMode', 'pIp->mFWarning.CWsp': '1', 'pIp->mFWarning.CWtf': 'pIp_mFWarning_CWtf', 'pIp->mFWarning.Wsp': 'pIp_mFWarning_Wsp', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': 'pIp_mFWarning_countSPLost', 'pIp->mFWarning.countSPSeen': 'pIp_mFWarning_countSPSeen', 'pIp->mFWarning.countSPset': 'pIp_mFWarning_countSPset', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc', 'pIp->Count160ms': 'pIp_Count160ms'}
Path Condition: pIp_countMode == 4000 
Result: None
Variable Map: {'pIp->countMode': 'pIp_countMode', 'pIp->mFWarning.CWsp': 'pIp_mFWarning_CWsp', 'pIp->mFWarning.CWtf': 'pIp_mFWarning_CWtf', 'pIp->mFWarning.Wsp': 'pIp_mFWarning_Wsp', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': 'pIp_mFWarning_countSPLost', 'pIp->mFWarning.countSPSeen': 'pIp_mFWarning_countSPSeen', 'pIp->mFWarning.countSPset': 'pIp_mFWarning_countSPset', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc', 'pIp->Count160ms': 'pIp_Count160ms'}
Path Condition: pIp_countMode != 4000 
Result: None
SAMSubModeCruiseFun.c 的规约的内容为: 
typedef struct TAG_FAULT_WARNING
{
 	int CWsp;
 	int CWtf;

    int Wsp;
    int Wtf;
    int Wav;

    int flgups;
    int flgModeChange;

    int countAV;
    int countSPLost;
    int countSPSeen;
    int countSPset;
    int countUPSpc;

} SFWarning;
typedef struct __SAMSubModeCruise
{
	const int			countMode;
	SFWarning			mFWarning;
	int      		    Count160ms;

} SAMSubModeCruise;

/*@
 requires \valid(pIp) ;

ensures \old(pIp->countMode) == 4000 ==> pIp->countMode == \old(pIp->countMode)&&pIp->mFWarning.CWsp == 1&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset)&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->Count160ms == \old(pIp->Count160ms);

ensures \old(pIp->countMode) != 4000 ==> pIp->countMode == \old(pIp->countMode)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset)&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->Count160ms == \old(pIp->Count160ms);

*/

void SAMSubModeCruiseFun(SAMSubModeCruise *pIp)

{

	if (pIp -> countMode == 4000)
	{
		pIp -> mFWarning.CWsp = 1 ;
	}

	return ;
}
文件 output/test_ip/SAMSubModeCruiseFun.c 已成功创建并写入。

SUMMARY FOR SAMSubModeCruiseFun
========================================


函数 SAMSubModeCruiseFun 的 VST Summary 为:
/*@
With pIp_countMode pIp_mFWarning_CWsp pIp_mFWarning_CWtf pIp_mFWarning_Wsp pIp_mFWarning_Wtf pIp_mFWarning_Wav pIp_mFWarning_flgups pIp_mFWarning_flgModeChange pIp_mFWarning_countAV pIp_mFWarning_countSPLost pIp_mFWarning_countSPSeen pIp_mFWarning_countSPset pIp_mFWarning_countUPSpc pIp_Count160ms
Require pIp->countMode == pIp_countMode && pIp->mFWarning.CWsp == pIp_mFWarning_CWsp && pIp->mFWarning.CWtf == pIp_mFWarning_CWtf && pIp->mFWarning.Wsp == pIp_mFWarning_Wsp && pIp->mFWarning.Wtf == pIp_mFWarning_Wtf && pIp->mFWarning.Wav == pIp_mFWarning_Wav && pIp->mFWarning.flgups == pIp_mFWarning_flgups && pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange && pIp->mFWarning.countAV == pIp_mFWarning_countAV && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset && pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc && pIp->Count160ms == pIp_Count160ms
Ensure (pIp_countMode == 4000 && (pIp->countMode == pIp_countMode) * (pIp->mFWarning.CWsp == 1) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->Count160ms == pIp_Count160ms)) || (pIp_countMode != 4000 && (pIp->countMode == pIp_countMode) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->Count160ms == pIp_Count160ms))
*/

函数 SAMSubModeCruiseFun 的 ACSL Summary 为:
/*@
requires \valid(pIp) ;

ensures \old(pIp->countMode) == 4000 ==> pIp->countMode == \old(pIp->countMode)&&pIp->mFWarning.CWsp == 1&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset)&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->Count160ms == \old(pIp->Count160ms);

ensures \old(pIp->countMode) != 4000 ==> pIp->countMode == \old(pIp->countMode)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset)&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->Count160ms == \old(pIp->Count160ms);

*/


VERIFICATION FOR SAMSubModeCruiseFun
========================================

syntax Correct
Loop Invariant:
[]

Assertion:
[]

Post Condition:
[True, True]

