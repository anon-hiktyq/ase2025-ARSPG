2025-07-05 05:35:09,172 - INFO  - 
FUNCTION INITIALIZATION
2025-07-05 05:35:09,172 - INFO  - ========================================

2025-07-05 05:35:09,256 - INFO  - 初始待处理函数: ['FaultJudgeProceedFun', 'SoftFaultJudgeSP', 'SoftFaultProceed']
2025-07-05 05:35:09,257 - INFO  - 现在处理函数 SoftFaultProceed

2025-07-05 05:35:09,279 - INFO  - 现在处理函数 SwitchSSS

2025-07-05 05:35:09,303 - INFO  - 
GENERATE ANNOTATION FOR SwitchSSS
2025-07-05 05:35:09,303 - INFO  - ========================================

2025-07-05 05:35:09,303 - INFO  - 函数 SwitchSSS 已经初始化
2025-07-05 05:35:09,303 - INFO  - 开始生成 SwitchSSS 的注释代码
2025-07-05 05:35:09,304 - INFO  - 
GENERATE FUNCTION SUMMARY FOR SwitchSSS
2025-07-05 05:35:09,305 - INFO  - ========================================

2025-07-05 05:35:09,319 - INFO  - 开始生成完整的 SwitchSSS 的注释代码
2025-07-05 05:35:09,325 - INFO  - 开始生成 SwitchSSS 的 ACSL 规约
2025-07-05 05:35:09,337 - INFO  - 
GENERATE ANNOTATION FOR SoftFaultProceed
2025-07-05 05:35:09,338 - INFO  - ========================================

2025-07-05 05:35:09,338 - INFO  - 函数 SoftFaultProceed 已经初始化
2025-07-05 05:35:09,338 - INFO  - 开始生成 SoftFaultProceed 的注释代码
2025-07-05 05:35:09,343 - INFO  - 
GENERATE FUNCTION SUMMARY FOR SoftFaultProceed
2025-07-05 05:35:09,343 - INFO  - ========================================

2025-07-05 05:35:09,424 - INFO  - 开始生成完整的 SoftFaultProceed 的注释代码
2025-07-05 05:35:09,431 - INFO  - 开始生成 SoftFaultProceed 的 ACSL 规约
2025-07-05 05:35:09,454 - INFO  - 现在处理函数 SoftFaultJudgeSP

2025-07-05 05:35:09,471 - INFO  - 
GENERATE ANNOTATION FOR SoftFaultJudgeSP
2025-07-05 05:35:09,471 - INFO  - ========================================

2025-07-05 05:35:09,471 - INFO  - 函数 SoftFaultJudgeSP 已经初始化
2025-07-05 05:35:09,471 - INFO  - 开始生成 SoftFaultJudgeSP 的注释代码
2025-07-05 05:35:09,472 - INFO  - 
GENERATE FUNCTION SUMMARY FOR SoftFaultJudgeSP
2025-07-05 05:35:09,472 - INFO  - ========================================

2025-07-05 05:35:09,544 - INFO  - 开始生成完整的 SoftFaultJudgeSP 的注释代码
2025-07-05 05:35:09,550 - INFO  - 开始生成 SoftFaultJudgeSP 的 ACSL 规约
2025-07-05 05:35:09,572 - INFO  - 
GENERATE ANNOTATION FOR FaultJudgeProceedFun
2025-07-05 05:35:09,572 - INFO  - ========================================

2025-07-05 05:35:09,572 - INFO  - 函数 FaultJudgeProceedFun 已经初始化
2025-07-05 05:35:09,572 - INFO  - 开始生成 FaultJudgeProceedFun 的注释代码
2025-07-05 05:35:09,584 - INFO  - 
GENERATE FUNCTION SUMMARY FOR FaultJudgeProceedFun
2025-07-05 05:35:09,584 - INFO  - ========================================

2025-07-05 05:35:10,313 - INFO  - 开始生成完整的 FaultJudgeProceedFun 的注释代码
2025-07-05 05:35:10,328 - INFO  - 开始生成 FaultJudgeProceedFun 的 ACSL 规约
2025-07-05 05:35:10,374 - INFO  - 
SUMMARY FOR FaultJudgeProceedFun
2025-07-05 05:35:10,374 - INFO  - ========================================

2025-07-05 05:35:10,374 - INFO  - 
函数 FaultJudgeProceedFun 的 VST Summary 为:
/*@
With pIp_nouse pIp_countPublic pIp_countMode pIp_mAttitude_angle_l pIp_mAttitude_angle_0 pIp_mAttitude_angle_1 pIp_mAttitude_angle_2 pIp_mAttitude_rate_l pIp_mAttitude_rate_0 pIp_mAttitude_rate_1 pIp_mAttitude_rate_2 pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP pIp_mController_Up pIp_mController_Ud pIp_mController_fy pIp_mFWarning_CWsp pIp_mFWarning_CWtf pIp_mFWarning_Wsp pIp_mFWarning_Wtf pIp_mFWarning_Wav pIp_mFWarning_flgups pIp_mFWarning_flgModeChange pIp_mFWarning_countAV pIp_mFWarning_countSPLost pIp_mFWarning_countSPSeen pIp_mFWarning_countSPset pIp_mFWarning_countUPSpc
Require pIp->nouse == pIp_nouse && pIp->countPublic == pIp_countPublic && pIp->countMode == pIp_countMode && store_int_array(pIp->mAttitude.angle,3, pIp_mAttitude_angle_l) && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_0 && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_1 && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_2 && store_int_array(pIp->mAttitude.rate,3, pIp_mAttitude_rate_l) && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_0 && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_1 && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_2 && pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP && pIp->mController.Up == pIp_mController_Up && pIp->mController.Ud == pIp_mController_Ud && pIp->mController.fy == pIp_mController_fy && pIp->mFWarning.CWsp == pIp_mFWarning_CWsp && pIp->mFWarning.CWtf == pIp_mFWarning_CWtf && pIp->mFWarning.Wsp == pIp_mFWarning_Wsp && pIp->mFWarning.Wtf == pIp_mFWarning_Wtf && pIp->mFWarning.Wav == pIp_mFWarning_Wav && pIp->mFWarning.flgups == pIp_mFWarning_flgups && pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange && pIp->mFWarning.countAV == pIp_mFWarning_countAV && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset && pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc
Ensure (pIp_mFWarning_countSPset + 1 != 10 && pIp_mFWarning_countSPset + 1 != 5 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_l[0] && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_l[1] && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_l[2] && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_l[0] && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_l[1] && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_l[2] && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1 && pIp_mFWarning_Wsp == 1 && pIp_mFWarning_CWsp == 1 && pIp_mFWarning_Wsp != 0 && pIp_mFWarning_CWsp == 1 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_0 && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_1 && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_2 && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_0 && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_1 && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_2 && (pIp->nouse == pIp_nouse) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode) * store_int_array(&pIp->mAttitude.angle, 3, pIp_mAttitude_angle_l) * store_int_array(&pIp->mAttitude.rate, 3, pIp_mAttitude_rate_l) * (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_countSPset + 1 == 10 && pIp_mFWarning_countSPset + 1 != 5 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_l[0] && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_l[1] && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_l[2] && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_l[0] && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_l[1] && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_l[2] && pIp->countPublic == 0 && pIp->countMode == 0 && pIp->mController.Up == 0 && pIp->mFWarning.CWsp == 0 && pIp->mFWarning.CWtf == 0 && pIp->mFWarning.Wsp == 0 && pIp->mFWarning.countSPset == 0 && pIp_mFWarning_Wsp == 1 && pIp_mFWarning_CWsp == 1 && pIp_mFWarning_Wsp != 0 && pIp_mFWarning_CWsp == 1 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_0 && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_1 && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_2 && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_0 && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_1 && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_2 && (pIp->nouse == pIp_nouse) * store_int_array(&pIp->mAttitude.angle, 3, pIp_mAttitude_angle_l) * store_int_array(&pIp->mAttitude.rate, 3, pIp_mAttitude_rate_l) * (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mDSSData_stateFlag_A == 1 && pIp->mDSSData.stateFlag_A == 0 && pIp_mFWarning_countSPset + 1 == 5 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_l[0] && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_l[1] && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_l[2] && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_l[0] && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_l[1] && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_l[2] && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1 && pIp_mFWarning_Wsp == 1 && pIp_mFWarning_CWsp == 1 && pIp_mFWarning_Wsp != 0 && pIp_mFWarning_CWsp == 1 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_0 && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_1 && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_2 && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_0 && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_1 && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_2 && (pIp->nouse == pIp_nouse) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode) * store_int_array(&pIp->mAttitude.angle, 3, pIp_mAttitude_angle_l) * store_int_array(&pIp->mAttitude.rate, 3, pIp_mAttitude_rate_l) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mDSSData_stateFlag_A != 1 && pIp->mDSSData.stateFlag_A == 1 && pIp_mFWarning_countSPset + 1 == 5 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_l[0] && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_l[1] && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_l[2] && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_l[0] && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_l[1] && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_l[2] && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1 && pIp_mFWarning_Wsp == 1 && pIp_mFWarning_CWsp == 1 && pIp_mFWarning_Wsp != 0 && pIp_mFWarning_CWsp == 1 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_0 && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_1 && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_2 && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_0 && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_1 && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_2 && (pIp->nouse == pIp_nouse) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode) * store_int_array(&pIp->mAttitude.angle, 3, pIp_mAttitude_angle_l) * store_int_array(&pIp->mAttitude.rate, 3, pIp_mAttitude_rate_l) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_Wsp != 1 && pIp_mFWarning_CWsp == 1 && pIp_mFWarning_countSPLost <= 33750 && pIp_mFWarning_countSPSeen <= 2 && pIp_mFWarning_countSPLost == 0 && pIp_mDSSData_flgSP != 0 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_l[0] && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_l[1] && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_l[2] && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_l[0] && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_l[1] && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_l[2] && pIp_mFWarning_Wsp == 0 && pIp_mFWarning_CWsp == 1 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_0 && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_1 && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_2 && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_0 && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_1 && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_2 && (pIp->nouse == pIp_nouse) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode) * store_int_array(&pIp->mAttitude.angle, 3, pIp_mAttitude_angle_l) * store_int_array(&pIp->mAttitude.rate, 3, pIp_mAttitude_rate_l) * (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_Wsp != 1 && pIp_mFWarning_CWsp == 1 && pIp_mFWarning_countSPLost <= 33750 && pIp_mFWarning_countSPSeen + 1 <= 2 && pIp_mFWarning_countSPLost != 0 && pIp_mDSSData_flgSP != 0 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_l[0] && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_l[1] && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_l[2] && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_l[0] && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_l[1] && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_l[2] && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen + 1 && pIp_mFWarning_Wsp == 0 && pIp_mFWarning_CWsp == 1 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_0 && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_1 && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_2 && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_0 && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_1 && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_2 && (pIp->nouse == pIp_nouse) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode) * store_int_array(&pIp->mAttitude.angle, 3, pIp_mAttitude_angle_l) * store_int_array(&pIp->mAttitude.rate, 3, pIp_mAttitude_rate_l) * (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_Wsp != 1 && pIp_mFWarning_CWsp == 1 && 0 <= 33750 && pIp_mFWarning_countSPSeen > 2 && pIp_mFWarning_countSPLost == 0 && pIp_mDSSData_flgSP != 0 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_l[0] && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_l[1] && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_l[2] && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_l[0] && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_l[1] && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_l[2] && pIp->mFWarning.countSPLost == 0 && pIp->mFWarning.countSPSeen == 0 && pIp_mFWarning_Wsp == 0 && pIp_mFWarning_CWsp == 1 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_0 && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_1 && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_2 && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_0 && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_1 && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_2 && (pIp->nouse == pIp_nouse) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode) * store_int_array(&pIp->mAttitude.angle, 3, pIp_mAttitude_angle_l) * store_int_array(&pIp->mAttitude.rate, 3, pIp_mAttitude_rate_l) * (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_Wsp != 1 && pIp_mFWarning_CWsp == 1 && 0 <= 33750 && pIp_mFWarning_countSPSeen + 1 > 2 && pIp_mFWarning_countSPLost != 0 && pIp_mDSSData_flgSP != 0 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_l[0] && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_l[1] && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_l[2] && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_l[0] && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_l[1] && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_l[2] && pIp->mFWarning.countSPLost == 0 && pIp->mFWarning.countSPSeen == 0 && pIp_mFWarning_Wsp == 0 && pIp_mFWarning_CWsp == 1 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_0 && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_1 && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_2 && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_0 && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_1 && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_2 && (pIp->nouse == pIp_nouse) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode) * store_int_array(&pIp->mAttitude.angle, 3, pIp_mAttitude_angle_l) * store_int_array(&pIp->mAttitude.rate, 3, pIp_mAttitude_rate_l) * (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_Wsp != 1 && pIp_mFWarning_CWsp == 1 && pIp_mFWarning_countSPLost + 1 <= 33750 && pIp_mDSSData_flgSP == 0 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_l[0] && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_l[1] && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_l[2] && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_l[0] && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_l[1] && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_l[2] && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost + 1 && pIp->mFWarning.countSPSeen == 0 && pIp_mFWarning_Wsp == 0 && pIp_mFWarning_CWsp == 1 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_0 && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_1 && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_2 && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_0 && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_1 && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_2 && (pIp->nouse == pIp_nouse) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode) * store_int_array(&pIp->mAttitude.angle, 3, pIp_mAttitude_angle_l) * store_int_array(&pIp->mAttitude.rate, 3, pIp_mAttitude_rate_l) * (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp->mFWarning.Wsp != 1 && pIp_mFWarning_CWsp == 1 && pIp_mFWarning_countSPLost + 1 > 33750 && pIp_mDSSData_flgSP == 0 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_l[0] && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_l[1] && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_l[2] && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_l[0] && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_l[1] && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_l[2] && pIp->mFWarning.Wsp == 235 && pIp->mFWarning.countSPLost == 0 && pIp->mFWarning.countSPSeen == 0 && pIp->mFWarning.countSPset == 0 && pIp_mFWarning_Wsp == 0 && pIp_mFWarning_CWsp == 1 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_0 && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_1 && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_2 && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_0 && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_1 && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_2 && (pIp->nouse == pIp_nouse) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode) * store_int_array(&pIp->mAttitude.angle, 3, pIp_mAttitude_angle_l) * store_int_array(&pIp->mAttitude.rate, 3, pIp_mAttitude_rate_l) * (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp->mFWarning.Wsp != 1 && pIp_mFWarning_CWsp == 1 && pIp_mFWarning_countSPLost > 33750 && pIp_mFWarning_countSPSeen + 1 <= 2 && pIp_mFWarning_countSPLost != 0 && pIp_mDSSData_flgSP != 0 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_l[0] && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_l[1] && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_l[2] && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_l[0] && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_l[1] && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_l[2] && pIp->mFWarning.Wsp == 235 && pIp->mFWarning.countSPLost == 0 && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen + 1 && pIp->mFWarning.countSPset == 0 && pIp_mFWarning_Wsp == 0 && pIp_mFWarning_CWsp == 1 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_0 && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_1 && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_2 && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_0 && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_1 && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_2 && (pIp->nouse == pIp_nouse) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode) * store_int_array(&pIp->mAttitude.angle, 3, pIp_mAttitude_angle_l) * store_int_array(&pIp->mAttitude.rate, 3, pIp_mAttitude_rate_l) * (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_Wsp != 1 && pIp_mFWarning_CWsp == 1 && pIp_mFWarning_Wsp != 0 && pIp_mFWarning_CWsp == 1 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_0 && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_1 && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_2 && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_0 && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_1 && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_2 && (pIp->nouse == pIp_nouse) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode) * store_int_array(&pIp->mAttitude.angle, 3, pIp_mAttitude_angle_l) * store_int_array(&pIp->mAttitude.rate, 3, pIp_mAttitude_rate_l) * (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_CWsp != 1 && pIp_mFWarning_CWsp != 1 && pIp_mAttitude_angle_l[0] == pIp_mAttitude_angle_0 && pIp_mAttitude_angle_l[1] == pIp_mAttitude_angle_1 && pIp_mAttitude_angle_l[2] == pIp_mAttitude_angle_2 && pIp_mAttitude_rate_l[0] == pIp_mAttitude_rate_0 && pIp_mAttitude_rate_l[1] == pIp_mAttitude_rate_1 && pIp_mAttitude_rate_l[2] == pIp_mAttitude_rate_2 && (pIp->nouse == pIp_nouse) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode) * store_int_array(&pIp->mAttitude.angle, 3, pIp_mAttitude_angle_l) * store_int_array(&pIp->mAttitude.rate, 3, pIp_mAttitude_rate_l) * (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc))
*/
