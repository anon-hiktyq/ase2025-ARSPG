FUNCTION INITIALIZATION
========================================

type_name:__SoftFaultJudgeSP
type_name:TAG_DSS_DATA
type_name:TAG_FAULT_WARNING
初始待处理函数: ['SoftFaultJudgeSPFun']

GENERATE ANNOTATION FOR SoftFaultJudgeSPFun
========================================

函数 SoftFaultJudgeSPFun 已经初始化
开始生成 SoftFaultJudgeSPFun 的注释代码
文件 3_output/test_ip/SoftFaultJudgeSPFun.c 已成功创建并写入。
文件 1_output/test_ip/SoftFaultJudgeSPFun.c 已成功创建并写入。
文件 2_output/test_ip/SoftFaultJudgeSPFun.c 已成功创建并写入。

GENERATE FUNCTION SUMMARY FOR SoftFaultJudgeSPFun
========================================

----------------------------------------
路径约束与返回值
Combined path condition:
(pIp_mFWarning_countSPLost > 33750 && pIp_mFWarning_countSPSeen + 1 <= 2 && pIp_mFWarning_countSPLost != 0 && pIp_mDSSData_flgSP != 0 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == 235) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == 0) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen + 1) * (pIp->mFWarning.countSPset == 0) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_countSPLost + 1 > 33750 && pIp_mDSSData_flgSP == 0 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == 235) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == 0) * (pIp->mFWarning.countSPSeen == 0) * (pIp->mFWarning.countSPset == 0) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_countSPLost + 1 <= 33750 && pIp_mDSSData_flgSP == 0 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost + 1) * (pIp->mFWarning.countSPSeen == 0) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (0 <= 33750 && pIp_mFWarning_countSPSeen + 1 > 2 && pIp_mFWarning_countSPLost != 0 && pIp_mDSSData_flgSP != 0 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == 0) * (pIp->mFWarning.countSPSeen == 0) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (0 <= 33750 && pIp_mFWarning_countSPSeen > 2 && pIp_mFWarning_countSPLost == 0 && pIp_mDSSData_flgSP != 0 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == 0) * (pIp->mFWarning.countSPSeen == 0) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_countSPLost <= 33750 && pIp_mFWarning_countSPSeen + 1 <= 2 && pIp_mFWarning_countSPLost != 0 && pIp_mDSSData_flgSP != 0 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen + 1) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_countSPLost <= 33750 && pIp_mFWarning_countSPSeen <= 2 && pIp_mFWarning_countSPLost == 0 && pIp_mDSSData_flgSP != 0 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc))
----------------------------------------

开始生成完整的 SoftFaultJudgeSPFun 的注释代码
文件 2_output/test_ip/SoftFaultJudgeSPFun.c 已成功创建并写入。
开始生成 SoftFaultJudgeSPFun 的 ACSL 规约
Variable Map: {'pIp->mDSSData.stateFlag_A': 'pIp_mDSSData_stateFlag_A', 'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP', 'pIp->mFWarning.CWsp': 'pIp_mFWarning_CWsp', 'pIp->mFWarning.CWtf': 'pIp_mFWarning_CWtf', 'pIp->mFWarning.Wsp': '235', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': '0', 'pIp->mFWarning.countSPSeen': 'pIp_mFWarning_countSPSeen + 1', 'pIp->mFWarning.countSPset': '0', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc'}
Path Condition: pIp_mFWarning_countSPLost > 33750 && pIp_mFWarning_countSPSeen + 1 <= 2 && pIp_mFWarning_countSPLost != 0 && pIp_mDSSData_flgSP != 0 
Result: None
Variable Map: {'pIp->mDSSData.stateFlag_A': 'pIp_mDSSData_stateFlag_A', 'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP', 'pIp->mFWarning.CWsp': 'pIp_mFWarning_CWsp', 'pIp->mFWarning.CWtf': 'pIp_mFWarning_CWtf', 'pIp->mFWarning.Wsp': '235', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': '0', 'pIp->mFWarning.countSPSeen': '0', 'pIp->mFWarning.countSPset': '0', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc'}
Path Condition: pIp_mFWarning_countSPLost + 1 > 33750 && pIp_mDSSData_flgSP == 0 
Result: None
Variable Map: {'pIp->mDSSData.stateFlag_A': 'pIp_mDSSData_stateFlag_A', 'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP', 'pIp->mFWarning.CWsp': 'pIp_mFWarning_CWsp', 'pIp->mFWarning.CWtf': 'pIp_mFWarning_CWtf', 'pIp->mFWarning.Wsp': 'pIp_mFWarning_Wsp', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': 'pIp_mFWarning_countSPLost + 1', 'pIp->mFWarning.countSPSeen': '0', 'pIp->mFWarning.countSPset': 'pIp_mFWarning_countSPset', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc'}
Path Condition: pIp_mFWarning_countSPLost + 1 <= 33750 && pIp_mDSSData_flgSP == 0 
Result: None
Variable Map: {'pIp->mDSSData.stateFlag_A': 'pIp_mDSSData_stateFlag_A', 'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP', 'pIp->mFWarning.CWsp': 'pIp_mFWarning_CWsp', 'pIp->mFWarning.CWtf': 'pIp_mFWarning_CWtf', 'pIp->mFWarning.Wsp': 'pIp_mFWarning_Wsp', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': '0', 'pIp->mFWarning.countSPSeen': '0', 'pIp->mFWarning.countSPset': 'pIp_mFWarning_countSPset', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc'}
Path Condition: 0 <= 33750 && pIp_mFWarning_countSPSeen + 1 > 2 && pIp_mFWarning_countSPLost != 0 && pIp_mDSSData_flgSP != 0 
Result: None
Variable Map: {'pIp->mDSSData.stateFlag_A': 'pIp_mDSSData_stateFlag_A', 'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP', 'pIp->mFWarning.CWsp': 'pIp_mFWarning_CWsp', 'pIp->mFWarning.CWtf': 'pIp_mFWarning_CWtf', 'pIp->mFWarning.Wsp': 'pIp_mFWarning_Wsp', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': '0', 'pIp->mFWarning.countSPSeen': '0', 'pIp->mFWarning.countSPset': 'pIp_mFWarning_countSPset', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc'}
Path Condition: 0 <= 33750 && pIp_mFWarning_countSPSeen > 2 && pIp_mFWarning_countSPLost == 0 && pIp_mDSSData_flgSP != 0 
Result: None
Variable Map: {'pIp->mDSSData.stateFlag_A': 'pIp_mDSSData_stateFlag_A', 'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP', 'pIp->mFWarning.CWsp': 'pIp_mFWarning_CWsp', 'pIp->mFWarning.CWtf': 'pIp_mFWarning_CWtf', 'pIp->mFWarning.Wsp': 'pIp_mFWarning_Wsp', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': 'pIp_mFWarning_countSPLost', 'pIp->mFWarning.countSPSeen': 'pIp_mFWarning_countSPSeen + 1', 'pIp->mFWarning.countSPset': 'pIp_mFWarning_countSPset', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc'}
Path Condition: pIp_mFWarning_countSPLost <= 33750 && pIp_mFWarning_countSPSeen + 1 <= 2 && pIp_mFWarning_countSPLost != 0 && pIp_mDSSData_flgSP != 0 
Result: None
Variable Map: {'pIp->mDSSData.stateFlag_A': 'pIp_mDSSData_stateFlag_A', 'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP', 'pIp->mFWarning.CWsp': 'pIp_mFWarning_CWsp', 'pIp->mFWarning.CWtf': 'pIp_mFWarning_CWtf', 'pIp->mFWarning.Wsp': 'pIp_mFWarning_Wsp', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': 'pIp_mFWarning_countSPLost', 'pIp->mFWarning.countSPSeen': 'pIp_mFWarning_countSPSeen', 'pIp->mFWarning.countSPset': 'pIp_mFWarning_countSPset', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc'}
Path Condition: pIp_mFWarning_countSPLost <= 33750 && pIp_mFWarning_countSPSeen <= 2 && pIp_mFWarning_countSPLost == 0 && pIp_mDSSData_flgSP != 0 
Result: None
文件 output/test_ip/SoftFaultJudgeSPFun.c 已成功创建并写入。

SUMMARY FOR SoftFaultJudgeSPFun
========================================


函数 SoftFaultJudgeSPFun 的 VST Summary 为:
/*@
With pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP pIp_mFWarning_CWsp pIp_mFWarning_CWtf pIp_mFWarning_Wsp pIp_mFWarning_Wtf pIp_mFWarning_Wav pIp_mFWarning_flgups pIp_mFWarning_flgModeChange pIp_mFWarning_countAV pIp_mFWarning_countSPLost pIp_mFWarning_countSPSeen pIp_mFWarning_countSPset pIp_mFWarning_countUPSpc
Require pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP && pIp->mFWarning.CWsp == pIp_mFWarning_CWsp && pIp->mFWarning.CWtf == pIp_mFWarning_CWtf && pIp->mFWarning.Wsp == pIp_mFWarning_Wsp && pIp->mFWarning.Wtf == pIp_mFWarning_Wtf && pIp->mFWarning.Wav == pIp_mFWarning_Wav && pIp->mFWarning.flgups == pIp_mFWarning_flgups && pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange && pIp->mFWarning.countAV == pIp_mFWarning_countAV && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset && pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc
Ensure (pIp_mFWarning_countSPLost > 33750 && pIp_mFWarning_countSPSeen + 1 <= 2 && pIp_mFWarning_countSPLost != 0 && pIp_mDSSData_flgSP != 0 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == 235) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == 0) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen + 1) * (pIp->mFWarning.countSPset == 0) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_countSPLost + 1 > 33750 && pIp_mDSSData_flgSP == 0 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == 235) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == 0) * (pIp->mFWarning.countSPSeen == 0) * (pIp->mFWarning.countSPset == 0) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_countSPLost + 1 <= 33750 && pIp_mDSSData_flgSP == 0 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost + 1) * (pIp->mFWarning.countSPSeen == 0) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (0 <= 33750 && pIp_mFWarning_countSPSeen + 1 > 2 && pIp_mFWarning_countSPLost != 0 && pIp_mDSSData_flgSP != 0 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == 0) * (pIp->mFWarning.countSPSeen == 0) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (0 <= 33750 && pIp_mFWarning_countSPSeen > 2 && pIp_mFWarning_countSPLost == 0 && pIp_mDSSData_flgSP != 0 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == 0) * (pIp->mFWarning.countSPSeen == 0) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_countSPLost <= 33750 && pIp_mFWarning_countSPSeen + 1 <= 2 && pIp_mFWarning_countSPLost != 0 && pIp_mDSSData_flgSP != 0 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen + 1) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc)) || (pIp_mFWarning_countSPLost <= 33750 && pIp_mFWarning_countSPSeen <= 2 && pIp_mFWarning_countSPLost == 0 && pIp_mDSSData_flgSP != 0 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc))
*/

函数 SoftFaultJudgeSPFun 的 ACSL Summary 为:
/*@
 requires \valid(pIp) ;

ensures \old(pIp->mFWarning.countSPLost) > 33750 && \old(pIp->mFWarning.countSPSeen) + 1 <= 2 && \old(pIp->mFWarning.countSPLost) != 0 && \old(pIp->mDSSData.flgSP) != 0 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == 235&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == 0&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen) + 1&&pIp->mFWarning.countSPset == 0&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc);

ensures \old(pIp->mFWarning.countSPLost) + 1 > 33750 && \old(pIp->mDSSData.flgSP) == 0 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == 235&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == 0&&pIp->mFWarning.countSPSeen == 0&&pIp->mFWarning.countSPset == 0&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc);

ensures \old(pIp->mFWarning.countSPLost) + 1 <= 33750 && \old(pIp->mDSSData.flgSP) == 0 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost) + 1&&pIp->mFWarning.countSPSeen == 0&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset)&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc);

ensures 0 <= 33750 && \old(pIp->mFWarning.countSPSeen) + 1 > 2 && \old(pIp->mFWarning.countSPLost) != 0 && \old(pIp->mDSSData.flgSP) != 0 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == 0&&pIp->mFWarning.countSPSeen == 0&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset)&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc);

ensures 0 <= 33750 && \old(pIp->mFWarning.countSPSeen) > 2 && \old(pIp->mFWarning.countSPLost) == 0 && \old(pIp->mDSSData.flgSP) != 0 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == 0&&pIp->mFWarning.countSPSeen == 0&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset)&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc);

ensures \old(pIp->mFWarning.countSPLost) <= 33750 && \old(pIp->mFWarning.countSPSeen) + 1 <= 2 && \old(pIp->mFWarning.countSPLost) != 0 && \old(pIp->mDSSData.flgSP) != 0 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen) + 1&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset)&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc);

ensures \old(pIp->mFWarning.countSPLost) <= 33750 && \old(pIp->mFWarning.countSPSeen) <= 2 && \old(pIp->mFWarning.countSPLost) == 0 && \old(pIp->mDSSData.flgSP) != 0 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset)&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc);

*/


VERIFICATION FOR SoftFaultJudgeSPFun
========================================

syntax Correct
Loop Invariant:
[]

Assertion:
[]

Post Condition:
[True, True, True, True, True, True, True]


GENERLIZATION FOR SoftFaultJudgeSPFun
========================================

Z3 Expression: Implies(And(And(And(old_pIp_mFWarning_countSPLost > 33750,
                    old_pIp_mFWarning_countSPSeen + 1 <= 2),
                old_pIp_mFWarning_countSPLost != 0),
            old_pIp_mDSSData_flgSP != 0),
        And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_mDSSData_stateFlag_A ==
                                        old_pIp_mDSSData_stateFlag_A,
                                        pIp_mDSSData_stateFlag_B ==
                                        old_pIp_mDSSData_stateFlag_B),
                                        pIp_mDSSData_royaw ==
                                        old_pIp_mDSSData_royaw),
                                        pIp_mDSSData_piyaw ==
                                        old_pIp_mDSSData_piyaw),
                                        pIp_mDSSData_flgSP ==
                                        old_pIp_mDSSData_flgSP),
                                        pIp_mFWarning_CWsp ==
                                        old_pIp_mFWarning_CWsp),
                                        pIp_mFWarning_CWtf ==
                                        old_pIp_mFWarning_CWtf),
                                        pIp_mFWarning_Wsp ==
                                        235),
                                        pIp_mFWarning_Wtf ==
                                        old_pIp_mFWarning_Wtf),
                                        pIp_mFWarning_Wav ==
                                        old_pIp_mFWarning_Wav),
                                    pIp_mFWarning_flgups ==
                                    old_pIp_mFWarning_flgups),
                                pIp_mFWarning_flgModeChange ==
                                old_pIp_mFWarning_flgModeChange),
                            pIp_mFWarning_countAV ==
                            old_pIp_mFWarning_countAV),
                        pIp_mFWarning_countSPLost == 0),
                    pIp_mFWarning_countSPSeen ==
                    old_pIp_mFWarning_countSPSeen + 1),
                pIp_mFWarning_countSPset == 0),
            pIp_mFWarning_countUPSpc ==
            old_pIp_mFWarning_countUPSpc))
Z3 Expression: Implies(And(old_pIp_mFWarning_countSPLost + 1 > 33750,
            old_pIp_mDSSData_flgSP == 0),
        And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_mDSSData_stateFlag_A ==
                                        old_pIp_mDSSData_stateFlag_A,
                                        pIp_mDSSData_stateFlag_B ==
                                        old_pIp_mDSSData_stateFlag_B),
                                        pIp_mDSSData_royaw ==
                                        old_pIp_mDSSData_royaw),
                                        pIp_mDSSData_piyaw ==
                                        old_pIp_mDSSData_piyaw),
                                        pIp_mDSSData_flgSP ==
                                        old_pIp_mDSSData_flgSP),
                                        pIp_mFWarning_CWsp ==
                                        old_pIp_mFWarning_CWsp),
                                        pIp_mFWarning_CWtf ==
                                        old_pIp_mFWarning_CWtf),
                                        pIp_mFWarning_Wsp ==
                                        235),
                                        pIp_mFWarning_Wtf ==
                                        old_pIp_mFWarning_Wtf),
                                        pIp_mFWarning_Wav ==
                                        old_pIp_mFWarning_Wav),
                                    pIp_mFWarning_flgups ==
                                    old_pIp_mFWarning_flgups),
                                pIp_mFWarning_flgModeChange ==
                                old_pIp_mFWarning_flgModeChange),
                            pIp_mFWarning_countAV ==
                            old_pIp_mFWarning_countAV),
                        pIp_mFWarning_countSPLost == 0),
                    pIp_mFWarning_countSPSeen == 0),
                pIp_mFWarning_countSPset == 0),
            pIp_mFWarning_countUPSpc ==
            old_pIp_mFWarning_countUPSpc))
Z3 Expression: Implies(And(old_pIp_mFWarning_countSPLost + 1 <= 33750,
            old_pIp_mDSSData_flgSP == 0),
        And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_mDSSData_stateFlag_A ==
                                        old_pIp_mDSSData_stateFlag_A,
                                        pIp_mDSSData_stateFlag_B ==
                                        old_pIp_mDSSData_stateFlag_B),
                                        pIp_mDSSData_royaw ==
                                        old_pIp_mDSSData_royaw),
                                        pIp_mDSSData_piyaw ==
                                        old_pIp_mDSSData_piyaw),
                                        pIp_mDSSData_flgSP ==
                                        old_pIp_mDSSData_flgSP),
                                        pIp_mFWarning_CWsp ==
                                        old_pIp_mFWarning_CWsp),
                                        pIp_mFWarning_CWtf ==
                                        old_pIp_mFWarning_CWtf),
                                        pIp_mFWarning_Wsp ==
                                        old_pIp_mFWarning_Wsp),
                                        pIp_mFWarning_Wtf ==
                                        old_pIp_mFWarning_Wtf),
                                        pIp_mFWarning_Wav ==
                                        old_pIp_mFWarning_Wav),
                                    pIp_mFWarning_flgups ==
                                    old_pIp_mFWarning_flgups),
                                pIp_mFWarning_flgModeChange ==
                                old_pIp_mFWarning_flgModeChange),
                            pIp_mFWarning_countAV ==
                            old_pIp_mFWarning_countAV),
                        pIp_mFWarning_countSPLost ==
                        old_pIp_mFWarning_countSPLost + 1),
                    pIp_mFWarning_countSPSeen == 0),
                pIp_mFWarning_countSPset ==
                old_pIp_mFWarning_countSPset),
            pIp_mFWarning_countUPSpc ==
            old_pIp_mFWarning_countUPSpc))
Z3 Expression: Implies(And(And(And(True,
                    old_pIp_mFWarning_countSPSeen + 1 > 2),
                old_pIp_mFWarning_countSPLost != 0),
            old_pIp_mDSSData_flgSP != 0),
        And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_mDSSData_stateFlag_A ==
                                        old_pIp_mDSSData_stateFlag_A,
                                        pIp_mDSSData_stateFlag_B ==
                                        old_pIp_mDSSData_stateFlag_B),
                                        pIp_mDSSData_royaw ==
                                        old_pIp_mDSSData_royaw),
                                        pIp_mDSSData_piyaw ==
                                        old_pIp_mDSSData_piyaw),
                                        pIp_mDSSData_flgSP ==
                                        old_pIp_mDSSData_flgSP),
                                        pIp_mFWarning_CWsp ==
                                        old_pIp_mFWarning_CWsp),
                                        pIp_mFWarning_CWtf ==
                                        old_pIp_mFWarning_CWtf),
                                        pIp_mFWarning_Wsp ==
                                        old_pIp_mFWarning_Wsp),
                                        pIp_mFWarning_Wtf ==
                                        old_pIp_mFWarning_Wtf),
                                        pIp_mFWarning_Wav ==
                                        old_pIp_mFWarning_Wav),
                                    pIp_mFWarning_flgups ==
                                    old_pIp_mFWarning_flgups),
                                pIp_mFWarning_flgModeChange ==
                                old_pIp_mFWarning_flgModeChange),
                            pIp_mFWarning_countAV ==
                            old_pIp_mFWarning_countAV),
                        pIp_mFWarning_countSPLost == 0),
                    pIp_mFWarning_countSPSeen == 0),
                pIp_mFWarning_countSPset ==
                old_pIp_mFWarning_countSPset),
            pIp_mFWarning_countUPSpc ==
            old_pIp_mFWarning_countUPSpc))
Z3 Expression: Implies(And(And(And(True, old_pIp_mFWarning_countSPSeen > 2),
                old_pIp_mFWarning_countSPLost == 0),
            old_pIp_mDSSData_flgSP != 0),
        And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_mDSSData_stateFlag_A ==
                                        old_pIp_mDSSData_stateFlag_A,
                                        pIp_mDSSData_stateFlag_B ==
                                        old_pIp_mDSSData_stateFlag_B),
                                        pIp_mDSSData_royaw ==
                                        old_pIp_mDSSData_royaw),
                                        pIp_mDSSData_piyaw ==
                                        old_pIp_mDSSData_piyaw),
                                        pIp_mDSSData_flgSP ==
                                        old_pIp_mDSSData_flgSP),
                                        pIp_mFWarning_CWsp ==
                                        old_pIp_mFWarning_CWsp),
                                        pIp_mFWarning_CWtf ==
                                        old_pIp_mFWarning_CWtf),
                                        pIp_mFWarning_Wsp ==
                                        old_pIp_mFWarning_Wsp),
                                        pIp_mFWarning_Wtf ==
                                        old_pIp_mFWarning_Wtf),
                                        pIp_mFWarning_Wav ==
                                        old_pIp_mFWarning_Wav),
                                    pIp_mFWarning_flgups ==
                                    old_pIp_mFWarning_flgups),
                                pIp_mFWarning_flgModeChange ==
                                old_pIp_mFWarning_flgModeChange),
                            pIp_mFWarning_countAV ==
                            old_pIp_mFWarning_countAV),
                        pIp_mFWarning_countSPLost == 0),
                    pIp_mFWarning_countSPSeen == 0),
                pIp_mFWarning_countSPset ==
                old_pIp_mFWarning_countSPset),
            pIp_mFWarning_countUPSpc ==
            old_pIp_mFWarning_countUPSpc))
Z3 Expression: Implies(And(And(And(old_pIp_mFWarning_countSPLost <= 33750,
                    old_pIp_mFWarning_countSPSeen + 1 <= 2),
                old_pIp_mFWarning_countSPLost != 0),
            old_pIp_mDSSData_flgSP != 0),
        And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_mDSSData_stateFlag_A ==
                                        old_pIp_mDSSData_stateFlag_A,
                                        pIp_mDSSData_stateFlag_B ==
                                        old_pIp_mDSSData_stateFlag_B),
                                        pIp_mDSSData_royaw ==
                                        old_pIp_mDSSData_royaw),
                                        pIp_mDSSData_piyaw ==
                                        old_pIp_mDSSData_piyaw),
                                        pIp_mDSSData_flgSP ==
                                        old_pIp_mDSSData_flgSP),
                                        pIp_mFWarning_CWsp ==
                                        old_pIp_mFWarning_CWsp),
                                        pIp_mFWarning_CWtf ==
                                        old_pIp_mFWarning_CWtf),
                                        pIp_mFWarning_Wsp ==
                                        old_pIp_mFWarning_Wsp),
                                        pIp_mFWarning_Wtf ==
                                        old_pIp_mFWarning_Wtf),
                                        pIp_mFWarning_Wav ==
                                        old_pIp_mFWarning_Wav),
                                    pIp_mFWarning_flgups ==
                                    old_pIp_mFWarning_flgups),
                                pIp_mFWarning_flgModeChange ==
                                old_pIp_mFWarning_flgModeChange),
                            pIp_mFWarning_countAV ==
                            old_pIp_mFWarning_countAV),
                        pIp_mFWarning_countSPLost ==
                        old_pIp_mFWarning_countSPLost),
                    pIp_mFWarning_countSPSeen ==
                    old_pIp_mFWarning_countSPSeen + 1),
                pIp_mFWarning_countSPset ==
                old_pIp_mFWarning_countSPset),
            pIp_mFWarning_countUPSpc ==
            old_pIp_mFWarning_countUPSpc))
Z3 Expression: Implies(And(And(And(old_pIp_mFWarning_countSPLost <= 33750,
                    old_pIp_mFWarning_countSPSeen <= 2),
                old_pIp_mFWarning_countSPLost == 0),
            old_pIp_mDSSData_flgSP != 0),
        And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_mDSSData_stateFlag_A ==
                                        old_pIp_mDSSData_stateFlag_A,
                                        pIp_mDSSData_stateFlag_B ==
                                        old_pIp_mDSSData_stateFlag_B),
                                        pIp_mDSSData_royaw ==
                                        old_pIp_mDSSData_royaw),
                                        pIp_mDSSData_piyaw ==
                                        old_pIp_mDSSData_piyaw),
                                        pIp_mDSSData_flgSP ==
                                        old_pIp_mDSSData_flgSP),
                                        pIp_mFWarning_CWsp ==
                                        old_pIp_mFWarning_CWsp),
                                        pIp_mFWarning_CWtf ==
                                        old_pIp_mFWarning_CWtf),
                                        pIp_mFWarning_Wsp ==
                                        old_pIp_mFWarning_Wsp),
                                        pIp_mFWarning_Wtf ==
                                        old_pIp_mFWarning_Wtf),
                                        pIp_mFWarning_Wav ==
                                        old_pIp_mFWarning_Wav),
                                    pIp_mFWarning_flgups ==
                                    old_pIp_mFWarning_flgups),
                                pIp_mFWarning_flgModeChange ==
                                old_pIp_mFWarning_flgModeChange),
                            pIp_mFWarning_countAV ==
                            old_pIp_mFWarning_countAV),
                        pIp_mFWarning_countSPLost ==
                        old_pIp_mFWarning_countSPLost),
                    pIp_mFWarning_countSPSeen ==
                    old_pIp_mFWarning_countSPSeen),
                pIp_mFWarning_countSPset ==
                old_pIp_mFWarning_countSPset),
            pIp_mFWarning_countUPSpc ==
            old_pIp_mFWarning_countUPSpc))

SoftFaultJudgeSPFun 的最大非冗余集合:
[pIp_mFWarning_countUPSpc == old_pIp_mFWarning_countUPSpc, pIp_mDSSData_stateFlag_B == old_pIp_mDSSData_stateFlag_B, pIp_mFWarning_Wav == old_pIp_mFWarning_Wav, pIp_mFWarning_Wtf == old_pIp_mFWarning_Wtf, pIp_mFWarning_CWsp == old_pIp_mFWarning_CWsp, pIp_mDSSData_royaw == old_pIp_mDSSData_royaw, pIp_mDSSData_stateFlag_A == old_pIp_mDSSData_stateFlag_A, pIp_mFWarning_CWtf == old_pIp_mFWarning_CWtf, pIp_mFWarning_countAV == old_pIp_mFWarning_countAV, pIp_mDSSData_piyaw == old_pIp_mDSSData_piyaw, pIp_mFWarning_flgModeChange ==
old_pIp_mFWarning_flgModeChange, pIp_mFWarning_flgups == old_pIp_mFWarning_flgups, pIp_mDSSData_flgSP == old_pIp_mDSSData_flgSP]
