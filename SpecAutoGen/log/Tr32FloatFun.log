2025-07-05 02:30:12,385 - INFO  - 
FUNCTION INITIALIZATION
2025-07-05 02:30:12,386 - INFO  - ========================================

2025-07-05 02:30:12,419 - INFO  - 初始待处理函数: ['Tr32FloatFun']
2025-07-05 02:30:12,419 - INFO  - 
GENERATE ANNOTATION FOR Tr32FloatFun
2025-07-05 02:30:12,419 - INFO  - ========================================

2025-07-05 02:30:12,419 - INFO  - 函数 Tr32FloatFun 已经初始化
2025-07-05 02:30:12,420 - INFO  - 开始生成 Tr32FloatFun 的注释代码
2025-07-05 02:30:12,422 - INFO  - 
GENERATE FUNCTION SUMMARY FOR Tr32FloatFun
2025-07-05 02:30:12,422 - INFO  - ========================================

2025-07-05 02:30:12,433 - INFO  - 开始生成完整的 Tr32FloatFun 的注释代码
2025-07-05 02:30:12,443 - INFO  - 开始生成 Tr32FloatFun 的 ACSL 规约
2025-07-05 02:30:12,466 - INFO  - 
SUMMARY FOR Tr32FloatFun
2025-07-05 02:30:12,466 - INFO  - ========================================

2025-07-05 02:30:12,466 - INFO  - 
函数 Tr32FloatFun 的 VST Summary 为:
/*@
With pIp_pA_v pIp_pA pIp_pB_v pIp_pB pIp_pC_v pIp_pC pIp_ui2f_ui08_l pIp_ui2f_ui08_0 pIp_ui2f_ui08_1 pIp_ui2f_ui08_2 pIp_ui2f_ui08_3 pIp_ui2f_flt32 pIp_ui2f_ui32 pIp_f2ui1_ui08_l pIp_f2ui1_ui08_0 pIp_f2ui1_ui08_1 pIp_f2ui1_ui08_2 pIp_f2ui1_ui08_3 pIp_f2ui1_flt32 pIp_f2ui1_ui32 pIp_f2ui2_ui08_l pIp_f2ui2_ui08_0 pIp_f2ui2_ui08_1 pIp_f2ui2_ui08_2 pIp_f2ui2_ui08_3 pIp_f2ui2_flt32 pIp_f2ui2_ui32 pIp_f2ui3_ui08_l pIp_f2ui3_ui08_0 pIp_f2ui3_ui08_1 pIp_f2ui3_ui08_2 pIp_f2ui3_ui08_3 pIp_f2ui3_flt32 pIp_f2ui3_ui32 pIp_ret_v pIp_ret
Require *(pIp->pA) == pIp_pA_v && (pIp->pA) == pIp_pA && *(pIp->pB) == pIp_pB_v && (pIp->pB) == pIp_pB && *(pIp->pC) == pIp_pC_v && (pIp->pC) == pIp_pC && store_int_array(pIp->ui2f.ui08,4, pIp_ui2f_ui08_l) && pIp_ui2f_ui08_l[0] == pIp_ui2f_ui08_0 && pIp_ui2f_ui08_l[1] == pIp_ui2f_ui08_1 && pIp_ui2f_ui08_l[2] == pIp_ui2f_ui08_2 && pIp_ui2f_ui08_l[3] == pIp_ui2f_ui08_3 && pIp->ui2f.flt32 == pIp_ui2f_flt32 && pIp->ui2f.ui32 == pIp_ui2f_ui32 && store_int_array(pIp->f2ui1.ui08,4, pIp_f2ui1_ui08_l) && pIp_f2ui1_ui08_l[0] == pIp_f2ui1_ui08_0 && pIp_f2ui1_ui08_l[1] == pIp_f2ui1_ui08_1 && pIp_f2ui1_ui08_l[2] == pIp_f2ui1_ui08_2 && pIp_f2ui1_ui08_l[3] == pIp_f2ui1_ui08_3 && pIp->f2ui1.flt32 == pIp_f2ui1_flt32 && pIp->f2ui1.ui32 == pIp_f2ui1_ui32 && store_int_array(pIp->f2ui2.ui08,4, pIp_f2ui2_ui08_l) && pIp_f2ui2_ui08_l[0] == pIp_f2ui2_ui08_0 && pIp_f2ui2_ui08_l[1] == pIp_f2ui2_ui08_1 && pIp_f2ui2_ui08_l[2] == pIp_f2ui2_ui08_2 && pIp_f2ui2_ui08_l[3] == pIp_f2ui2_ui08_3 && pIp->f2ui2.flt32 == pIp_f2ui2_flt32 && pIp->f2ui2.ui32 == pIp_f2ui2_ui32 && store_int_array(pIp->f2ui3.ui08,4, pIp_f2ui3_ui08_l) && pIp_f2ui3_ui08_l[0] == pIp_f2ui3_ui08_0 && pIp_f2ui3_ui08_l[1] == pIp_f2ui3_ui08_1 && pIp_f2ui3_ui08_l[2] == pIp_f2ui3_ui08_2 && pIp_f2ui3_ui08_l[3] == pIp_f2ui3_ui08_3 && pIp->f2ui3.flt32 == pIp_f2ui3_flt32 && pIp->f2ui3.ui32 == pIp_f2ui3_ui32 && *(pIp->ret) == pIp_ret_v && (pIp->ret) == pIp_ret
Ensure (pIp_ui2f_ui08_l[0] == pIp_ui2f_ui08_0 && pIp_ui2f_ui08_l[1] == pIp_ui2f_ui08_1 && pIp_ui2f_ui08_l[2] == pIp_ui2f_ui08_2 && pIp_ui2f_ui08_l[3] == pIp_ui2f_ui08_3 && pIp_f2ui1_ui08_l[0] == pIp_f2ui1_ui08_0 && pIp_f2ui1_ui08_l[1] == pIp_f2ui1_ui08_1 && pIp_f2ui1_ui08_l[2] == pIp_f2ui1_ui08_2 && pIp_f2ui1_ui08_l[3] == pIp_f2ui1_ui08_3 && pIp_f2ui2_ui08_l[0] == pIp_f2ui2_ui08_0 && pIp_f2ui2_ui08_l[1] == pIp_f2ui2_ui08_1 && pIp_f2ui2_ui08_l[2] == pIp_f2ui2_ui08_2 && pIp_f2ui2_ui08_l[3] == pIp_f2ui2_ui08_3 && pIp_f2ui3_ui08_l[0] == pIp_f2ui3_ui08_0 && pIp_f2ui3_ui08_l[1] == pIp_f2ui3_ui08_1 && pIp_f2ui3_ui08_l[2] == pIp_f2ui3_ui08_2 && pIp_f2ui3_ui08_l[3] == pIp_f2ui3_ui08_3 && (pIp->pA == pIp_pA) * (*pIp->pA == pIp_ui2f_flt32) * (pIp->pB == pIp_pB) * (*pIp->pB == pIp_ui2f_flt32) * (pIp->pC == pIp_pC) * (*pIp->pC == pIp_ui2f_flt32) * store_int_array(&pIp->ui2f.ui08, 4, pIp_ui2f_ui08_l) * (pIp->ui2f.flt32 == pIp_ui2f_flt32) * (pIp->ui2f.ui32 == (pIp_f2ui1_ui32 & pIp_f2ui2_ui32 | pIp_f2ui1_ui32 & pIp_f2ui3_ui32 | pIp_f2ui2_ui32 & pIp_f2ui3_ui32)) * store_int_array(&pIp->f2ui1.ui08, 4, pIp_f2ui1_ui08_l) * (pIp->f2ui1.flt32 == pIp_pA_v) * (pIp->f2ui1.ui32 == pIp_f2ui1_ui32) * store_int_array(&pIp->f2ui2.ui08, 4, pIp_f2ui2_ui08_l) * (pIp->f2ui2.flt32 == pIp_pB_v) * (pIp->f2ui2.ui32 == pIp_f2ui2_ui32) * store_int_array(&pIp->f2ui3.ui08, 4, pIp_f2ui3_ui08_l) * (pIp->f2ui3.flt32 == pIp_pC_v) * (pIp->f2ui3.ui32 == pIp_f2ui3_ui32) * (pIp->ret == pIp_ret) * (*pIp->ret == pIp_ui2f_flt32))
*/
2025-07-05 02:30:12,467 - INFO  - 
函数 Tr32FloatFun 的 ACSL Summary 为:
/*@
 requires \valid(pIp) && \valid(pIp->pA) && \valid(pIp->pB) && \valid(pIp->pC) && \valid(pIp->ui2f.ui08+ (0..4)) && \valid(pIp->f2ui1.ui08+ (0..4)) && \valid(pIp->f2ui2.ui08+ (0..4)) && \valid(pIp->f2ui3.ui08+ (0..4)) && \valid(pIp->ret) ;
 requires \separated(pIp,pIp->pA,pIp->pB,pIp->pC,pIp->ui2f.ui08+(0..4),pIp->f2ui1.ui08+(0..4),pIp->f2ui2.ui08+(0..4),pIp->f2ui3.ui08+(0..4),pIp->ret) ;

ensures pIp->ui2f.ui08[0] == \old(pIp->ui2f.ui08[0]) && pIp->ui2f.ui08[1] == \old(pIp->ui2f.ui08[1]) && pIp->ui2f.ui08[2] == \old(pIp->ui2f.ui08[2]) && pIp->ui2f.ui08[3] == \old(pIp->ui2f.ui08[3]) && pIp->f2ui1.ui08[0] == \old(pIp->f2ui1.ui08[0]) && pIp->f2ui1.ui08[1] == \old(pIp->f2ui1.ui08[1]) && pIp->f2ui1.ui08[2] == \old(pIp->f2ui1.ui08[2]) && pIp->f2ui1.ui08[3] == \old(pIp->f2ui1.ui08[3]) && pIp->f2ui2.ui08[0] == \old(pIp->f2ui2.ui08[0]) && pIp->f2ui2.ui08[1] == \old(pIp->f2ui2.ui08[1]) && pIp->f2ui2.ui08[2] == \old(pIp->f2ui2.ui08[2]) && pIp->f2ui2.ui08[3] == \old(pIp->f2ui2.ui08[3]) && pIp->f2ui3.ui08[0] == \old(pIp->f2ui3.ui08[0]) && pIp->f2ui3.ui08[1] == \old(pIp->f2ui3.ui08[1]) && pIp->f2ui3.ui08[2] == \old(pIp->f2ui3.ui08[2]) && pIp->f2ui3.ui08[3] == \old(pIp->f2ui3.ui08[3]) ==> pIp->pA == \old(pIp->pA)&&*pIp->pA == \old(pIp->ui2f.flt32)&&pIp->pB == \old(pIp->pB)&&*pIp->pB == \old(pIp->ui2f.flt32)&&pIp->pC == \old(pIp->pC)&&*pIp->pC == \old(pIp->ui2f.flt32)&&pIp->ui2f.flt32 == \old(pIp->ui2f.flt32)&&pIp->ui2f.ui32 == (\old(pIp->f2ui1.ui32) & \old(pIp->f2ui2.ui32) | \old(pIp->f2ui1.ui32) & \old(pIp->f2ui3.ui32) | \old(pIp->f2ui2.ui32) & \old(pIp->f2ui3.ui32))&&pIp->f2ui1.flt32 == \old(*pIp->pA)&&pIp->f2ui1.ui32 == \old(pIp->f2ui1.ui32)&&pIp->f2ui2.flt32 == \old(*pIp->pB)&&pIp->f2ui2.ui32 == \old(pIp->f2ui2.ui32)&&pIp->f2ui3.flt32 == \old(*pIp->pC)&&pIp->f2ui3.ui32 == \old(pIp->f2ui3.ui32)&&pIp->ret == \old(pIp->ret)&&*pIp->ret == \old(pIp->ui2f.flt32);

*/

2025-07-05 02:30:12,684 - INFO  - 
VERIFICATION FOR Tr32FloatFun
2025-07-05 02:30:12,684 - INFO  - ========================================

2025-07-05 02:30:13,603 - INFO  - 
GENERLIZATION FOR Tr32FloatFun
2025-07-05 02:30:13,603 - INFO  - ========================================

2025-07-05 02:30:15,246 - INFO  - Original ACSL: pIp->ui2f.ui08[0] == \old(pIp->ui2f.ui08[0]) && pIp->ui2f.ui08[1] == \old(pIp->ui2f.ui08[1]) && pIp->ui2f.ui08[2] == \old(pIp->ui2f.ui08[2]) && pIp->ui2f.ui08[3] == \old(pIp->ui2f.ui08[3]) && pIp->f2ui1.ui08[0] == \old(pIp->f2ui1.ui08[0]) && pIp->f2ui1.ui08[1] == \old(pIp->f2ui1.ui08[1]) && pIp->f2ui1.ui08[2] == \old(pIp->f2ui1.ui08[2]) && pIp->f2ui1.ui08[3] == \old(pIp->f2ui1.ui08[3]) && pIp->f2ui2.ui08[0] == \old(pIp->f2ui2.ui08[0]) && pIp->f2ui2.ui08[1] == \old(pIp->f2ui2.ui08[1]) && pIp->f2ui2.ui08[2] == \old(pIp->f2ui2.ui08[2]) && pIp->f2ui2.ui08[3] == \old(pIp->f2ui2.ui08[3]) && pIp->f2ui3.ui08[0] == \old(pIp->f2ui3.ui08[0]) && pIp->f2ui3.ui08[1] == \old(pIp->f2ui3.ui08[1]) && pIp->f2ui3.ui08[2] == \old(pIp->f2ui3.ui08[2]) && pIp->f2ui3.ui08[3] == \old(pIp->f2ui3.ui08[3]) ==> pIp->pA == \old(pIp->pA)&&*pIp->pA == \old(pIp->ui2f.flt32)&&pIp->pB == \old(pIp->pB)&&*pIp->pB == \old(pIp->ui2f.flt32)&&pIp->pC == \old(pIp->pC)&&*pIp->pC == \old(pIp->ui2f.flt32)&&pIp->ui2f.flt32 == \old(pIp->ui2f.flt32)&&pIp->ui2f.ui32 == (\old(pIp->f2ui1.ui32) & \old(pIp->f2ui2.ui32) | \old(pIp->f2ui1.ui32) & \old(pIp->f2ui3.ui32) | \old(pIp->f2ui2.ui32) & \old(pIp->f2ui3.ui32))&&pIp->f2ui1.flt32 == \old(*pIp->pA)&&pIp->f2ui1.ui32 == \old(pIp->f2ui1.ui32)&&pIp->f2ui2.flt32 == \old(*pIp->pB)&&pIp->f2ui2.ui32 == \old(pIp->f2ui2.ui32)&&pIp->f2ui3.flt32 == \old(*pIp->pC)&&pIp->f2ui3.ui32 == \old(pIp->f2ui3.ui32)&&pIp->ret == \old(pIp->ret)&&*pIp->ret == \old(pIp->ui2f.flt32);
2025-07-05 02:30:15,264 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_ui2f_ui08_0 ==
                                        old_pIp_ui2f_ui08_0,
                                        pIp_ui2f_ui08_1 ==
                                        old_pIp_ui2f_ui08_1),
                                        pIp_ui2f_ui08_2 ==
                                        old_pIp_ui2f_ui08_2),
                                        pIp_ui2f_ui08_3 ==
                                        old_pIp_ui2f_ui08_3),
                                        pIp_f2ui1_ui08_0 ==
                                        old_pIp_f2ui1_ui08_0),
                                        pIp_f2ui1_ui08_1 ==
                                        old_pIp_f2ui1_ui08_1),
                                        pIp_f2ui1_ui08_2 ==
                                        old_pIp_f2ui1_ui08_2),
                                        pIp_f2ui1_ui08_3 ==
                                        old_pIp_f2ui1_ui08_3),
                                        pIp_f2ui2_ui08_0 ==
                                        old_pIp_f2ui2_ui08_0),
                                    pIp_f2ui2_ui08_1 ==
                                    old_pIp_f2ui2_ui08_1),
                                pIp_f2ui2_ui08_2 ==
                                old_pIp_f2ui2_ui08_2),
                            pIp_f2ui2_ui08_3 ==
                            old_pIp_f2ui2_ui08_3),
                        pIp_f2ui3_ui08_0 ==
                        old_pIp_f2ui3_ui08_0),
                    pIp_f2ui3_ui08_1 == old_pIp_f2ui3_ui08_1),
                pIp_f2ui3_ui08_2 == old_pIp_f2ui3_ui08_2),
            pIp_f2ui3_ui08_3 == old_pIp_f2ui3_ui08_3),
        And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_pA ==
                                        old_pIp_pA,
                                        pIp_pA_v ==
                                        old_pIp_ui2f_flt32),
                                        pIp_pB == old_pIp_pB),
                                        pIp_pB_v ==
                                        old_pIp_ui2f_flt32),
                                        pIp_pC == old_pIp_pC),
                                        pIp_pC_v ==
                                        old_pIp_ui2f_flt32),
                                        pIp_ui2f_flt32 ==
                                        old_pIp_ui2f_flt32),
                                        pIp_ui2f_ui32 ==
                                        old_pIp_f2ui1_ui32 &
                                        old_pIp_f2ui2_ui32 |
                                        old_pIp_f2ui1_ui32 &
                                        old_pIp_f2ui3_ui32 |
                                        old_pIp_f2ui2_ui32 &
                                        old_pIp_f2ui3_ui32),
                                        pIp_f2ui1_flt32 ==
                                        pIp_pA_old_v),
                                    pIp_f2ui1_ui32 ==
                                    old_pIp_f2ui1_ui32),
                                pIp_f2ui2_flt32 ==
                                pIp_pB_old_v),
                            pIp_f2ui2_ui32 ==
                            old_pIp_f2ui2_ui32),
                        pIp_f2ui3_flt32 == pIp_pC_old_v),
                    pIp_f2ui3_ui32 == old_pIp_f2ui3_ui32),
                pIp_ret == old_pIp_ret),
            pIp_ret_v == old_pIp_ui2f_flt32))
2025-07-05 02:30:19,565 - INFO  - 
Tr32FloatFun 的最大非冗余集合:
2025-07-05 02:30:19,565 - INFO  - []
