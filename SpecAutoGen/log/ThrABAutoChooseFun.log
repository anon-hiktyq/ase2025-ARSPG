2025-07-05 02:33:11,782 - INFO  - 
FUNCTION INITIALIZATION
2025-07-05 02:33:11,782 - INFO  - ========================================

2025-07-05 02:33:11,870 - INFO  - 初始待处理函数: ['ThrABAutoChooseFun']
2025-07-05 02:33:11,870 - INFO  - 
GENERATE ANNOTATION FOR ThrABAutoChooseFun
2025-07-05 02:33:11,870 - INFO  - ========================================

2025-07-05 02:33:11,870 - INFO  - 函数 ThrABAutoChooseFun 已经初始化
2025-07-05 02:33:11,871 - INFO  - 开始生成 ThrABAutoChooseFun 的注释代码
2025-07-05 02:33:11,873 - INFO  - 
GENERATE FUNCTION SUMMARY FOR ThrABAutoChooseFun
2025-07-05 02:33:11,873 - INFO  - ========================================

2025-07-05 02:33:11,920 - INFO  - 开始生成完整的 ThrABAutoChooseFun 的注释代码
2025-07-05 02:33:11,930 - INFO  - 开始生成 ThrABAutoChooseFun 的 ACSL 规约
2025-07-05 02:33:11,942 - INFO  - 
SUMMARY FOR ThrABAutoChooseFun
2025-07-05 02:33:11,942 - INFO  - ========================================

2025-07-05 02:33:11,942 - INFO  - 
函数 ThrABAutoChooseFun 的 VST Summary 为:
/*@
With pIp_mThrDistribute_flgABChoose pIp_mThrDistribute_wPulse pIp_mThrDistribute_stateFlag_l pIp_mThrDistribute_stateFlag_0 pIp_mThrDistribute_stateFlag_1
Require pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose && pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse && store_int_array(pIp->mThrDistribute.stateFlag,2, pIp_mThrDistribute_stateFlag_l) && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1
Ensure (pIp_mThrDistribute_stateFlag_l[1] == 1 && pIp_mThrDistribute_stateFlag_l[0] == 1 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l) * (pIp->mThrDistribute.flgABChoose == 204) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || (pIp_mThrDistribute_stateFlag_l[1] == 1 && pIp_mThrDistribute_stateFlag_l[0] == 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l) * (pIp->mThrDistribute.flgABChoose == 51) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || (pIp_mThrDistribute_stateFlag_l[0] != 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l) * (pIp->mThrDistribute.flgABChoose == 0) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || (pIp_mThrDistribute_stateFlag_l[1] != 1 && pIp_mThrDistribute_stateFlag_l[0] == 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l) * (pIp->mThrDistribute.flgABChoose == 0) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || (pIp_mThrDistribute_stateFlag_l[0] != 0 && pIp_mThrDistribute_stateFlag_l[1] != 1 && pIp_mThrDistribute_stateFlag_l[0] == 1 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l) * (pIp->mThrDistribute.flgABChoose == 0) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse))
*/
2025-07-05 02:33:11,943 - INFO  - 
函数 ThrABAutoChooseFun 的 ACSL Summary 为:
/*@
 requires \valid(pIp) && \valid(pIp->mThrDistribute.stateFlag+ (0..2)) ;
 requires \separated(pIp,pIp->mThrDistribute.stateFlag+(0..2)) ;

ensures pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->mThrDistribute.flgABChoose == 204&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->mThrDistribute.flgABChoose == 51&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->mThrDistribute.flgABChoose == 0&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->mThrDistribute.flgABChoose == 0&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->mThrDistribute.flgABChoose == 0&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

*/

2025-07-05 02:33:12,169 - INFO  - 
VERIFICATION FOR ThrABAutoChooseFun
2025-07-05 02:33:12,169 - INFO  - ========================================

2025-07-05 02:33:13,231 - INFO  - 
GENERLIZATION FOR ThrABAutoChooseFun
2025-07-05 02:33:13,231 - INFO  - ========================================

2025-07-05 02:33:13,289 - INFO  - Original ACSL: pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->mThrDistribute.flgABChoose == 204&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:33:13,292 - INFO  - Z3 Expression: Implies(And(And(And(1 == pIp_mThrDistribute_stateFlag_1,
                    1 == pIp_mThrDistribute_stateFlag_0),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(204 == pIp_mThrDistribute_flgABChoose,
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:33:13,293 - INFO  - Original ACSL: pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->mThrDistribute.flgABChoose == 51&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:33:13,296 - INFO  - Z3 Expression: Implies(And(And(And(And(1 == pIp_mThrDistribute_stateFlag_1,
                        0 == pIp_mThrDistribute_stateFlag_0),
                    1 != pIp_mThrDistribute_stateFlag_0),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(51 == pIp_mThrDistribute_flgABChoose,
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:33:13,297 - INFO  - Original ACSL: pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->mThrDistribute.flgABChoose == 0&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:33:13,300 - INFO  - Z3 Expression: Implies(And(And(And(0 != pIp_mThrDistribute_stateFlag_0,
                    1 != pIp_mThrDistribute_stateFlag_0),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(0 == pIp_mThrDistribute_flgABChoose,
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:33:13,301 - INFO  - Original ACSL: pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->mThrDistribute.flgABChoose == 0&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:33:13,304 - INFO  - Z3 Expression: Implies(And(And(And(And(1 != pIp_mThrDistribute_stateFlag_1,
                        0 == pIp_mThrDistribute_stateFlag_0),
                    1 != pIp_mThrDistribute_stateFlag_0),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(0 == pIp_mThrDistribute_flgABChoose,
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:33:13,305 - INFO  - Original ACSL: pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->mThrDistribute.flgABChoose == 0&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);
2025-07-05 02:33:13,308 - INFO  - Z3 Expression: Implies(And(And(And(And(0 != pIp_mThrDistribute_stateFlag_0,
                        1 != pIp_mThrDistribute_stateFlag_1),
                    1 == pIp_mThrDistribute_stateFlag_0),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(0 == pIp_mThrDistribute_flgABChoose,
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:33:13,800 - INFO  - 
ThrABAutoChooseFun 的最大非冗余集合:
2025-07-05 02:33:13,801 - INFO  - []
