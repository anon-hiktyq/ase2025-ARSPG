2025-07-05 02:32:42,494 - INFO  - 
FUNCTION INITIALIZATION
2025-07-05 02:32:42,494 - INFO  - ========================================

2025-07-05 02:32:42,556 - INFO  - 初始待处理函数: ['JetDataGetFun', 'ThrABAutoChoose']
2025-07-05 02:32:42,556 - INFO  - 现在处理函数 ThrABAutoChoose

2025-07-05 02:32:42,575 - INFO  - 
GENERATE ANNOTATION FOR ThrABAutoChoose
2025-07-05 02:32:42,575 - INFO  - ========================================

2025-07-05 02:32:42,576 - INFO  - 函数 ThrABAutoChoose 已经初始化
2025-07-05 02:32:42,576 - INFO  - 开始生成 ThrABAutoChoose 的注释代码
2025-07-05 02:32:42,577 - INFO  - 
GENERATE FUNCTION SUMMARY FOR ThrABAutoChoose
2025-07-05 02:32:42,578 - INFO  - ========================================

2025-07-05 02:32:42,620 - INFO  - 开始生成完整的 ThrABAutoChoose 的注释代码
2025-07-05 02:32:42,630 - INFO  - 开始生成 ThrABAutoChoose 的 ACSL 规约
2025-07-05 02:32:42,641 - INFO  - 
GENERATE ANNOTATION FOR JetDataGetFun
2025-07-05 02:32:42,641 - INFO  - ========================================

2025-07-05 02:32:42,642 - INFO  - 函数 JetDataGetFun 已经初始化
2025-07-05 02:32:42,642 - INFO  - 开始生成 JetDataGetFun 的注释代码
2025-07-05 02:32:42,650 - INFO  - 
GENERATE FUNCTION SUMMARY FOR JetDataGetFun
2025-07-05 02:32:42,650 - INFO  - ========================================

2025-07-05 02:32:43,068 - INFO  - 开始生成完整的 JetDataGetFun 的注释代码
2025-07-05 02:32:43,082 - INFO  - 开始生成 JetDataGetFun 的 ACSL 规约
2025-07-05 02:32:43,112 - INFO  - 
SUMMARY FOR JetDataGetFun
2025-07-05 02:32:43,112 - INFO  - ========================================

2025-07-05 02:32:43,112 - INFO  - 
函数 JetDataGetFun 的 VST Summary 为:
/*@
With pIp_addr_e_v pIp_addr_e pIp_mThrDistribute_flgABChoose pIp_mThrDistribute_wPulse pIp_mThrDistribute_stateFlag_l pIp_mThrDistribute_stateFlag_0 pIp_mThrDistribute_stateFlag_1
Require *(pIp->addr_e) == pIp_addr_e_v && (pIp->addr_e) == pIp_addr_e && pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose && pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse && store_int_array(pIp->mThrDistribute.stateFlag,2, pIp_mThrDistribute_stateFlag_l) && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1
Ensure ((pIp_addr_e_v & 8) == 8 && (pIp_addr_e_v & 4) != 4 && pIp_mThrDistribute_stateFlag_l[0] != 0 && pIp_mThrDistribute_stateFlag_l[1] != 1 && pIp_mThrDistribute_stateFlag_l[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) == 8 && (pIp_addr_e_v & 4) != 4 && pIp_mThrDistribute_stateFlag_l[1] != 1 && pIp_mThrDistribute_stateFlag_l[0] == 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) == 8 && (pIp_addr_e_v & 4) != 4 && pIp_mThrDistribute_stateFlag_l[0] != 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) == 8 && (pIp_addr_e_v & 4) != 4 && pIp_mThrDistribute_stateFlag_l[1] == 1 && pIp_mThrDistribute_stateFlag_l[0] == 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) == 8 && (pIp_addr_e_v & 4) != 4 && pIp_mThrDistribute_stateFlag_l[1] == 1 && pIp_mThrDistribute_stateFlag_l[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) == 8 && (pIp_addr_e_v & 4) == 4 && pIp_mThrDistribute_stateFlag_l[0] != 0 && pIp_mThrDistribute_stateFlag_l[1] != 1 && pIp_mThrDistribute_stateFlag_l[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 1, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) == 8 && (pIp_addr_e_v & 4) == 4 && pIp_mThrDistribute_stateFlag_l[1] != 1 && pIp_mThrDistribute_stateFlag_l[0] == 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 1, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) == 8 && (pIp_addr_e_v & 4) == 4 && pIp_mThrDistribute_stateFlag_l[0] != 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 1, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) == 8 && (pIp_addr_e_v & 4) == 4 && pIp_mThrDistribute_stateFlag_l[1] == 1 && pIp_mThrDistribute_stateFlag_l[0] == 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 1, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) == 8 && (pIp_addr_e_v & 4) == 4 && pIp_mThrDistribute_stateFlag_l[1] == 1 && pIp_mThrDistribute_stateFlag_l[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 1, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) != 8 && (pIp_addr_e_v & 4) != 4 && pIp_mThrDistribute_stateFlag_l[0] != 0 && pIp_mThrDistribute_stateFlag_l[1] != 1 && pIp_mThrDistribute_stateFlag_l[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) != 8 && (pIp_addr_e_v & 4) != 4 && pIp_mThrDistribute_stateFlag_l[1] != 1 && pIp_mThrDistribute_stateFlag_l[0] == 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) != 8 && (pIp_addr_e_v & 4) != 4 && pIp_mThrDistribute_stateFlag_l[0] != 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) != 8 && (pIp_addr_e_v & 4) != 4 && pIp_mThrDistribute_stateFlag_l[1] == 1 && pIp_mThrDistribute_stateFlag_l[0] == 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) != 8 && (pIp_addr_e_v & 4) != 4 && pIp_mThrDistribute_stateFlag_l[1] == 1 && pIp_mThrDistribute_stateFlag_l[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) != 8 && (pIp_addr_e_v & 4) == 4 && pIp_mThrDistribute_stateFlag_l[0] != 0 && pIp_mThrDistribute_stateFlag_l[1] != 1 && pIp_mThrDistribute_stateFlag_l[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 1, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) != 8 && (pIp_addr_e_v & 4) == 4 && pIp_mThrDistribute_stateFlag_l[1] != 1 && pIp_mThrDistribute_stateFlag_l[0] == 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 1, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) != 8 && (pIp_addr_e_v & 4) == 4 && pIp_mThrDistribute_stateFlag_l[0] != 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 1, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) != 8 && (pIp_addr_e_v & 4) == 4 && pIp_mThrDistribute_stateFlag_l[1] == 1 && pIp_mThrDistribute_stateFlag_l[0] == 0 && pIp_mThrDistribute_stateFlag_l[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 1, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || ((pIp_addr_e_v & 8) != 8 && (pIp_addr_e_v & 4) == 4 && pIp_mThrDistribute_stateFlag_l[1] == 1 && pIp_mThrDistribute_stateFlag_l[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 1, pIp_mThrDistribute_stateFlag_l))) * (pIp->addr_e == pIp_addr_e) * (*pIp->addr_e == pIp_addr_e_v) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse))
*/
2025-07-05 02:32:43,113 - INFO  - 
函数 JetDataGetFun 的 ACSL Summary 为:
/*@
 requires \valid(pIp) && \valid(pIp->addr_e) && \valid(pIp->mThrDistribute.stateFlag+ (0..2)) ;
 requires \separated(pIp,pIp->addr_e,pIp->mThrDistribute.stateFlag+(0..2)) ;

ensures (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

*/

2025-07-05 02:32:43,315 - INFO  - 
VERIFICATION FOR JetDataGetFun
2025-07-05 02:32:43,315 - INFO  - ========================================

2025-07-05 02:32:44,985 - INFO  - 
GENERLIZATION FOR JetDataGetFun
2025-07-05 02:32:44,986 - INFO  - ========================================

2025-07-05 02:32:45,082 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,087 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(8 ==
                                    pIp_addr_e_old_v & 8,
                                    4 !=
                                    pIp_addr_e_old_v & 4),
                                0 !=
                                pIp_mThrDistribute_stateFlag_0),
                            1 !=
                            pIp_mThrDistribute_stateFlag_1),
                        1 == pIp_mThrDistribute_stateFlag_0),
                    0 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,089 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,094 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(8 ==
                                    pIp_addr_e_old_v & 8,
                                    4 !=
                                    pIp_addr_e_old_v & 4),
                                1 !=
                                pIp_mThrDistribute_stateFlag_1),
                            0 ==
                            pIp_mThrDistribute_stateFlag_0),
                        1 != pIp_mThrDistribute_stateFlag_0),
                    0 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,096 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,101 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(8 == pIp_addr_e_old_v & 8,
                                4 != pIp_addr_e_old_v & 4),
                            0 !=
                            pIp_mThrDistribute_stateFlag_0),
                        1 != pIp_mThrDistribute_stateFlag_0),
                    0 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,103 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,107 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(8 ==
                                    pIp_addr_e_old_v & 8,
                                    4 !=
                                    pIp_addr_e_old_v & 4),
                                1 ==
                                pIp_mThrDistribute_stateFlag_1),
                            0 ==
                            pIp_mThrDistribute_stateFlag_0),
                        1 != pIp_mThrDistribute_stateFlag_0),
                    51 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,109 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,114 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(8 == pIp_addr_e_old_v & 8,
                                4 != pIp_addr_e_old_v & 4),
                            1 ==
                            pIp_mThrDistribute_stateFlag_1),
                        1 == pIp_mThrDistribute_stateFlag_0),
                    204 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,116 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,121 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(8 ==
                                    pIp_addr_e_old_v & 8,
                                    4 ==
                                    pIp_addr_e_old_v & 4),
                                0 !=
                                pIp_mThrDistribute_stateFlag_0),
                            1 !=
                            pIp_mThrDistribute_stateFlag_1),
                        1 == pIp_mThrDistribute_stateFlag_0),
                    0 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,123 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,128 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(8 ==
                                    pIp_addr_e_old_v & 8,
                                    4 ==
                                    pIp_addr_e_old_v & 4),
                                1 !=
                                pIp_mThrDistribute_stateFlag_1),
                            0 ==
                            pIp_mThrDistribute_stateFlag_0),
                        1 != pIp_mThrDistribute_stateFlag_0),
                    0 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,129 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,134 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(8 == pIp_addr_e_old_v & 8,
                                4 == pIp_addr_e_old_v & 4),
                            0 !=
                            pIp_mThrDistribute_stateFlag_0),
                        1 != pIp_mThrDistribute_stateFlag_0),
                    0 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,136 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,141 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(8 ==
                                    pIp_addr_e_old_v & 8,
                                    4 ==
                                    pIp_addr_e_old_v & 4),
                                1 ==
                                pIp_mThrDistribute_stateFlag_1),
                            0 ==
                            pIp_mThrDistribute_stateFlag_0),
                        1 != pIp_mThrDistribute_stateFlag_0),
                    51 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,142 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) == 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,147 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(8 == pIp_addr_e_old_v & 8,
                                4 == pIp_addr_e_old_v & 4),
                            1 ==
                            pIp_mThrDistribute_stateFlag_1),
                        1 == pIp_mThrDistribute_stateFlag_0),
                    204 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,149 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,154 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(8 !=
                                    pIp_addr_e_old_v & 8,
                                    4 !=
                                    pIp_addr_e_old_v & 4),
                                0 !=
                                pIp_mThrDistribute_stateFlag_0),
                            1 !=
                            pIp_mThrDistribute_stateFlag_1),
                        1 == pIp_mThrDistribute_stateFlag_0),
                    0 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,156 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,160 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(8 !=
                                    pIp_addr_e_old_v & 8,
                                    4 !=
                                    pIp_addr_e_old_v & 4),
                                1 !=
                                pIp_mThrDistribute_stateFlag_1),
                            0 ==
                            pIp_mThrDistribute_stateFlag_0),
                        1 != pIp_mThrDistribute_stateFlag_0),
                    0 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,162 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,166 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(8 != pIp_addr_e_old_v & 8,
                                4 != pIp_addr_e_old_v & 4),
                            0 !=
                            pIp_mThrDistribute_stateFlag_0),
                        1 != pIp_mThrDistribute_stateFlag_0),
                    0 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,168 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,173 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(8 !=
                                    pIp_addr_e_old_v & 8,
                                    4 !=
                                    pIp_addr_e_old_v & 4),
                                1 ==
                                pIp_mThrDistribute_stateFlag_1),
                            0 ==
                            pIp_mThrDistribute_stateFlag_0),
                        1 != pIp_mThrDistribute_stateFlag_0),
                    51 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,175 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) != 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,180 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(8 != pIp_addr_e_old_v & 8,
                                4 != pIp_addr_e_old_v & 4),
                            1 ==
                            pIp_mThrDistribute_stateFlag_1),
                        1 == pIp_mThrDistribute_stateFlag_0),
                    204 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,182 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,186 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(8 !=
                                    pIp_addr_e_old_v & 8,
                                    4 ==
                                    pIp_addr_e_old_v & 4),
                                0 !=
                                pIp_mThrDistribute_stateFlag_0),
                            1 !=
                            pIp_mThrDistribute_stateFlag_1),
                        1 == pIp_mThrDistribute_stateFlag_0),
                    0 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,189 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[1] != 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,193 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(8 !=
                                    pIp_addr_e_old_v & 8,
                                    4 ==
                                    pIp_addr_e_old_v & 4),
                                1 !=
                                pIp_mThrDistribute_stateFlag_1),
                            0 ==
                            pIp_mThrDistribute_stateFlag_0),
                        1 != pIp_mThrDistribute_stateFlag_0),
                    0 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,195 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[0] != 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,199 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(8 != pIp_addr_e_old_v & 8,
                                4 == pIp_addr_e_old_v & 4),
                            0 !=
                            pIp_mThrDistribute_stateFlag_0),
                        1 != pIp_mThrDistribute_stateFlag_0),
                    0 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,201 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse)
2025-07-05 02:32:45,206 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(8 !=
                                    pIp_addr_e_old_v & 8,
                                    4 ==
                                    pIp_addr_e_old_v & 4),
                                1 ==
                                pIp_mThrDistribute_stateFlag_1),
                            0 ==
                            pIp_mThrDistribute_stateFlag_0),
                        1 != pIp_mThrDistribute_stateFlag_0),
                    51 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:45,208 - INFO  - Original ACSL: (\old(*pIp->addr_e) & 8) != 8 && (\old(*pIp->addr_e) & 4) == 4 && pIp->mThrDistribute.stateFlag[1] == 1 && pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->addr_e == \old(pIp->addr_e)&&*pIp->addr_e == \old(*pIp->addr_e)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);
2025-07-05 02:32:45,212 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(8 != pIp_addr_e_old_v & 8,
                                4 == pIp_addr_e_old_v & 4),
                            1 ==
                            pIp_mThrDistribute_stateFlag_1),
                        1 == pIp_mThrDistribute_stateFlag_0),
                    204 == pIp_mThrDistribute_flgABChoose),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(pIp_addr_e == old_pIp_addr_e,
                pIp_addr_e_v == pIp_addr_e_old_v),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:32:46,256 - INFO  - 
JetDataGetFun 的最大非冗余集合:
2025-07-05 02:32:46,256 - INFO  - []
