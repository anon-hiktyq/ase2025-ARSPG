2025-07-05 02:23:53,191 - INFO  - 
FUNCTION INITIALIZATION
2025-07-05 02:23:53,191 - INFO  - ========================================

2025-07-05 02:23:53,208 - INFO  - 初始待处理函数: ['CheckCalFun']
2025-07-05 02:23:53,208 - INFO  - 
GENERATE ANNOTATION FOR CheckCalFun
2025-07-05 02:23:53,209 - INFO  - ========================================

2025-07-05 02:23:53,209 - INFO  - 函数 CheckCalFun 已经初始化
2025-07-05 02:23:53,209 - INFO  - 开始生成 CheckCalFun 的注释代码
2025-07-05 02:23:53,211 - INFO  - 
GENERATE LOOP INVARIANT FOR CheckCalFun
2025-07-05 02:23:53,212 - INFO  - ========================================

2025-07-05 02:23:53,477 - INFO  - Variable Maps:[{'chksum': '0', 'pIp': 'pIp@pre', 'pIp@pre->len': 'pIpen', 'pIp@pre->pkv': 'pIp_pkv', '*pIp_pkv': 'pIp_pkv_v', 'pIp@pre->chksum': 'pIp_chksum'}]
2025-07-05 02:23:53,477 - INFO  - Path conditions: [None]
2025-07-05 02:23:53,478 - INFO  - Pre condition: (chksum == 0) * undef_data_at(&i) * (pIp == pIp@pre) * (pIp@pre->len == pIp_len) * (pIp@pre->pkv == pIp_pkv) * (*pIp_pkv == pIp_pkv_v) * (pIp@pre->chksum == pIp_chksum)
2025-07-05 02:23:53,478 - INFO  - Loop Condition: i<pIp -> len
2025-07-05 02:23:53,478 - INFO  - Array Names: []
2025-07-05 02:23:53,478 - INFO  - Updated Loop Conditions: ['i<pIp@pre -> len']
2025-07-05 02:23:53,481 - INFO  - Global Unchanged Variables: ['pIp', 'pIp@pre->len', 'pIp@pre->pkv', '*pIp_pkv', 'pIp@pre->chksum']
2025-07-05 02:23:53,482 - INFO  - Non Inductive Variables: []
2025-07-05 02:25:27,577 - INFO  - ACSL 格式的循环不变量
2025-07-05 02:25:27,577 - INFO  - /*@
      loop invariant pIp->pkv == \at(pIp->pkv, Pre);
      loop invariant pIp->len == \at(pIp->len, Pre);
      loop invariant pIp == \at(pIp, Pre);
    */
    for(i=0; i<pIp->len; i++)
    {
        chksum = chksum + pIp->pkv[i];
    }
2025-07-05 02:25:27,580 - INFO  - VST 格式的循环不变量
2025-07-05 02:25:27,580 - INFO  - /*@ Inv
    (pIp->pkv == pIp->pkv@pre) &&
(pIp->len == pIp->len@pre) &&
(pIp == pIp@pre)
    */
    
    for(i=0; i<pIp->len; i++)
    {
        chksum = chksum + pIp->pkv[i];
    }
2025-07-05 02:25:27,580 - INFO  - PARTIAL CORRECT INVARIANT
2025-07-05 02:25:27,580 - INFO  - 继续符号执行
2025-07-05 02:25:27,581 - INFO  - /*@ Inv
    (pIp->pkv == pIp->pkv@pre) &&
(pIp->len == pIp->len@pre) &&
(pIp == pIp@pre)
    */
    
    for(i=0; i<pIp->len; i++)
    {
        chksum = chksum + pIp->pkv[i];
    }
2025-07-05 02:25:42,616 - INFO  - CORRECT INVARIANT
2025-07-05 02:25:42,621 - INFO  - 
GENERATE FUNCTION SUMMARY FOR CheckCalFun
2025-07-05 02:25:42,622 - INFO  - ========================================

2025-07-05 02:25:42,631 - INFO  - 开始生成 CheckCalFun 的 ACSL 规约
2025-07-05 02:28:02,736 - INFO  - 
SUMMARY FOR CheckCalFun
2025-07-05 02:28:02,736 - INFO  - ========================================

2025-07-05 02:28:02,736 - INFO  - 
函数 CheckCalFun 的 VST Summary 为:
/*@
With pIp_len pIp_pkv_v pIp_pkv pIp_chksum
Require pIp->len == pIp_len && *(pIp->pkv) == pIp_pkv_v && (pIp->pkv) == pIp_pkv && pIp->chksum == pIp_chksum
Ensure emp
*/
2025-07-05 02:28:02,736 - INFO  - 
函数 CheckCalFun 的 ACSL Summary 为:

2025-07-05 02:28:02,996 - INFO  - 
VERIFICATION FOR CheckCalFun
2025-07-05 02:28:02,997 - INFO  - ========================================

2025-07-05 02:28:18,822 - INFO  - 
GENERLIZATION FOR CheckCalFun
2025-07-05 02:28:18,822 - INFO  - ========================================

2025-07-05 02:28:18,978 - INFO  - 
CheckCalFun 的最大非冗余集合:
2025-07-05 02:28:18,979 - INFO  - []
