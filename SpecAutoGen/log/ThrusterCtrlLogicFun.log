FUNCTION INITIALIZATION
========================================

type_name:__ThrusterCtrlLogic
type_name:TAG_FALSE_RATE_MODULATOR
type_name:TAG_FALSE_RATE_MODULATOR
type_name:TAG_FALSE_RATE_MODULATOR
type_name:TAG_UPS_2MS
初始待处理函数: ['ThrusterCtrlLogicFun']

GENERATE ANNOTATION FOR ThrusterCtrlLogicFun
========================================

函数 ThrusterCtrlLogicFun 已经初始化
开始生成 ThrusterCtrlLogicFun 的注释代码
ACSL ThrusterCtrlLogicFun.c文件的内容为: 

typedef struct TAG_FALSE_RATE_MODULATOR
{
	
	int 	u;						
	int   	r;						
	int  	Yp;						
	int 	Yn;						
	                            	
}SFratemodulator;

typedef struct TAG_UPS_2MS
{	
	int flgABChoose;				
    int wPulse;
	int stateFlag[2];				
    
} SThrDistribute;

typedef struct __ThrusterCtrlLogic
{

	SFratemodulator 		fmModulator;
	SFratemodulator 		smModulator;
	SFratemodulator 		tmModulator;
	SThrDistribute			mThrDistribute;
	
} ThrusterCtrlLogic;

void ThrusterCtrlLogicFun(ThrusterCtrlLogic *pIp)
{

	if ( pIp -> fmModulator.Yp != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x04 ;
	}

	if ( pIp -> fmModulator.Yn != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x08 ;
	}

	if ( pIp -> smModulator.Yp != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x10 ;
	}

	if ( pIp -> smModulator.Yn != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x20 ;
	}

	if ( pIp -> tmModulator.Yp != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x40 ;
	}

	if ( pIp -> tmModulator.Yn != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x80 ;
	}

	return ;
}
文件 3_output/test_ip/ThrusterCtrlLogicFun.c 已成功创建并写入。
预注释ThrusterCtrlLogicFun.c文件的内容为: 

#include "../verification_stdlib.h"
#include "../verification_list.h"
#include "../int_array_def.h"

/*@ Extern Coq (Result: Assertion) */
/*@ Extern Coq (Results: Z -> Assertion) */

    typedef struct TAG_FALSE_RATE_MODULATOR
{
	
	int 	u;						
	int   	r;						
	int  	Yp;						
	int 	Yn;						
	                            	
}SFratemodulator;
typedef struct TAG_UPS_2MS
{	
	int flgABChoose;				
    int wPulse;
	int stateFlag[2];				
    
} SThrDistribute;
typedef struct __ThrusterCtrlLogic
{

	SFratemodulator 		fmModulator;
	SFratemodulator 		smModulator;
	SFratemodulator 		tmModulator;
	SThrDistribute			mThrDistribute;
	
} ThrusterCtrlLogic;

void ThrusterCtrlLogicFun(ThrusterCtrlLogic *pIp)

/*@
With pIp_fmModulator_u pIp_fmModulator_r pIp_fmModulator_Yp pIp_fmModulator_Yn pIp_smModulator_u pIp_smModulator_r pIp_smModulator_Yp pIp_smModulator_Yn pIp_tmModulator_u pIp_tmModulator_r pIp_tmModulator_Yp pIp_tmModulator_Yn pIp_mThrDistribute_flgABChoose pIp_mThrDistribute_wPulse pIp_mThrDistribute_stateFlag_l pIp_mThrDistribute_stateFlag_0 pIp_mThrDistribute_stateFlag_1
Require pIp->fmModulator.u == pIp_fmModulator_u && pIp->fmModulator.r == pIp_fmModulator_r && pIp->fmModulator.Yp == pIp_fmModulator_Yp && pIp->fmModulator.Yn == pIp_fmModulator_Yn && pIp->smModulator.u == pIp_smModulator_u && pIp->smModulator.r == pIp_smModulator_r && pIp->smModulator.Yp == pIp_smModulator_Yp && pIp->smModulator.Yn == pIp_smModulator_Yn && pIp->tmModulator.u == pIp_tmModulator_u && pIp->tmModulator.r == pIp_tmModulator_r && pIp->tmModulator.Yp == pIp_tmModulator_Yp && pIp->tmModulator.Yn == pIp_tmModulator_Yn && pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose && pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse && store_int_array(pIp->mThrDistribute.stateFlag,2, pIp_mThrDistribute_stateFlag_l) && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1
Ensure emp
*/{

	if ( pIp -> fmModulator.Yp != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x04 ;
	}

	if ( pIp -> fmModulator.Yn != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x08 ;
	}

	if ( pIp -> smModulator.Yp != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x10 ;
	}

	if ( pIp -> smModulator.Yn != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x20 ;
	}

	if ( pIp -> tmModulator.Yp != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x40 ;
	}

	if ( pIp -> tmModulator.Yn != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x80 ;
	}

	return ;
}
文件 1_output/test_ip/ThrusterCtrlLogicFun.c 已成功创建并写入。
文件 2_output/test_ip/ThrusterCtrlLogicFun.c 已成功创建并写入。

GENERATE FUNCTION SUMMARY FOR ThrusterCtrlLogicFun
========================================

----------------------------------------
路径约束与返回值
Combined path condition:
(pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l))
----------------------------------------

开始生成完整的 ThrusterCtrlLogicFun 的注释代码
完整注释ThrusterCtrlLogicFun.c 文件的内容为: 

#include "../verification_stdlib.h"
#include "../verification_list.h"
#include "../int_array_def.h"

/*@ Extern Coq (Result: Assertion) */
/*@ Extern Coq (Results: Z -> Assertion) */

    typedef struct TAG_FALSE_RATE_MODULATOR
{
	
	int 	u;						
	int   	r;						
	int  	Yp;						
	int 	Yn;						
	                            	
}SFratemodulator;
typedef struct TAG_UPS_2MS
{	
	int flgABChoose;				
    int wPulse;
	int stateFlag[2];				
    
} SThrDistribute;
typedef struct __ThrusterCtrlLogic
{

	SFratemodulator 		fmModulator;
	SFratemodulator 		smModulator;
	SFratemodulator 		tmModulator;
	SThrDistribute			mThrDistribute;
	
} ThrusterCtrlLogic;

void ThrusterCtrlLogicFun(ThrusterCtrlLogic *pIp)

/*@
With pIp_fmModulator_u pIp_fmModulator_r pIp_fmModulator_Yp pIp_fmModulator_Yn pIp_smModulator_u pIp_smModulator_r pIp_smModulator_Yp pIp_smModulator_Yn pIp_tmModulator_u pIp_tmModulator_r pIp_tmModulator_Yp pIp_tmModulator_Yn pIp_mThrDistribute_flgABChoose pIp_mThrDistribute_wPulse pIp_mThrDistribute_stateFlag_l pIp_mThrDistribute_stateFlag_0 pIp_mThrDistribute_stateFlag_1
Require pIp->fmModulator.u == pIp_fmModulator_u && pIp->fmModulator.r == pIp_fmModulator_r && pIp->fmModulator.Yp == pIp_fmModulator_Yp && pIp->fmModulator.Yn == pIp_fmModulator_Yn && pIp->smModulator.u == pIp_smModulator_u && pIp->smModulator.r == pIp_smModulator_r && pIp->smModulator.Yp == pIp_smModulator_Yp && pIp->smModulator.Yn == pIp_smModulator_Yn && pIp->tmModulator.u == pIp_tmModulator_u && pIp->tmModulator.r == pIp_tmModulator_r && pIp->tmModulator.Yp == pIp_tmModulator_Yp && pIp->tmModulator.Yn == pIp_tmModulator_Yn && pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose && pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse && store_int_array(pIp->mThrDistribute.stateFlag,2, pIp_mThrDistribute_stateFlag_l) && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1
Ensure (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l))
*/
{

	if ( pIp -> fmModulator.Yp != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x04 ;
	}

	if ( pIp -> fmModulator.Yn != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x08 ;
	}

	if ( pIp -> smModulator.Yp != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x10 ;
	}

	if ( pIp -> smModulator.Yn != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x20 ;
	}

	if ( pIp -> tmModulator.Yp != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x40 ;
	}

	if ( pIp -> tmModulator.Yn != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x80 ;
	}

	return ;
}
文件 2_output/test_ip/ThrusterCtrlLogicFun.c 已成功创建并写入。
开始生成 ThrusterCtrlLogicFun 的 ACSL 规约
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 16 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 16 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 16 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 16 | 32 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 32 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 32 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 32 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 32 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 32 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 32 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 16 | 32 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 16 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 16 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 16 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 64 | 128)'}
Path Condition: pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 16 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 16 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 16 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 16 | 32 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 32 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 32 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 32 | 64)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 32)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 32)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 32)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 32)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 16 | 32)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 16 | 32)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 16 | 32)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 16)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 16)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8 | 16)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8 | 16)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 8)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4 | 8)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': '(pIp_mThrDistribute_wPulse | 4)'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
Variable Map: {'pIp->fmModulator.u': 'pIp_fmModulator_u', 'pIp->fmModulator.r': 'pIp_fmModulator_r', 'pIp->fmModulator.Yp': 'pIp_fmModulator_Yp', 'pIp->fmModulator.Yn': 'pIp_fmModulator_Yn', 'pIp->smModulator.u': 'pIp_smModulator_u', 'pIp->smModulator.r': 'pIp_smModulator_r', 'pIp->smModulator.Yp': 'pIp_smModulator_Yp', 'pIp->smModulator.Yn': 'pIp_smModulator_Yn', 'pIp->tmModulator.u': 'pIp_tmModulator_u', 'pIp->tmModulator.r': 'pIp_tmModulator_r', 'pIp->tmModulator.Yp': 'pIp_tmModulator_Yp', 'pIp->tmModulator.Yn': 'pIp_tmModulator_Yn', 'pIp->mThrDistribute.flgABChoose': 'pIp_mThrDistribute_flgABChoose', 'pIp->mThrDistribute.wPulse': 'pIp_mThrDistribute_wPulse'}
Path Condition: pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 
Result: None
ThrusterCtrlLogicFun.c 的规约的内容为: 
typedef struct TAG_FALSE_RATE_MODULATOR
{
	
	int 	u;						
	int   	r;						
	int  	Yp;						
	int 	Yn;						
	                            	
}SFratemodulator;
typedef struct TAG_UPS_2MS
{	
	int flgABChoose;				
    int wPulse;
	int stateFlag[2];				
    
} SThrDistribute;
typedef struct __ThrusterCtrlLogic
{

	SFratemodulator 		fmModulator;
	SFratemodulator 		smModulator;
	SFratemodulator 		tmModulator;
	SThrDistribute			mThrDistribute;
	
} ThrusterCtrlLogic;

/*@
 requires \valid(pIp) ;

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 64 | 128);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

*/

void ThrusterCtrlLogicFun(ThrusterCtrlLogic *pIp)

{

	if ( pIp -> fmModulator.Yp != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x04 ;
	}

	if ( pIp -> fmModulator.Yn != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x08 ;
	}

	if ( pIp -> smModulator.Yp != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x10 ;
	}

	if ( pIp -> smModulator.Yn != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x20 ;
	}

	if ( pIp -> tmModulator.Yp != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x40 ;
	}

	if ( pIp -> tmModulator.Yn != 0)
	{
		pIp -> mThrDistribute.wPulse = pIp -> mThrDistribute.wPulse | 0x80 ;
	}

	return ;
}
文件 output/test_ip/ThrusterCtrlLogicFun.c 已成功创建并写入。

SUMMARY FOR ThrusterCtrlLogicFun
========================================


函数 ThrusterCtrlLogicFun 的 VST Summary 为:
/*@
With pIp_fmModulator_u pIp_fmModulator_r pIp_fmModulator_Yp pIp_fmModulator_Yn pIp_smModulator_u pIp_smModulator_r pIp_smModulator_Yp pIp_smModulator_Yn pIp_tmModulator_u pIp_tmModulator_r pIp_tmModulator_Yp pIp_tmModulator_Yn pIp_mThrDistribute_flgABChoose pIp_mThrDistribute_wPulse pIp_mThrDistribute_stateFlag_l pIp_mThrDistribute_stateFlag_0 pIp_mThrDistribute_stateFlag_1
Require pIp->fmModulator.u == pIp_fmModulator_u && pIp->fmModulator.r == pIp_fmModulator_r && pIp->fmModulator.Yp == pIp_fmModulator_Yp && pIp->fmModulator.Yn == pIp_fmModulator_Yn && pIp->smModulator.u == pIp_smModulator_u && pIp->smModulator.r == pIp_smModulator_r && pIp->smModulator.Yp == pIp_smModulator_Yp && pIp->smModulator.Yn == pIp_smModulator_Yn && pIp->tmModulator.u == pIp_tmModulator_u && pIp->tmModulator.r == pIp_tmModulator_r && pIp->tmModulator.Yp == pIp_tmModulator_Yp && pIp->tmModulator.Yn == pIp_tmModulator_Yn && pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose && pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse && store_int_array(pIp->mThrDistribute.stateFlag,2, pIp_mThrDistribute_stateFlag_l) && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1
Ensure (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l))
*/

函数 ThrusterCtrlLogicFun 的 ACSL Summary 为:
/*@
 requires \valid(pIp) ;

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 64 | 128);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

*/


VERIFICATION FOR ThrusterCtrlLogicFun
========================================

syntax Correct
Loop Invariant:
[]

Assertion:
[]

Post Condition:
[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]

