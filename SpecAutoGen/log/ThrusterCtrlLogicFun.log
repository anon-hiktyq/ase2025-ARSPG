2025-07-05 02:30:32,589 - INFO  - 
FUNCTION INITIALIZATION
2025-07-05 02:30:32,590 - INFO  - ========================================

2025-07-05 02:30:32,626 - INFO  - 初始待处理函数: ['ThrusterCtrlLogicFun']
2025-07-05 02:30:32,626 - INFO  - 
GENERATE ANNOTATION FOR ThrusterCtrlLogicFun
2025-07-05 02:30:32,626 - INFO  - ========================================

2025-07-05 02:30:32,627 - INFO  - 函数 ThrusterCtrlLogicFun 已经初始化
2025-07-05 02:30:32,627 - INFO  - 开始生成 ThrusterCtrlLogicFun 的注释代码
2025-07-05 02:30:32,628 - INFO  - 
GENERATE FUNCTION SUMMARY FOR ThrusterCtrlLogicFun
2025-07-05 02:30:32,629 - INFO  - ========================================

2025-07-05 02:30:33,284 - INFO  - 开始生成完整的 ThrusterCtrlLogicFun 的注释代码
2025-07-05 02:30:33,294 - INFO  - 开始生成 ThrusterCtrlLogicFun 的 ACSL 规约
2025-07-05 02:30:33,437 - INFO  - 
SUMMARY FOR ThrusterCtrlLogicFun
2025-07-05 02:30:33,437 - INFO  - ========================================

2025-07-05 02:30:33,438 - INFO  - 
函数 ThrusterCtrlLogicFun 的 VST Summary 为:
/*@
With pIp_fmModulator_u pIp_fmModulator_r pIp_fmModulator_Yp pIp_fmModulator_Yn pIp_smModulator_u pIp_smModulator_r pIp_smModulator_Yp pIp_smModulator_Yn pIp_tmModulator_u pIp_tmModulator_r pIp_tmModulator_Yp pIp_tmModulator_Yn pIp_mThrDistribute_flgABChoose pIp_mThrDistribute_wPulse pIp_mThrDistribute_stateFlag_l pIp_mThrDistribute_stateFlag_0 pIp_mThrDistribute_stateFlag_1
Require pIp->fmModulator.u == pIp_fmModulator_u && pIp->fmModulator.r == pIp_fmModulator_r && pIp->fmModulator.Yp == pIp_fmModulator_Yp && pIp->fmModulator.Yn == pIp_fmModulator_Yn && pIp->smModulator.u == pIp_smModulator_u && pIp->smModulator.r == pIp_smModulator_r && pIp->smModulator.Yp == pIp_smModulator_Yp && pIp->smModulator.Yn == pIp_smModulator_Yn && pIp->tmModulator.u == pIp_tmModulator_u && pIp->tmModulator.r == pIp_tmModulator_r && pIp->tmModulator.Yp == pIp_tmModulator_Yp && pIp->tmModulator.Yn == pIp_tmModulator_Yn && pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose && pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse && store_int_array(pIp->mThrDistribute.stateFlag,2, pIp_mThrDistribute_stateFlag_l) && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1
Ensure (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn != 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 64 | 128)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp != 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32 | 64)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn != 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16 | 32)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8 | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp != 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8 | 16)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 8)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn != 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4 | 8)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp != 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == (pIp_mThrDistribute_wPulse | 4)) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l)) || (pIp_tmModulator_Yn == 0 && pIp_tmModulator_Yp == 0 && pIp_smModulator_Yn == 0 && pIp_smModulator_Yp == 0 && pIp_fmModulator_Yn == 0 && pIp_fmModulator_Yp == 0 && pIp_mThrDistribute_stateFlag_l[0] == pIp_mThrDistribute_stateFlag_0 && pIp_mThrDistribute_stateFlag_l[1] == pIp_mThrDistribute_stateFlag_1 && (pIp->fmModulator.u == pIp_fmModulator_u) * (pIp->fmModulator.r == pIp_fmModulator_r) * (pIp->fmModulator.Yp == pIp_fmModulator_Yp) * (pIp->fmModulator.Yn == pIp_fmModulator_Yn) * (pIp->smModulator.u == pIp_smModulator_u) * (pIp->smModulator.r == pIp_smModulator_r) * (pIp->smModulator.Yp == pIp_smModulator_Yp) * (pIp->smModulator.Yn == pIp_smModulator_Yn) * (pIp->tmModulator.u == pIp_tmModulator_u) * (pIp->tmModulator.r == pIp_tmModulator_r) * (pIp->tmModulator.Yp == pIp_tmModulator_Yp) * (pIp->tmModulator.Yn == pIp_tmModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l))
*/
2025-07-05 02:30:33,523 - INFO  - 
函数 ThrusterCtrlLogicFun 的 ACSL Summary 为:
/*@
 requires \valid(pIp) && \valid(pIp->mThrDistribute.stateFlag+ (0..2)) ;
 requires \separated(pIp,pIp->mThrDistribute.stateFlag+(0..2)) ;

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 64 | 128);

ensures \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 64 | 128);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32 | 64);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4);

ensures \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

*/

2025-07-05 02:30:33,715 - INFO  - 
VERIFICATION FOR ThrusterCtrlLogicFun
2025-07-05 02:30:33,715 - INFO  - ========================================

2025-07-05 02:30:37,143 - INFO  - 
GENERLIZATION FOR ThrusterCtrlLogicFun
2025-07-05 02:30:37,144 - INFO  - ========================================

2025-07-05 02:30:37,670 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 128)
2025-07-05 02:30:37,682 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 128))
2025-07-05 02:30:37,688 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 128)
2025-07-05 02:30:37,704 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 128))
2025-07-05 02:30:37,709 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 128)
2025-07-05 02:30:37,725 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 8 | 128))
2025-07-05 02:30:37,729 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 128)
2025-07-05 02:30:37,744 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 8 | 128))
2025-07-05 02:30:37,748 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 128)
2025-07-05 02:30:37,763 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 8 | 16 | 128))
2025-07-05 02:30:37,768 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 128)
2025-07-05 02:30:37,783 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 128))
2025-07-05 02:30:37,787 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 128)
2025-07-05 02:30:37,801 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 16 | 128))
2025-07-05 02:30:37,805 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 128)
2025-07-05 02:30:37,818 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 16 | 128))
2025-07-05 02:30:37,824 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32 | 128)
2025-07-05 02:30:37,840 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 16 | 32 | 128))
2025-07-05 02:30:37,846 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32 | 128)
2025-07-05 02:30:37,866 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse |
            4 |
            16 |
            32 |
            128))
2025-07-05 02:30:37,870 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32 | 128)
2025-07-05 02:30:37,890 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse |
            4 |
            8 |
            16 |
            32 |
            128))
2025-07-05 02:30:37,895 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32 | 128)
2025-07-05 02:30:37,911 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse |
            8 |
            16 |
            32 |
            128))
2025-07-05 02:30:37,915 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32 | 128)
2025-07-05 02:30:37,930 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 8 | 32 | 128))
2025-07-05 02:30:37,934 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32 | 128)
2025-07-05 02:30:37,951 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 128))
2025-07-05 02:30:37,955 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32 | 128)
2025-07-05 02:30:37,968 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 32 | 128))
2025-07-05 02:30:37,973 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32 | 128)
2025-07-05 02:30:37,987 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 32 | 128))
2025-07-05 02:30:37,992 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32 | 64 | 128)
2025-07-05 02:30:38,006 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 32 | 64 | 128))
2025-07-05 02:30:38,010 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32 | 64 | 128)
2025-07-05 02:30:38,027 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse |
            4 |
            32 |
            64 |
            128))
2025-07-05 02:30:38,031 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32 | 64 | 128)
2025-07-05 02:30:38,051 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse |
            4 |
            8 |
            32 |
            64 |
            128))
2025-07-05 02:30:38,055 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32 | 64 | 128)
2025-07-05 02:30:38,071 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse |
            8 |
            32 |
            64 |
            128))
2025-07-05 02:30:38,075 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32 | 64 | 128)
2025-07-05 02:30:38,093 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse |
            8 |
            16 |
            32 |
            64 |
            128))
2025-07-05 02:30:38,098 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32 | 64 | 128)
2025-07-05 02:30:38,122 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse |
            4 |
            8 |
            16 |
            32 |
            64 |
            128))
2025-07-05 02:30:38,126 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32 | 64 | 128)
2025-07-05 02:30:38,142 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse |
            4 |
            16 |
            32 |
            64 |
            128))
2025-07-05 02:30:38,146 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32 | 64 | 128)
2025-07-05 02:30:38,159 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse |
            16 |
            32 |
            64 |
            128))
2025-07-05 02:30:38,164 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 64 | 128)
2025-07-05 02:30:38,177 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 16 | 64 | 128))
2025-07-05 02:30:38,182 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 64 | 128)
2025-07-05 02:30:38,195 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse |
            4 |
            16 |
            64 |
            128))
2025-07-05 02:30:38,201 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 64 | 128)
2025-07-05 02:30:38,218 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse |
            4 |
            8 |
            16 |
            64 |
            128))
2025-07-05 02:30:38,223 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 64 | 128)
2025-07-05 02:30:38,237 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse |
            8 |
            16 |
            64 |
            128))
2025-07-05 02:30:38,242 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 64 | 128)
2025-07-05 02:30:38,255 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 8 | 64 | 128))
2025-07-05 02:30:38,260 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 64 | 128)
2025-07-05 02:30:38,273 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 8 | 64 | 128))
2025-07-05 02:30:38,278 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 64 | 128)
2025-07-05 02:30:38,291 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 64 | 128))
2025-07-05 02:30:38,295 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) != 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 64 | 128)
2025-07-05 02:30:38,306 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 !=
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 64 | 128))
2025-07-05 02:30:38,310 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 64)
2025-07-05 02:30:38,321 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 64))
2025-07-05 02:30:38,326 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 64)
2025-07-05 02:30:38,338 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 64))
2025-07-05 02:30:38,342 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 64)
2025-07-05 02:30:38,355 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 8 | 64))
2025-07-05 02:30:38,359 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 64)
2025-07-05 02:30:38,370 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 8 | 64))
2025-07-05 02:30:38,374 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 64)
2025-07-05 02:30:38,385 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 8 | 16 | 64))
2025-07-05 02:30:38,389 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 64)
2025-07-05 02:30:38,400 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 64))
2025-07-05 02:30:38,404 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 64)
2025-07-05 02:30:38,418 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 16 | 64))
2025-07-05 02:30:38,423 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 64)
2025-07-05 02:30:38,438 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 16 | 64))
2025-07-05 02:30:38,442 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32 | 64)
2025-07-05 02:30:38,457 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 16 | 32 | 64))
2025-07-05 02:30:38,462 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32 | 64)
2025-07-05 02:30:38,479 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 16 | 32 | 64))
2025-07-05 02:30:38,484 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32 | 64)
2025-07-05 02:30:38,504 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse |
            4 |
            8 |
            16 |
            32 |
            64))
2025-07-05 02:30:38,509 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32 | 64)
2025-07-05 02:30:38,526 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 8 | 16 | 32 | 64))
2025-07-05 02:30:38,531 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32 | 64)
2025-07-05 02:30:38,546 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 8 | 32 | 64))
2025-07-05 02:30:38,551 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32 | 64)
2025-07-05 02:30:38,567 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 8 | 32 | 64))
2025-07-05 02:30:38,572 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32 | 64)
2025-07-05 02:30:38,587 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 32 | 64))
2025-07-05 02:30:38,592 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) != 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32 | 64)
2025-07-05 02:30:38,607 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 !=
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 32 | 64))
2025-07-05 02:30:38,611 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 32)
2025-07-05 02:30:38,625 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 32))
2025-07-05 02:30:38,630 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 32)
2025-07-05 02:30:38,644 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 32))
2025-07-05 02:30:38,649 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 32)
2025-07-05 02:30:38,660 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 8 | 32))
2025-07-05 02:30:38,664 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 32)
2025-07-05 02:30:38,674 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 8 | 32))
2025-07-05 02:30:38,677 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16 | 32)
2025-07-05 02:30:38,688 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 8 | 16 | 32))
2025-07-05 02:30:38,692 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16 | 32)
2025-07-05 02:30:38,704 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 8 | 16 | 32))
2025-07-05 02:30:38,707 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16 | 32)
2025-07-05 02:30:38,718 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 16 | 32))
2025-07-05 02:30:38,721 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) != 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16 | 32)
2025-07-05 02:30:38,731 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 != old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 16 | 32))
2025-07-05 02:30:38,735 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 16)
2025-07-05 02:30:38,745 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 16))
2025-07-05 02:30:38,748 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 16)
2025-07-05 02:30:38,758 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 16))
2025-07-05 02:30:38,762 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8 | 16)
2025-07-05 02:30:38,773 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 8 | 16))
2025-07-05 02:30:38,776 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) != 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8 | 16)
2025-07-05 02:30:38,787 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 != old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 8 | 16))
2025-07-05 02:30:38,791 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 8)
2025-07-05 02:30:38,801 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 8))
2025-07-05 02:30:38,804 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) != 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4 | 8)
2025-07-05 02:30:38,815 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 != old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4 | 8))
2025-07-05 02:30:38,818 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) != 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == (\old(pIp->mThrDistribute.wPulse) | 4)
2025-07-05 02:30:38,828 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 != old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse | 4))
2025-07-05 02:30:38,831 - INFO  - Original ACSL: \old(pIp->tmModulator.Yn) == 0 && \old(pIp->tmModulator.Yp) == 0 && \old(pIp->smModulator.Yn) == 0 && \old(pIp->smModulator.Yp) == 0 && \old(pIp->fmModulator.Yn) == 0 && \old(pIp->fmModulator.Yp) == 0 && pIp->mThrDistribute.stateFlag[0] == \old(pIp->mThrDistribute.stateFlag[0]) && pIp->mThrDistribute.stateFlag[1] == \old(pIp->mThrDistribute.stateFlag[1]) ==> pIp->fmModulator.u == \old(pIp->fmModulator.u)&&pIp->fmModulator.r == \old(pIp->fmModulator.r)&&pIp->fmModulator.Yp == \old(pIp->fmModulator.Yp)&&pIp->fmModulator.Yn == \old(pIp->fmModulator.Yn)&&pIp->smModulator.u == \old(pIp->smModulator.u)&&pIp->smModulator.r == \old(pIp->smModulator.r)&&pIp->smModulator.Yp == \old(pIp->smModulator.Yp)&&pIp->smModulator.Yn == \old(pIp->smModulator.Yn)&&pIp->tmModulator.u == \old(pIp->tmModulator.u)&&pIp->tmModulator.r == \old(pIp->tmModulator.r)&&pIp->tmModulator.Yp == \old(pIp->tmModulator.Yp)&&pIp->tmModulator.Yn == \old(pIp->tmModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose)&&pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);
2025-07-05 02:30:38,842 - INFO  - Z3 Expression: Implies(And(And(And(And(And(And(And(0 ==
                                    old_pIp_tmModulator_Yn,
                                    0 ==
                                    old_pIp_tmModulator_Yp),
                                0 == old_pIp_smModulator_Yn),
                            0 == old_pIp_smModulator_Yp),
                        0 == old_pIp_fmModulator_Yn),
                    0 == old_pIp_fmModulator_Yp),
                pIp_mThrDistribute_stateFlag_0 ==
                old_pIp_mThrDistribute_stateFlag_0),
            pIp_mThrDistribute_stateFlag_1 ==
            old_pIp_mThrDistribute_stateFlag_1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(pIp_fmModulator_u ==
                                        old_pIp_fmModulator_u,
                                        pIp_fmModulator_r ==
                                        old_pIp_fmModulator_r),
                                        pIp_fmModulator_Yp ==
                                        old_pIp_fmModulator_Yp),
                                        pIp_fmModulator_Yn ==
                                        old_pIp_fmModulator_Yn),
                                        pIp_smModulator_u ==
                                        old_pIp_smModulator_u),
                                        pIp_smModulator_r ==
                                        old_pIp_smModulator_r),
                                        pIp_smModulator_Yp ==
                                        old_pIp_smModulator_Yp),
                                    pIp_smModulator_Yn ==
                                    old_pIp_smModulator_Yn),
                                pIp_tmModulator_u ==
                                old_pIp_tmModulator_u),
                            pIp_tmModulator_r ==
                            old_pIp_tmModulator_r),
                        pIp_tmModulator_Yp ==
                        old_pIp_tmModulator_Yp),
                    pIp_tmModulator_Yn ==
                    old_pIp_tmModulator_Yn),
                pIp_mThrDistribute_flgABChoose ==
                old_pIp_mThrDistribute_flgABChoose),
            pIp_mThrDistribute_wPulse ==
            old_pIp_mThrDistribute_wPulse))
2025-07-05 02:30:49,529 - INFO  - 
ThrusterCtrlLogicFun 的最大非冗余集合:
2025-07-05 02:30:49,529 - INFO  - []
