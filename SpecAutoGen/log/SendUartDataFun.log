2025-07-05 02:28:18,981 - INFO  - 
FUNCTION INITIALIZATION
2025-07-05 02:28:18,981 - INFO  - ========================================

2025-07-05 02:28:19,009 - INFO  - 初始待处理函数: ['SendUartDataFun']
2025-07-05 02:28:19,009 - INFO  - 
GENERATE ANNOTATION FOR SendUartDataFun
2025-07-05 02:28:19,009 - INFO  - ========================================

2025-07-05 02:28:19,009 - INFO  - 函数 SendUartDataFun 已经初始化
2025-07-05 02:28:19,009 - INFO  - 开始生成 SendUartDataFun 的注释代码
2025-07-05 02:28:19,011 - INFO  - 
GENERATE LOOP INVARIANT FOR SendUartDataFun
2025-07-05 02:28:19,011 - INFO  - ========================================

2025-07-05 02:28:19,354 - INFO  - Variable Maps:[{'i': '0', 'pIp': 'pIp@pre', 'pIp@pre->addr': 'pIp_addr', 'pIp@pre->len': '5'}]
2025-07-05 02:28:19,354 - INFO  - Path conditions: ['pIp_data_l[0] == pIp_data_0 && pIp_data_l[1] == pIp_data_1 && pIp_data_l[2] == pIp_data_2 && pIp_data_l[3] == pIp_data_3 && pIp_data_l[4] == pIp_data_4 && pIp_data_l[5] == pIp_data_5 && pIp_data_l[6] == pIp_data_6 && pIp_data_l[7] == pIp_data_7 && pIp_data_l[8] == pIp_data_8 && pIp_data_l[9] == pIp_data_9']
2025-07-05 02:28:19,354 - INFO  - Pre condition: pIp_data_l[0] == pIp_data_0 && pIp_data_l[1] == pIp_data_1 && pIp_data_l[2] == pIp_data_2 && pIp_data_l[3] == pIp_data_3 && pIp_data_l[4] == pIp_data_4 && pIp_data_l[5] == pIp_data_5 && pIp_data_l[6] == pIp_data_6 && pIp_data_l[7] == pIp_data_7 && pIp_data_l[8] == pIp_data_8 && pIp_data_l[9] == pIp_data_9 && (i == 0) * (pIp == pIp@pre) * (pIp@pre->addr == pIp_addr) * store_int_array(&pIp@pre->data, 10, pIp_data_l) * (pIp@pre->len == 5)
2025-07-05 02:28:19,355 - INFO  - Loop Condition: i < pIp -> len
2025-07-05 02:28:19,355 - INFO  - Array Names: ['pIp_data']
2025-07-05 02:28:19,355 - INFO  - Updated Loop Conditions: ['0 < pIp@pre -> len']
2025-07-05 02:28:19,356 - INFO  - Global Unchanged Variables: ['pIp', 'pIp@pre->addr', 'pIp@pre->len']
2025-07-05 02:28:19,357 - INFO  - Non Inductive Variables: []
2025-07-05 02:29:36,084 - INFO  - ACSL 格式的循环不变量
2025-07-05 02:29:36,085 - INFO  - /*@
          loop invariant (i > 0) ==> (pIp->addr == pIp->data[i-1]) ;
          loop invariant (0 < \at(pIp,Pre) -> len) ==> (\at(pIp,Pre)->len == 5) ;
          loop invariant (0 < \at(pIp,Pre) -> len) ==> (\at(pIp,Pre)->addr == pIp->data[i-1]) ;
          loop invariant (0 < \at(pIp,Pre) -> len) ==> (0 <= i <= \at(pIp,Pre)->len) ;
          loop invariant (!(0 < \at(pIp,Pre) -> len)) ==> ((i == 0)&&(pIp == \at(pIp,Pre))&&(\at(pIp->addr,Pre) == \at(pIp->addr,Pre))&&(\at(pIp,Pre)->len == 5));
          loop invariant pIp == \at(pIp,Pre);
            */
            for (; i < pIp -> len; i++)
	{
		pIp -> addr =  pIp -> data[i];
	}
2025-07-05 02:29:36,085 - INFO  - VST 格式的循环不变量
2025-07-05 02:29:36,086 - INFO  - /*@ Inv
    exists  pIp_data_l,    
    store_int_array(pIp->data, 10, pIp_data_l) &&
    ((i > 0) => (pIp->addr == pIp->data_l[i-1]) ) &&
((0 < pIp@pre -> len) => (pIp@pre->len == 5) ) &&
((0 < pIp@pre -> len) => (pIp@pre->addr == pIp->data_l[i-1]) ) &&
((0 < pIp@pre -> len) => (0 <= i && i <= pIp@pre->len) ) &&
((!(0 < pIp@pre -> len)) => ((i == 0)&&(pIp == pIp@pre)&&(pIp->addr@pre == pIp->addr@pre)&&(pIp@pre->len == 5))) &&
(pIp == pIp@pre)
    */
    
            for (; i < pIp -> len; i++)
	{
		pIp -> addr =  pIp -> data[i];
	}
2025-07-05 02:29:36,086 - INFO  - PARTIAL CORRECT INVARIANT
2025-07-05 02:29:36,087 - INFO  - 继续符号执行
2025-07-05 02:29:36,087 - INFO  - /*@ Inv
    exists  pIp_data_l,    
    store_int_array(pIp->data, 10, pIp_data_l) &&
    ((i > 0) => (pIp->addr == pIp->data_l[i-1]) ) &&
((0 < pIp@pre -> len) => (pIp@pre->len == 5) ) &&
((0 < pIp@pre -> len) => (pIp@pre->addr == pIp->data_l[i-1]) ) &&
((0 < pIp@pre -> len) => (0 <= i && i <= pIp@pre->len) ) &&
((!(0 < pIp@pre -> len)) => ((i == 0)&&(pIp == pIp@pre)&&(pIp->addr@pre == pIp->addr@pre)&&(pIp@pre->len == 5))) &&
(pIp == pIp@pre)
    */
    
            for (; i < pIp -> len; i++)
	{
		pIp -> addr =  pIp -> data[i];
	}
2025-07-05 02:29:51,309 - INFO  - CORRECT INVARIANT
2025-07-05 02:29:51,314 - INFO  - 
GENERATE FUNCTION SUMMARY FOR SendUartDataFun
2025-07-05 02:29:51,316 - INFO  - ========================================

2025-07-05 02:29:51,332 - INFO  - 开始生成 SendUartDataFun 的 ACSL 规约
2025-07-05 02:29:58,753 - INFO  - 
SUMMARY FOR SendUartDataFun
2025-07-05 02:29:58,753 - INFO  - ========================================

2025-07-05 02:29:58,754 - INFO  - 
函数 SendUartDataFun 的 VST Summary 为:
/*@
With pIp_addr pIp_data_l pIp_data_0 pIp_data_1 pIp_data_2 pIp_data_3 pIp_data_4 pIp_data_5 pIp_data_6 pIp_data_7 pIp_data_8 pIp_data_9 pIp_len
Require pIp->addr == pIp_addr && store_int_array(pIp->data,10, pIp_data_l) && pIp_data_l[0] == pIp_data_0 && pIp_data_l[1] == pIp_data_1 && pIp_data_l[2] == pIp_data_2 && pIp_data_l[3] == pIp_data_3 && pIp_data_l[4] == pIp_data_4 && pIp_data_l[5] == pIp_data_5 && pIp_data_l[6] == pIp_data_6 && pIp_data_l[7] == pIp_data_7 && pIp_data_l[8] == pIp_data_8 && pIp_data_l[9] == pIp_data_9 && pIp->len == pIp_len
Ensure emp
*/
2025-07-05 02:29:58,754 - INFO  - 
函数 SendUartDataFun 的 ACSL Summary 为:

2025-07-05 02:29:58,994 - INFO  - 
VERIFICATION FOR SendUartDataFun
2025-07-05 02:29:58,995 - INFO  - ========================================

2025-07-05 02:30:11,729 - INFO  - 
GENERLIZATION FOR SendUartDataFun
2025-07-05 02:30:11,729 - INFO  - ========================================

2025-07-05 02:30:12,383 - INFO  - 
SendUartDataFun 的最大非冗余集合:
2025-07-05 02:30:12,383 - INFO  - []
