2025-07-05 02:34:41,981 - INFO  - 
FUNCTION INITIALIZATION
2025-07-05 02:34:41,981 - INFO  - ========================================

2025-07-05 02:34:42,080 - INFO  - 初始待处理函数: ['LimitInt32Fun']
2025-07-05 02:34:42,081 - INFO  - 
GENERATE ANNOTATION FOR LimitInt32Fun
2025-07-05 02:34:42,081 - INFO  - ========================================

2025-07-05 02:34:42,081 - INFO  - 函数 LimitInt32Fun 已经初始化
2025-07-05 02:34:42,081 - INFO  - 开始生成 LimitInt32Fun 的注释代码
2025-07-05 02:34:42,083 - INFO  - 
GENERATE FUNCTION SUMMARY FOR LimitInt32Fun
2025-07-05 02:34:42,083 - INFO  - ========================================

2025-07-05 02:34:42,094 - INFO  - 开始生成完整的 LimitInt32Fun 的注释代码
2025-07-05 02:34:42,103 - INFO  - 开始生成 LimitInt32Fun 的 ACSL 规约
2025-07-05 02:34:42,112 - INFO  - 
SUMMARY FOR LimitInt32Fun
2025-07-05 02:34:42,112 - INFO  - ========================================

2025-07-05 02:34:42,112 - INFO  - 
函数 LimitInt32Fun 的 VST Summary 为:
/*@
With pIp_in pIp_bound pIp_value pIp_ret_v pIp_ret
Require pIp->in == pIp_in && pIp->bound == pIp_bound && pIp->value == pIp_value && *(pIp->ret) == pIp_ret_v && (pIp->ret) == pIp_ret
Ensure (pIp_in >= -pIp_bound && pIp_in <= pIp_bound && (pIp->in == pIp_in) * (pIp->bound == pIp_bound) * (pIp->value == pIp_in) * (pIp->ret == pIp_ret) * (*pIp->ret == pIp_in)) || (pIp_in < -pIp_bound && pIp_in <= pIp_bound && (pIp->in == pIp_in) * (pIp->bound == pIp_bound) * (pIp->value == -pIp_bound) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_bound)) || (pIp_in > pIp_bound && (pIp->in == pIp_in) * (pIp->bound == pIp_bound) * (pIp->value == pIp_bound) * (pIp->ret == pIp_ret) * (*pIp->ret == pIp_bound))
*/
2025-07-05 02:34:42,112 - INFO  - 
函数 LimitInt32Fun 的 ACSL Summary 为:
/*@
 requires \valid(pIp) && \valid(pIp->ret) ;
 requires \separated(pIp,pIp->ret) ;

ensures \old(pIp->in) >= -\old(pIp->bound) && \old(pIp->in) <= \old(pIp->bound) ==> pIp->in == \old(pIp->in)&&pIp->bound == \old(pIp->bound)&&pIp->value == \old(pIp->in)&&pIp->ret == \old(pIp->ret)&&*pIp->ret == \old(pIp->in);

ensures \old(pIp->in) < -\old(pIp->bound) && \old(pIp->in) <= \old(pIp->bound) ==> pIp->in == \old(pIp->in)&&pIp->bound == \old(pIp->bound)&&pIp->value == -\old(pIp->bound)&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -\old(pIp->bound);

ensures \old(pIp->in) > \old(pIp->bound) ==> pIp->in == \old(pIp->in)&&pIp->bound == \old(pIp->bound)&&pIp->value == \old(pIp->bound)&&pIp->ret == \old(pIp->ret)&&*pIp->ret == \old(pIp->bound);

*/

2025-07-05 02:34:42,319 - INFO  - 
VERIFICATION FOR LimitInt32Fun
2025-07-05 02:34:42,319 - INFO  - ========================================

2025-07-05 02:34:43,762 - INFO  - 
GENERLIZATION FOR LimitInt32Fun
2025-07-05 02:34:43,762 - INFO  - ========================================

2025-07-05 02:34:43,811 - INFO  - Original ACSL: \old(pIp->in) >= -\old(pIp->bound) && \old(pIp->in) <= \old(pIp->bound) ==> pIp->in == \old(pIp->in)&&pIp->bound == \old(pIp->bound)&&pIp->value == \old(pIp->in)&&pIp->ret == \old(pIp->ret)&&*pIp->ret == \old(pIp->in)
2025-07-05 02:34:43,814 - INFO  - Z3 Expression: Implies(And(old_pIp_in >= 0 - old_pIp_bound,
            old_pIp_in <= old_pIp_bound),
        And(And(And(And(pIp_in == old_pIp_in,
                        pIp_bound == old_pIp_bound),
                    pIp_value == old_pIp_in),
                pIp_ret == old_pIp_ret),
            pIp_ret_v == old_pIp_in))
2025-07-05 02:34:43,816 - INFO  - Original ACSL: \old(pIp->in) < -\old(pIp->bound) && \old(pIp->in) <= \old(pIp->bound) ==> pIp->in == \old(pIp->in)&&pIp->bound == \old(pIp->bound)&&pIp->value == -\old(pIp->bound)&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -\old(pIp->bound)
2025-07-05 02:34:43,819 - INFO  - Z3 Expression: Implies(And(old_pIp_in < 0 - old_pIp_bound,
            old_pIp_in <= old_pIp_bound),
        And(And(And(And(pIp_in == old_pIp_in,
                        pIp_bound == old_pIp_bound),
                    pIp_value == 0 - old_pIp_bound),
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - old_pIp_bound))
2025-07-05 02:34:43,820 - INFO  - Original ACSL: \old(pIp->in) > \old(pIp->bound) ==> pIp->in == \old(pIp->in)&&pIp->bound == \old(pIp->bound)&&pIp->value == \old(pIp->bound)&&pIp->ret == \old(pIp->ret)&&*pIp->ret == \old(pIp->bound);
2025-07-05 02:34:43,823 - INFO  - Z3 Expression: Implies(old_pIp_in > old_pIp_bound,
        And(And(And(And(pIp_in == old_pIp_in,
                        pIp_bound == old_pIp_bound),
                    pIp_value == old_pIp_bound),
                pIp_ret == old_pIp_ret),
            pIp_ret_v == old_pIp_bound))
2025-07-05 02:34:44,575 - INFO  - 
LimitInt32Fun 的最大非冗余集合:
2025-07-05 02:34:44,576 - INFO  - [pIp_in == old_pIp_in, pIp_ret == old_pIp_ret, pIp_bound == old_pIp_bound]
