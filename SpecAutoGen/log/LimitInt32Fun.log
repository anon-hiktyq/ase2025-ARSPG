
FUNCTION INITIALIZATION
========================================

type_name:__LimitInt32
初始待处理函数: ['LimitInt32Fun']

GENERATE ANNOTATION FOR LimitInt32Fun
========================================

函数 LimitInt32Fun 已经初始化
开始生成 LimitInt32Fun 的注释代码
文件 3_output/test_ip/LimitInt32Fun.c 已成功创建并写入。
文件 1_output/test_ip/LimitInt32Fun.c 已成功创建并写入。
文件 2_output/test_ip/LimitInt32Fun.c 已成功创建并写入。

GENERATE FUNCTION SUMMARY FOR LimitInt32Fun
========================================

----------------------------------------
路径约束与返回值
Combined path condition:
(pIp_in >= -pIp_bound && pIp_in <= pIp_bound && (pIp->in == pIp_in) * (pIp->bound == pIp_bound) * (pIp->value == pIp_in) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_in)) || (pIp_in < -pIp_bound && pIp_in <= pIp_bound && (pIp->in == pIp_in) * (pIp->bound == pIp_bound) * (pIp->value == -pIp_bound) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_bound)) || (pIp_in > pIp_bound && (pIp->in == pIp_in) * (pIp->bound == pIp_bound) * (pIp->value == pIp_bound) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_bound))
----------------------------------------

开始生成完整的 LimitInt32Fun 的注释代码
文件 2_output/test_ip/LimitInt32Fun.c 已成功创建并写入。
开始生成 LimitInt32Fun 的 ACSL 规约
Variable Map: {'pIp->in': 'pIp_in', 'pIp->bound': 'pIp_bound', 'pIp->value': 'pIp_in', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_in'}
Path Condition: pIp_in >= -pIp_bound && pIp_in <= pIp_bound 
Result: None
Variable Map: {'pIp->in': 'pIp_in', 'pIp->bound': 'pIp_bound', 'pIp->value': '-pIp_bound', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_bound'}
Path Condition: pIp_in < -pIp_bound && pIp_in <= pIp_bound 
Result: None
Variable Map: {'pIp->in': 'pIp_in', 'pIp->bound': 'pIp_bound', 'pIp->value': 'pIp_bound', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_bound'}
Path Condition: pIp_in > pIp_bound 
Result: None
文件 output/test_ip/LimitInt32Fun.c 已成功创建并写入。

SUMMARY FOR LimitInt32Fun
========================================


函数 LimitInt32Fun 的 VST Summary 为:
/*@
With pIp_in pIp_bound pIp_value pIp_ret_v pIp_ret
Require pIp->in == pIp_in && pIp->bound == pIp_bound && pIp->value == pIp_value && *(pIp->ret) == pIp_ret_v && (pIp->ret) == pIp_ret
Ensure (pIp_in >= -pIp_bound && pIp_in <= pIp_bound && (pIp->in == pIp_in) * (pIp->bound == pIp_bound) * (pIp->value == pIp_in) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_in)) || (pIp_in < -pIp_bound && pIp_in <= pIp_bound && (pIp->in == pIp_in) * (pIp->bound == pIp_bound) * (pIp->value == -pIp_bound) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_bound)) || (pIp_in > pIp_bound && (pIp->in == pIp_in) * (pIp->bound == pIp_bound) * (pIp->value == pIp_bound) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_bound))
*/

函数 LimitInt32Fun 的 ACSL Summary 为:
/*@
 requires \valid(pIp) && \valid(pIp->ret) ;
 requires \separated(pIp,pIp->ret) ;

ensures \old(pIp->in) >= -\old(pIp->bound) && \old(pIp->in) <= \old(pIp->bound) ==> pIp->in == \old(pIp->in)&&pIp->bound == \old(pIp->bound)&&pIp->value == \old(pIp->in)&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == \old(pIp->in);

ensures \old(pIp->in) < -\old(pIp->bound) && \old(pIp->in) <= \old(pIp->bound) ==> pIp->in == \old(pIp->in)&&pIp->bound == \old(pIp->bound)&&pIp->value == -\old(pIp->bound)&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -\old(pIp->bound);

ensures \old(pIp->in) > \old(pIp->bound) ==> pIp->in == \old(pIp->in)&&pIp->bound == \old(pIp->bound)&&pIp->value == \old(pIp->bound)&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == \old(pIp->bound);

*/


VERIFICATION FOR LimitInt32Fun
========================================

syntax Correct
Loop Invariant:
[]

Assertion:
[]

Post Condition:
[True, True, True]


GENERLIZATION FOR LimitInt32Fun
========================================

Z3 Expression: Implies(And(old_pIp_in >= 0 - old_pIp_bound,
            old_pIp_in <= old_pIp_bound),
        And(And(And(And(pIp_in == old_pIp_in,
                        pIp_bound == old_pIp_bound),
                    pIp_value == old_pIp_in),
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == old_pIp_in))
Z3 Expression: Implies(And(old_pIp_in < 0 - old_pIp_bound,
            old_pIp_in <= old_pIp_bound),
        And(And(And(And(pIp_in == old_pIp_in,
                        pIp_bound == old_pIp_bound),
                    pIp_value == 0 - old_pIp_bound),
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - old_pIp_bound))
Z3 Expression: Implies(old_pIp_in > old_pIp_bound,
        And(And(And(And(pIp_in == old_pIp_in,
                        pIp_bound == old_pIp_bound),
                    pIp_value == old_pIp_bound),
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == old_pIp_bound))

LimitInt32Fun 的最大非冗余集合:
[pIp_ret == old_pIp_ret, pIp_bound == old_pIp_bound, pIp_in == old_pIp_in, pIp_value == old_pIp_ret_v]
