
FUNCTION INITIALIZATION
========================================

type_name:__TripleAbsMax
初始待处理函数: ['TripleAbsMaxFun']

GENERATE ANNOTATION FOR TripleAbsMaxFun
========================================

函数 TripleAbsMaxFun 已经初始化
开始生成 TripleAbsMaxFun 的注释代码
文件 3_output/test_ip/TripleAbsMaxFun.c 已成功创建并写入。
文件 1_output/test_ip/TripleAbsMaxFun.c 已成功创建并写入。
文件 2_output/test_ip/TripleAbsMaxFun.c 已成功创建并写入。

GENERATE FUNCTION SUMMARY FOR TripleAbsMaxFun
========================================

----------------------------------------
路径约束与返回值
Combined path condition:
(-pIp_abs_l[2] <= pIp_abs_l[1] && pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[1])) || (-pIp_abs_l[2] <= pIp_abs_l[1] && -pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[1])) || (-pIp_abs_l[2] <= -pIp_abs_l[1] && -pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[1])) || (-pIp_abs_l[2] <= -pIp_abs_l[1] && pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[1])) || (pIp_abs_l[2] <= -pIp_abs_l[1] && pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[1])) || (pIp_abs_l[2] <= -pIp_abs_l[1] && -pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[1])) || (pIp_abs_l[2] <= pIp_abs_l[1] && -pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[1])) || (pIp_abs_l[2] <= pIp_abs_l[1] && pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[1])) || (-pIp_abs_l[2] <= pIp_abs_l[0] && pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[0])) || (-pIp_abs_l[2] <= -pIp_abs_l[0] && -pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[0])) || (-pIp_abs_l[2] <= -pIp_abs_l[0] && -pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[0])) || (-pIp_abs_l[2] <= pIp_abs_l[0] && pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[0])) || (pIp_abs_l[2] <= pIp_abs_l[0] && pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[0])) || (pIp_abs_l[2] <= -pIp_abs_l[0] && -pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[0])) || (pIp_abs_l[2] <= -pIp_abs_l[0] && -pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[0])) || (pIp_abs_l[2] <= pIp_abs_l[0] && pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[0])) || (pIp_abs_l[2] > pIp_abs_l[0] && pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (pIp_abs_l[2] > -pIp_abs_l[0] && -pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (pIp_abs_l[2] > -pIp_abs_l[0] && -pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (pIp_abs_l[2] > pIp_abs_l[0] && pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (-pIp_abs_l[2] > pIp_abs_l[0] && pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2])) || (-pIp_abs_l[2] > -pIp_abs_l[0] && -pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2])) || (-pIp_abs_l[2] > -pIp_abs_l[0] && -pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2])) || (-pIp_abs_l[2] > pIp_abs_l[0] && pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2])) || (pIp_abs_l[2] > pIp_abs_l[1] && pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (pIp_abs_l[2] > pIp_abs_l[1] && -pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (pIp_abs_l[2] > -pIp_abs_l[1] && -pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (pIp_abs_l[2] > -pIp_abs_l[1] && pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (-pIp_abs_l[2] > -pIp_abs_l[1] && pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2])) || (-pIp_abs_l[2] > -pIp_abs_l[1] && -pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2])) || (-pIp_abs_l[2] > pIp_abs_l[1] && -pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2])) || (-pIp_abs_l[2] > pIp_abs_l[1] && pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2]))
----------------------------------------

开始生成完整的 TripleAbsMaxFun 的注释代码
文件 2_output/test_ip/TripleAbsMaxFun.c 已成功创建并写入。
开始生成 TripleAbsMaxFun 的 ACSL 规约
Variable Map: {'pIp->tmax': 'pIp_abs_l[1]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[1]'}
Path Condition: -pIp_abs_l[2] <= pIp_abs_l[1] && pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[1]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[1]'}
Path Condition: -pIp_abs_l[2] <= pIp_abs_l[1] && -pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[1]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[1]'}
Path Condition: -pIp_abs_l[2] <= -pIp_abs_l[1] && -pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[1]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[1]'}
Path Condition: -pIp_abs_l[2] <= -pIp_abs_l[1] && pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[1]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[1]'}
Path Condition: pIp_abs_l[2] <= -pIp_abs_l[1] && pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[1]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[1]'}
Path Condition: pIp_abs_l[2] <= -pIp_abs_l[1] && -pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[1]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[1]'}
Path Condition: pIp_abs_l[2] <= pIp_abs_l[1] && -pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[1]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[1]'}
Path Condition: pIp_abs_l[2] <= pIp_abs_l[1] && pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[0]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[0]'}
Path Condition: -pIp_abs_l[2] <= pIp_abs_l[0] && pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[0]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[0]'}
Path Condition: -pIp_abs_l[2] <= -pIp_abs_l[0] && -pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[0]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[0]'}
Path Condition: -pIp_abs_l[2] <= -pIp_abs_l[0] && -pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[0]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[0]'}
Path Condition: -pIp_abs_l[2] <= pIp_abs_l[0] && pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[0]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[0]'}
Path Condition: pIp_abs_l[2] <= pIp_abs_l[0] && pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[0]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[0]'}
Path Condition: pIp_abs_l[2] <= -pIp_abs_l[0] && -pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[0]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[0]'}
Path Condition: pIp_abs_l[2] <= -pIp_abs_l[0] && -pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[0]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[0]'}
Path Condition: pIp_abs_l[2] <= pIp_abs_l[0] && pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[2]'}
Path Condition: pIp_abs_l[2] > pIp_abs_l[0] && pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[2]'}
Path Condition: pIp_abs_l[2] > -pIp_abs_l[0] && -pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[2]'}
Path Condition: pIp_abs_l[2] > -pIp_abs_l[0] && -pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[2]'}
Path Condition: pIp_abs_l[2] > pIp_abs_l[0] && pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[2]'}
Path Condition: -pIp_abs_l[2] > pIp_abs_l[0] && pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[2]'}
Path Condition: -pIp_abs_l[2] > -pIp_abs_l[0] && -pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[2]'}
Path Condition: -pIp_abs_l[2] > -pIp_abs_l[0] && -pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[2]'}
Path Condition: -pIp_abs_l[2] > pIp_abs_l[0] && pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[2]'}
Path Condition: pIp_abs_l[2] > pIp_abs_l[1] && pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[2]'}
Path Condition: pIp_abs_l[2] > pIp_abs_l[1] && -pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[2]'}
Path Condition: pIp_abs_l[2] > -pIp_abs_l[1] && -pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': 'pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': 'pIp_abs_l[2]'}
Path Condition: pIp_abs_l[2] > -pIp_abs_l[1] && pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[2]'}
Path Condition: -pIp_abs_l[2] > -pIp_abs_l[1] && pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[2]'}
Path Condition: -pIp_abs_l[2] > -pIp_abs_l[1] && -pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[2]'}
Path Condition: -pIp_abs_l[2] > pIp_abs_l[1] && -pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
Variable Map: {'pIp->tmax': '-pIp_abs_l[2]', 'pIp->ret': 'pIp_ret', '*pIp_ret': '-pIp_abs_l[2]'}
Path Condition: -pIp_abs_l[2] > pIp_abs_l[1] && pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 
Result: None
文件 output/test_ip/TripleAbsMaxFun.c 已成功创建并写入。

SUMMARY FOR TripleAbsMaxFun
========================================


函数 TripleAbsMaxFun 的 VST Summary 为:
/*@
With pIp_abs_l pIp_abs_0 pIp_abs_1 pIp_abs_2 pIp_tmax pIp_ret_v pIp_ret
Require store_int_array(pIp->abs,3, pIp_abs_l) && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && pIp->tmax == pIp_tmax && *(pIp->ret) == pIp_ret_v && (pIp->ret) == pIp_ret
Ensure (-pIp_abs_l[2] <= pIp_abs_l[1] && pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[1])) || (-pIp_abs_l[2] <= pIp_abs_l[1] && -pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[1])) || (-pIp_abs_l[2] <= -pIp_abs_l[1] && -pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[1])) || (-pIp_abs_l[2] <= -pIp_abs_l[1] && pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[1])) || (pIp_abs_l[2] <= -pIp_abs_l[1] && pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[1])) || (pIp_abs_l[2] <= -pIp_abs_l[1] && -pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[1])) || (pIp_abs_l[2] <= pIp_abs_l[1] && -pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[1])) || (pIp_abs_l[2] <= pIp_abs_l[1] && pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[1]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[1])) || (-pIp_abs_l[2] <= pIp_abs_l[0] && pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[0])) || (-pIp_abs_l[2] <= -pIp_abs_l[0] && -pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[0])) || (-pIp_abs_l[2] <= -pIp_abs_l[0] && -pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[0])) || (-pIp_abs_l[2] <= pIp_abs_l[0] && pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[0])) || (pIp_abs_l[2] <= pIp_abs_l[0] && pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[0])) || (pIp_abs_l[2] <= -pIp_abs_l[0] && -pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[0])) || (pIp_abs_l[2] <= -pIp_abs_l[0] && -pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[0])) || (pIp_abs_l[2] <= pIp_abs_l[0] && pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[0]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[0])) || (pIp_abs_l[2] > pIp_abs_l[0] && pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (pIp_abs_l[2] > -pIp_abs_l[0] && -pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (pIp_abs_l[2] > -pIp_abs_l[0] && -pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (pIp_abs_l[2] > pIp_abs_l[0] && pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (-pIp_abs_l[2] > pIp_abs_l[0] && pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2])) || (-pIp_abs_l[2] > -pIp_abs_l[0] && -pIp_abs_l[0] > -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2])) || (-pIp_abs_l[2] > -pIp_abs_l[0] && -pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2])) || (-pIp_abs_l[2] > pIp_abs_l[0] && pIp_abs_l[0] > pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2])) || (pIp_abs_l[2] > pIp_abs_l[1] && pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (pIp_abs_l[2] > pIp_abs_l[1] && -pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (pIp_abs_l[2] > -pIp_abs_l[1] && -pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (pIp_abs_l[2] > -pIp_abs_l[1] && pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] >= 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == pIp_abs_l[2])) || (-pIp_abs_l[2] > -pIp_abs_l[1] && pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2])) || (-pIp_abs_l[2] > -pIp_abs_l[1] && -pIp_abs_l[0] <= -pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] < 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2])) || (-pIp_abs_l[2] > pIp_abs_l[1] && -pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] < 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2])) || (-pIp_abs_l[2] > pIp_abs_l[1] && pIp_abs_l[0] <= pIp_abs_l[1] && pIp_abs_l[2] < 0 && pIp_abs_l[1] >= 0 && pIp_abs_l[0] >= 0 && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && store_int_array(&pIp->abs, 3, pIp_abs_l) * (pIp->tmax == -pIp_abs_l[2]) * (pIp->ret == pIp_ret) * (*pIp_ret == -pIp_abs_l[2]))
*/

函数 TripleAbsMaxFun 的 ACSL Summary 为:
/*@
 requires \valid(pIp) && \valid(pIp->ret) ;
 requires \separated(pIp,pIp->ret) ;

ensures -pIp->abs[2] <= pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures -pIp->abs[2] <= pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures -pIp->abs[2] <= -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures -pIp->abs[2] <= -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures pIp->abs[2] <= -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures pIp->abs[2] <= -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures pIp->abs[2] <= pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures pIp->abs[2] <= pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures -pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures -pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures -pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures -pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures pIp->abs[2] > pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

*/


VERIFICATION FOR TripleAbsMaxFun
========================================

syntax Correct
Loop Invariant:
[]

Assertion:
[]

Post Condition:
[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]


GENERLIZATION FOR TripleAbsMaxFun
========================================

Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 <=
                                    pIp_abs_1,
                                    pIp_abs_0 <= pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_1,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_1))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 <=
                                    pIp_abs_1,
                                    0 - pIp_abs_0 <=
                                    pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_1,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_1))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 <=
                                    0 - pIp_abs_1,
                                    0 - pIp_abs_0 <=
                                    0 - pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_1,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_1))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 <=
                                    0 - pIp_abs_1,
                                    pIp_abs_0 <=
                                    0 - pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_1,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_1))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 <=
                                    0 - pIp_abs_1,
                                    pIp_abs_0 <=
                                    0 - pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_1,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_1))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 <=
                                    0 - pIp_abs_1,
                                    0 - pIp_abs_0 <=
                                    0 - pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_1,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_1))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 <= pIp_abs_1,
                                    0 - pIp_abs_0 <=
                                    pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_1,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_1))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 <= pIp_abs_1,
                                    pIp_abs_0 <= pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_1,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_1))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 <=
                                    pIp_abs_0,
                                    pIp_abs_0 > pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_0,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_0))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 <=
                                    0 - pIp_abs_0,
                                    0 - pIp_abs_0 >
                                    pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_0,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_0))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 <=
                                    0 - pIp_abs_0,
                                    0 - pIp_abs_0 >
                                    0 - pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_0,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_0))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 <=
                                    pIp_abs_0,
                                    pIp_abs_0 >
                                    0 - pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_0,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_0))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 <= pIp_abs_0,
                                    pIp_abs_0 >
                                    0 - pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_0,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_0))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 <=
                                    0 - pIp_abs_0,
                                    0 - pIp_abs_0 >
                                    0 - pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_0,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_0))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 <=
                                    0 - pIp_abs_0,
                                    0 - pIp_abs_0 >
                                    pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_0,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_0))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 <= pIp_abs_0,
                                    pIp_abs_0 > pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_0,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_0))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 > pIp_abs_0,
                                    pIp_abs_0 > pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 >
                                    0 - pIp_abs_0,
                                    0 - pIp_abs_0 >
                                    pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 >
                                    0 - pIp_abs_0,
                                    0 - pIp_abs_0 >
                                    0 - pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 > pIp_abs_0,
                                    pIp_abs_0 >
                                    0 - pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 >
                                    pIp_abs_0,
                                    pIp_abs_0 >
                                    0 - pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 >
                                    0 - pIp_abs_0,
                                    0 - pIp_abs_0 >
                                    0 - pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 >
                                    0 - pIp_abs_0,
                                    0 - pIp_abs_0 >
                                    pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 >
                                    pIp_abs_0,
                                    pIp_abs_0 > pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 > pIp_abs_1,
                                    pIp_abs_0 <= pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 > pIp_abs_1,
                                    0 - pIp_abs_0 <=
                                    pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 >
                                    0 - pIp_abs_1,
                                    0 - pIp_abs_0 <=
                                    0 - pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(pIp_abs_2 >
                                    0 - pIp_abs_1,
                                    pIp_abs_0 <=
                                    0 - pIp_abs_1),
                                pIp_abs_2 >= 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 >
                                    0 - pIp_abs_1,
                                    pIp_abs_0 <=
                                    0 - pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 >
                                    0 - pIp_abs_1,
                                    0 - pIp_abs_0 <=
                                    0 - pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 < 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 >
                                    pIp_abs_1,
                                    0 - pIp_abs_0 <=
                                    pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 < 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_2))
Z3 Expression: Implies(And(And(And(And(And(And(And(0 - pIp_abs_2 >
                                    pIp_abs_1,
                                    pIp_abs_0 <= pIp_abs_1),
                                pIp_abs_2 < 0),
                            pIp_abs_1 >= 0),
                        pIp_abs_0 >= 0),
                    pIp_abs_0 == old_pIp_abs_0),
                pIp_abs_1 == old_pIp_abs_1),
            pIp_abs_2 == old_pIp_abs_2),
        And(And(pIp_tmax == 0 - pIp_abs_2,
                pIp_ret == old_pIp_ret),
            old_pIp_ret_v == 0 - pIp_abs_2))

TripleAbsMaxFun 的最大非冗余集合:
[]
