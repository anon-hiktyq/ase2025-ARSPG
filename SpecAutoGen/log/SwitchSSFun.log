FUNCTION INITIALIZATION
========================================

type_name:__SwitchSS
type_name:TAG_DSS_DATA
初始待处理函数: ['SwitchSSFun']

GENERATE ANNOTATION FOR SwitchSSFun
========================================

函数 SwitchSSFun 已经初始化
开始生成 SwitchSSFun 的注释代码
ACSL SwitchSSFun.c文件的内容为: 

typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
}SDSSData;


typedef struct __SwitchSS
{
	SDSSData			mDSSData;
} SwitchSS;


void SwitchSSFun(SwitchSS *pIp)
{

    if (pIp -> mDSSData.stateFlag_A == 1)
    {

        pIp -> mDSSData.stateFlag_A == 0
		
    }
    else
    {
        pIp -> mDSSData.stateFlag_A == 1
    }

    return ;
}
文件 3_output/test_ip/SwitchSSFun.c 已成功创建并写入。
预注释SwitchSSFun.c文件的内容为: 

#include "../verification_stdlib.h"
#include "../verification_list.h"
#include "../int_array_def.h"

/*@ Extern Coq (Result: Assertion) */
/*@ Extern Coq (Results: Z -> Assertion) */

    typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
}SDSSData;
typedef struct __SwitchSS
{
	SDSSData			mDSSData;
} SwitchSS;

void SwitchSSFun(SwitchSS *pIp)

/*@
With pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP
Require pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP
Ensure emp
*/{

    if (pIp -> mDSSData.stateFlag_A == 1)
    {

        pIp -> mDSSData.stateFlag_A == 0
		
    }
    else
    {
        pIp -> mDSSData.stateFlag_A == 1
    }

    return ;
}
文件 1_output/test_ip/SwitchSSFun.c 已成功创建并写入。
文件 2_output/test_ip/SwitchSSFun.c 已成功创建并写入。

GENERATE FUNCTION SUMMARY FOR SwitchSSFun
========================================

开始生成 SwitchSSFun 的 ACSL 规约
文件 output/test_ip/SwitchSSFun.c 已成功创建并写入。
SwitchSSFun.c 的规约的内容为
typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
} SDSSData;

typedef struct __SwitchSS
{
	SDSSData mDSSData;
} SwitchSS;

/*@
    requires \valid(pIp);
    ensures pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A) ? 0 : 1;
*/
void SwitchSSFun(SwitchSS *pIp)
{
    if (pIp->mDSSData.stateFlag_A == 1)
    {
        pIp->mDSSData.stateFlag_A = 0;
    }
    else
    {
        pIp->mDSSData.stateFlag_A = 1;
    }

    return;
}


SUMMARY FOR SwitchSSFun
========================================


函数 SwitchSSFun 的 VST Summary 为:
/*@
With pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP
Require pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP
Ensure emp
*/

函数 SwitchSSFun 的 ACSL Summary 为:


VERIFICATION FOR SwitchSSFun
========================================

syntax Correct
Loop Invariant:
[]

Assertion:
[]

Post Condition:
[True]


FUNCTION INITIALIZATION
========================================

type_name:__SwitchSS
type_name:TAG_DSS_DATA
初始待处理函数: ['SwitchSSFun']

GENERATE ANNOTATION FOR SwitchSSFun
========================================

函数 SwitchSSFun 已经初始化
开始生成 SwitchSSFun 的注释代码
ACSL SwitchSSFun.c文件的内容为: 

typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
}SDSSData;


typedef struct __SwitchSS
{
	SDSSData			mDSSData;
} SwitchSS;


void SwitchSSFun(SwitchSS *pIp)
{

    if (pIp -> mDSSData.stateFlag_A == 1)
    {

        pIp -> mDSSData.stateFlag_A == 0;
		
    }
    else
    {
        pIp -> mDSSData.stateFlag_A == 1;
    }

    return;
}
文件 3_output/test_ip/SwitchSSFun.c 已成功创建并写入。
预注释SwitchSSFun.c文件的内容为: 

#include "../verification_stdlib.h"
#include "../verification_list.h"
#include "../int_array_def.h"

/*@ Extern Coq (Result: Assertion) */
/*@ Extern Coq (Results: Z -> Assertion) */

    typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
}SDSSData;
typedef struct __SwitchSS
{
	SDSSData			mDSSData;
} SwitchSS;

void SwitchSSFun(SwitchSS *pIp)

/*@
With pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP
Require pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP
Ensure emp
*/{

    if (pIp -> mDSSData.stateFlag_A == 1)
    {

        pIp -> mDSSData.stateFlag_A == 0;
		
    }
    else
    {
        pIp -> mDSSData.stateFlag_A == 1;
    }

    return;
}
文件 1_output/test_ip/SwitchSSFun.c 已成功创建并写入。
文件 2_output/test_ip/SwitchSSFun.c 已成功创建并写入。

GENERATE FUNCTION SUMMARY FOR SwitchSSFun
========================================

----------------------------------------
路径约束与返回值
Combined path condition:
(pIp_mDSSData_stateFlag_A != 0 && pIp_mDSSData_stateFlag_A == 1 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP)) || (pIp_mDSSData_stateFlag_A != 1 && pIp_mDSSData_stateFlag_A != 1 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP))
----------------------------------------

开始生成完整的 SwitchSSFun 的注释代码
完整注释SwitchSSFun.c 文件的内容为: 

#include "../verification_stdlib.h"
#include "../verification_list.h"
#include "../int_array_def.h"

/*@ Extern Coq (Result: Assertion) */
/*@ Extern Coq (Results: Z -> Assertion) */

    typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
}SDSSData;
typedef struct __SwitchSS
{
	SDSSData			mDSSData;
} SwitchSS;

void SwitchSSFun(SwitchSS *pIp)

/*@
With pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP
Require pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP
Ensure (pIp_mDSSData_stateFlag_A != 0 && pIp_mDSSData_stateFlag_A == 1 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP)) || (pIp_mDSSData_stateFlag_A != 1 && pIp_mDSSData_stateFlag_A != 1 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP))
*/
{

    if (pIp -> mDSSData.stateFlag_A == 1)
    {

        pIp -> mDSSData.stateFlag_A == 0;
		
    }
    else
    {
        pIp -> mDSSData.stateFlag_A == 1;
    }

    return;
}
文件 2_output/test_ip/SwitchSSFun.c 已成功创建并写入。
开始生成 SwitchSSFun 的 ACSL 规约
Variable Map: {'pIp->mDSSData.stateFlag_A': 'pIp_mDSSData_stateFlag_A', 'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP'}
Path Condition: pIp_mDSSData_stateFlag_A != 0 && pIp_mDSSData_stateFlag_A == 1 
Result: None
Variable Map: {'pIp->mDSSData.stateFlag_A': 'pIp_mDSSData_stateFlag_A', 'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP'}
Path Condition: pIp_mDSSData_stateFlag_A != 1 && pIp_mDSSData_stateFlag_A != 1 
Result: None
SwitchSSFun.c 的规约的内容为: 
typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
}SDSSData;
typedef struct __SwitchSS
{
	SDSSData			mDSSData;
} SwitchSS;

/*@
 requires \valid(pIp) ;
 requires \separated(pIp) ;

ensures \old(pIp->mDSSData.stateFlag_A) != 0 && \old(pIp->mDSSData.stateFlag_A) == 1 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP);

ensures \old(pIp->mDSSData.stateFlag_A) != 1 && \old(pIp->mDSSData.stateFlag_A) != 1 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP);

*/

void SwitchSSFun(SwitchSS *pIp)

{

    if (pIp -> mDSSData.stateFlag_A == 1)
    {

        pIp -> mDSSData.stateFlag_A == 0;
		
    }
    else
    {
        pIp -> mDSSData.stateFlag_A == 1;
    }

    return;
}
文件 output/test_ip/SwitchSSFun.c 已成功创建并写入。

SUMMARY FOR SwitchSSFun
========================================


函数 SwitchSSFun 的 VST Summary 为:
/*@
With pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP
Require pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP
Ensure (pIp_mDSSData_stateFlag_A != 0 && pIp_mDSSData_stateFlag_A == 1 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP)) || (pIp_mDSSData_stateFlag_A != 1 && pIp_mDSSData_stateFlag_A != 1 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP))
*/

函数 SwitchSSFun 的 ACSL Summary 为:
/*@
 requires \valid(pIp) ;
 requires \separated(pIp) ;

ensures \old(pIp->mDSSData.stateFlag_A) != 0 && \old(pIp->mDSSData.stateFlag_A) == 1 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP);

ensures \old(pIp->mDSSData.stateFlag_A) != 1 && \old(pIp->mDSSData.stateFlag_A) != 1 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP);

*/


VERIFICATION FOR SwitchSSFun
========================================

syntax Correct
Loop Invariant:
[]

Assertion:
[]

Post Condition:
[True, True]

