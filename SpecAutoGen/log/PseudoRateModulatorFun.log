2025-07-05 02:35:05,675 - INFO  - 
FUNCTION INITIALIZATION
2025-07-05 02:35:05,675 - INFO  - ========================================

2025-07-05 02:35:05,791 - INFO  - 初始待处理函数: ['PseudoRateModulatorFun']
2025-07-05 02:35:05,791 - INFO  - 
GENERATE ANNOTATION FOR PseudoRateModulatorFun
2025-07-05 02:35:05,791 - INFO  - ========================================

2025-07-05 02:35:05,791 - INFO  - 函数 PseudoRateModulatorFun 已经初始化
2025-07-05 02:35:05,791 - INFO  - 开始生成 PseudoRateModulatorFun 的注释代码
2025-07-05 02:35:05,793 - INFO  - 
GENERATE FUNCTION SUMMARY FOR PseudoRateModulatorFun
2025-07-05 02:35:05,793 - INFO  - ========================================

2025-07-05 02:35:05,814 - INFO  - 开始生成完整的 PseudoRateModulatorFun 的注释代码
2025-07-05 02:35:05,824 - INFO  - 开始生成 PseudoRateModulatorFun 的 ACSL 规约
2025-07-05 02:35:05,835 - INFO  - 
SUMMARY FOR PseudoRateModulatorFun
2025-07-05 02:35:05,836 - INFO  - ========================================

2025-07-05 02:35:05,836 - INFO  - 
函数 PseudoRateModulatorFun 的 VST Summary 为:
/*@
With pIp_h1 pIp_pModulator_u pIp_pModulator_r pIp_pModulator_Yp pIp_pModulator_Yn
Require pIp->h1 == pIp_h1 && pIp->pModulator->u == pIp_pModulator_u && pIp->pModulator->r == pIp_pModulator_r && pIp->pModulator->Yp == pIp_pModulator_Yp && pIp->pModulator->Yn == pIp_pModulator_Yn
Ensure (pIp_pModulator_u - pIp_pModulator_r > pIp_h1 && (pIp->h1 == pIp_h1) * (pIp->pModulator->u == pIp_pModulator_u) * (pIp->pModulator->r == 0 * pIp_pModulator_r + 15) * (pIp->pModulator->Yp == 0) * (pIp->pModulator->Yn == 15)) || (pIp_pModulator_u - pIp_pModulator_r < -pIp_h1 && pIp_pModulator_u - pIp_pModulator_r <= pIp_h1 && (pIp->h1 == pIp_h1) * (pIp->pModulator->u == pIp_pModulator_u) * (pIp->pModulator->r == 15 * pIp_pModulator_r - 15) * (pIp->pModulator->Yp == 15) * (pIp->pModulator->Yn == 0)) || (pIp_pModulator_u - pIp_pModulator_r >= -pIp_h1 && pIp_pModulator_u - pIp_pModulator_r <= pIp_h1 && (pIp->h1 == pIp_h1) * (pIp->pModulator->u == pIp_pModulator_u) * (pIp->pModulator->r == 0 * pIp_pModulator_r) * (pIp->pModulator->Yp == 0) * (pIp->pModulator->Yn == 0))
*/
2025-07-05 02:35:05,836 - INFO  - 
函数 PseudoRateModulatorFun 的 ACSL Summary 为:
/*@
 requires \valid(pIp) && \valid(pIp->pModulator) ;
 requires \separated(pIp,pIp->pModulator) ;

ensures \old(pIp->pModulator->u) - \old(pIp->pModulator->r) > \old(pIp->h1) ==> pIp->h1 == \old(pIp->h1)&&pIp->pModulator->u == \old(pIp->pModulator->u)&&pIp->pModulator->r == 0 * \old(pIp->pModulator->r) + 15&&pIp->pModulator->Yp == 0&&pIp->pModulator->Yn == 15;

ensures \old(pIp->pModulator->u) - \old(pIp->pModulator->r) < -\old(pIp->h1) && \old(pIp->pModulator->u) - \old(pIp->pModulator->r) <= \old(pIp->h1) ==> pIp->h1 == \old(pIp->h1)&&pIp->pModulator->u == \old(pIp->pModulator->u)&&pIp->pModulator->r == 15 * \old(pIp->pModulator->r) - 15&&pIp->pModulator->Yp == 15&&pIp->pModulator->Yn == 0;

ensures \old(pIp->pModulator->u) - \old(pIp->pModulator->r) >= -\old(pIp->h1) && \old(pIp->pModulator->u) - \old(pIp->pModulator->r) <= \old(pIp->h1) ==> pIp->h1 == \old(pIp->h1)&&pIp->pModulator->u == \old(pIp->pModulator->u)&&pIp->pModulator->r == 0 * \old(pIp->pModulator->r)&&pIp->pModulator->Yp == 0&&pIp->pModulator->Yn == 0;

*/

2025-07-05 02:35:06,051 - INFO  - 
VERIFICATION FOR PseudoRateModulatorFun
2025-07-05 02:35:06,051 - INFO  - ========================================

2025-07-05 05:35:07,907 - INFO  - 
GENERLIZATION FOR PseudoRateModulatorFun
2025-07-05 05:35:07,908 - INFO  - ========================================

2025-07-05 05:35:07,956 - INFO  - Original ACSL: \old(pIp->pModulator->u) - \old(pIp->pModulator->r) > \old(pIp->h1) ==> pIp->h1 == \old(pIp->h1)&&pIp->pModulator->u == \old(pIp->pModulator->u)&&pIp->pModulator->r == 0 * \old(pIp->pModulator->r) + 15&&pIp->pModulator->Yp == 0&&pIp->pModulator->Yn == 15
2025-07-05 05:35:07,958 - INFO  - Z3 Expression: Implies(old_pIp_pModulator_u - old_pIp_pModulator_r >
        old_pIp_h1,
        And(And(And(And(pIp_h1 == old_pIp_h1,
                        pIp_pModulator_u ==
                        old_pIp_pModulator_u),
                    pIp_pModulator_r ==
                    0*old_pIp_pModulator_r + 15),
                0 == pIp_pModulator_Yp),
            15 == pIp_pModulator_Yn))
2025-07-05 05:35:07,959 - INFO  - Original ACSL: \old(pIp->pModulator->u) - \old(pIp->pModulator->r) < -\old(pIp->h1) && \old(pIp->pModulator->u) - \old(pIp->pModulator->r) <= \old(pIp->h1) ==> pIp->h1 == \old(pIp->h1)&&pIp->pModulator->u == \old(pIp->pModulator->u)&&pIp->pModulator->r == 15 * \old(pIp->pModulator->r) - 15&&pIp->pModulator->Yp == 15&&pIp->pModulator->Yn == 0
2025-07-05 05:35:07,968 - INFO  - Z3 Expression: Implies(And(old_pIp_pModulator_u - old_pIp_pModulator_r <
            0 - old_pIp_h1,
            old_pIp_pModulator_u - old_pIp_pModulator_r <=
            old_pIp_h1),
        And(And(And(And(pIp_h1 == old_pIp_h1,
                        pIp_pModulator_u ==
                        old_pIp_pModulator_u),
                    pIp_pModulator_r ==
                    15*old_pIp_pModulator_r - 15),
                15 == pIp_pModulator_Yp),
            0 == pIp_pModulator_Yn))
2025-07-05 05:35:07,969 - INFO  - Original ACSL: \old(pIp->pModulator->u) - \old(pIp->pModulator->r) >= -\old(pIp->h1) && \old(pIp->pModulator->u) - \old(pIp->pModulator->r) <= \old(pIp->h1) ==> pIp->h1 == \old(pIp->h1)&&pIp->pModulator->u == \old(pIp->pModulator->u)&&pIp->pModulator->r == 0 * \old(pIp->pModulator->r)&&pIp->pModulator->Yp == 0&&pIp->pModulator->Yn == 0;
2025-07-05 05:35:07,971 - INFO  - Z3 Expression: Implies(And(old_pIp_pModulator_u - old_pIp_pModulator_r >=
            0 - old_pIp_h1,
            old_pIp_pModulator_u - old_pIp_pModulator_r <=
            old_pIp_h1),
        And(And(And(And(pIp_h1 == old_pIp_h1,
                        pIp_pModulator_u ==
                        old_pIp_pModulator_u),
                    pIp_pModulator_r ==
                    0*old_pIp_pModulator_r),
                0 == pIp_pModulator_Yp),
            0 == pIp_pModulator_Yn))
2025-07-05 05:35:09,170 - INFO  - 
PseudoRateModulatorFun 的最大非冗余集合:
2025-07-05 05:35:09,170 - INFO  - [pIp_pModulator_u == old_pIp_pModulator_u, pIp_h1 == old_pIp_h1, pIp_pModulator_Yp >= 0, pIp_pModulator_Yn >= 0]
