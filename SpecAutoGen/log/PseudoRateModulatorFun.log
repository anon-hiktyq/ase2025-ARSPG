
FUNCTION INITIALIZATION
========================================

type_name:__PseudoRateModulator
type_name:TAG_FALSE_RATE_MODULATOR
初始待处理函数: ['PseudoRateModulatorFun']

GENERATE ANNOTATION FOR PseudoRateModulatorFun
========================================

函数 PseudoRateModulatorFun 已经初始化
开始生成 PseudoRateModulatorFun 的注释代码
文件 3_output/test_ip/PseudoRateModulatorFun.c 已成功创建并写入。
文件 1_output/test_ip/PseudoRateModulatorFun.c 已成功创建并写入。
文件 2_output/test_ip/PseudoRateModulatorFun.c 已成功创建并写入。

GENERATE FUNCTION SUMMARY FOR PseudoRateModulatorFun
========================================

----------------------------------------
路径约束与返回值
Combined path condition:
(pIp_pModulator_u - pIp_pModulator_r > pIp_h1 && (pIp->h1 == pIp_h1) * (pIp->pModulator->u == pIp_pModulator_u) * (pIp->pModulator->r == 0 * pIp_pModulator_r + 15) * (pIp->pModulator->Yp == 0) * (pIp->pModulator->Yn == 15)) || (pIp_pModulator_u - pIp_pModulator_r < -pIp_h1 && pIp_pModulator_u - pIp_pModulator_r <= pIp_h1 && (pIp->h1 == pIp_h1) * (pIp->pModulator->u == pIp_pModulator_u) * (pIp->pModulator->r == 15 * pIp_pModulator_r - 15) * (pIp->pModulator->Yp == 15) * (pIp->pModulator->Yn == 0)) || (pIp_pModulator_u - pIp_pModulator_r >= -pIp_h1 && pIp_pModulator_u - pIp_pModulator_r <= pIp_h1 && (pIp->h1 == pIp_h1) * (pIp->pModulator->u == pIp_pModulator_u) * (pIp->pModulator->r == 0 * pIp_pModulator_r) * (pIp->pModulator->Yp == 0) * (pIp->pModulator->Yn == 0))
----------------------------------------

开始生成完整的 PseudoRateModulatorFun 的注释代码
文件 2_output/test_ip/PseudoRateModulatorFun.c 已成功创建并写入。
开始生成 PseudoRateModulatorFun 的 ACSL 规约
Variable Map: {'pIp->h1': 'pIp_h1', 'pIp->pModulator->u': 'pIp_pModulator_u', 'pIp->pModulator->r': '0 * pIp_pModulator_r + 15', 'pIp->pModulator->Yp': '0', 'pIp->pModulator->Yn': '15'}
Path Condition: pIp_pModulator_u - pIp_pModulator_r > pIp_h1 
Result: None
Variable Map: {'pIp->h1': 'pIp_h1', 'pIp->pModulator->u': 'pIp_pModulator_u', 'pIp->pModulator->r': '15 * pIp_pModulator_r - 15', 'pIp->pModulator->Yp': '15', 'pIp->pModulator->Yn': '0'}
Path Condition: pIp_pModulator_u - pIp_pModulator_r < -pIp_h1 && pIp_pModulator_u - pIp_pModulator_r <= pIp_h1 
Result: None
Variable Map: {'pIp->h1': 'pIp_h1', 'pIp->pModulator->u': 'pIp_pModulator_u', 'pIp->pModulator->r': '0 * pIp_pModulator_r', 'pIp->pModulator->Yp': '0', 'pIp->pModulator->Yn': '0'}
Path Condition: pIp_pModulator_u - pIp_pModulator_r >= -pIp_h1 && pIp_pModulator_u - pIp_pModulator_r <= pIp_h1 
Result: None
文件 output/test_ip/PseudoRateModulatorFun.c 已成功创建并写入。

SUMMARY FOR PseudoRateModulatorFun
========================================


函数 PseudoRateModulatorFun 的 VST Summary 为:
/*@
With pIp_h1 pIp_pModulator_u pIp_pModulator_r pIp_pModulator_Yp pIp_pModulator_Yn
Require pIp->h1 == pIp_h1 && pIp->pModulator->u == pIp_pModulator_u && pIp->pModulator->r == pIp_pModulator_r && pIp->pModulator->Yp == pIp_pModulator_Yp && pIp->pModulator->Yn == pIp_pModulator_Yn
Ensure (pIp_pModulator_u - pIp_pModulator_r > pIp_h1 && (pIp->h1 == pIp_h1) * (pIp->pModulator->u == pIp_pModulator_u) * (pIp->pModulator->r == 0 * pIp_pModulator_r + 15) * (pIp->pModulator->Yp == 0) * (pIp->pModulator->Yn == 15)) || (pIp_pModulator_u - pIp_pModulator_r < -pIp_h1 && pIp_pModulator_u - pIp_pModulator_r <= pIp_h1 && (pIp->h1 == pIp_h1) * (pIp->pModulator->u == pIp_pModulator_u) * (pIp->pModulator->r == 15 * pIp_pModulator_r - 15) * (pIp->pModulator->Yp == 15) * (pIp->pModulator->Yn == 0)) || (pIp_pModulator_u - pIp_pModulator_r >= -pIp_h1 && pIp_pModulator_u - pIp_pModulator_r <= pIp_h1 && (pIp->h1 == pIp_h1) * (pIp->pModulator->u == pIp_pModulator_u) * (pIp->pModulator->r == 0 * pIp_pModulator_r) * (pIp->pModulator->Yp == 0) * (pIp->pModulator->Yn == 0))
*/

函数 PseudoRateModulatorFun 的 ACSL Summary 为:
/*@
 requires \valid(pIp) && \valid(pIp->pModulator) ;
 requires \separated(pIp,pIp->pModulator) ;

ensures \old(pIp->pModulator->u) - \old(pIp->pModulator->r) > \old(pIp->h1) ==> pIp->h1 == \old(pIp->h1)&&pIp->pModulator->u == \old(pIp->pModulator->u)&&pIp->pModulator->r == 0 * \old(pIp->pModulator->r) + 15&&pIp->pModulator->Yp == 0&&pIp->pModulator->Yn == 15;

ensures \old(pIp->pModulator->u) - \old(pIp->pModulator->r) < -\old(pIp->h1) && \old(pIp->pModulator->u) - \old(pIp->pModulator->r) <= \old(pIp->h1) ==> pIp->h1 == \old(pIp->h1)&&pIp->pModulator->u == \old(pIp->pModulator->u)&&pIp->pModulator->r == 15 * \old(pIp->pModulator->r) - 15&&pIp->pModulator->Yp == 15&&pIp->pModulator->Yn == 0;

ensures \old(pIp->pModulator->u) - \old(pIp->pModulator->r) >= -\old(pIp->h1) && \old(pIp->pModulator->u) - \old(pIp->pModulator->r) <= \old(pIp->h1) ==> pIp->h1 == \old(pIp->h1)&&pIp->pModulator->u == \old(pIp->pModulator->u)&&pIp->pModulator->r == 0 * \old(pIp->pModulator->r)&&pIp->pModulator->Yp == 0&&pIp->pModulator->Yn == 0;

*/


VERIFICATION FOR PseudoRateModulatorFun
========================================

syntax Correct
Loop Invariant:
[]

Assertion:
[]

Post Condition:
[True, True, True]


GENERLIZATION FOR PseudoRateModulatorFun
========================================

Z3 Expression: Implies(old_pIp_pModulator_u - old_pIp_pModulator_r >
        old_pIp_h1,
        And(And(And(And(pIp_h1 == old_pIp_h1,
                        pIp_pModulator_u ==
                        old_pIp_pModulator_u),
                    pIp_pModulator_r ==
                    0*old_pIp_pModulator_r + 15),
                pIp_pModulator_Yp == 0),
            pIp_pModulator_Yn == 15))
Z3 Expression: Implies(And(old_pIp_pModulator_u - old_pIp_pModulator_r <
            0 - old_pIp_h1,
            old_pIp_pModulator_u - old_pIp_pModulator_r <=
            old_pIp_h1),
        And(And(And(And(pIp_h1 == old_pIp_h1,
                        pIp_pModulator_u ==
                        old_pIp_pModulator_u),
                    pIp_pModulator_r ==
                    15*old_pIp_pModulator_r - 15),
                pIp_pModulator_Yp == 15),
            pIp_pModulator_Yn == 0))
Z3 Expression: Implies(And(old_pIp_pModulator_u - old_pIp_pModulator_r >=
            0 - old_pIp_h1,
            old_pIp_pModulator_u - old_pIp_pModulator_r <=
            old_pIp_h1),
        And(And(And(And(pIp_h1 == old_pIp_h1,
                        pIp_pModulator_u ==
                        old_pIp_pModulator_u),
                    pIp_pModulator_r ==
                    0*old_pIp_pModulator_r),
                pIp_pModulator_Yp == 0),
            pIp_pModulator_Yn == 0))

PseudoRateModulatorFun 的最大非冗余集合:
[pIp_pModulator_u == old_pIp_pModulator_u, pIp_h1 == old_pIp_h1]
