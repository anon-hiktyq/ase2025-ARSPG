2025-07-05 02:33:03,904 - INFO  - 
FUNCTION INITIALIZATION
2025-07-05 02:33:03,904 - INFO  - ========================================

2025-07-05 02:33:03,988 - INFO  - 初始待处理函数: ['SoftFaultProceedSPFun', 'SwitchSS']
2025-07-05 02:33:03,988 - INFO  - 现在处理函数 SwitchSS

2025-07-05 02:33:04,011 - INFO  - 
GENERATE ANNOTATION FOR SwitchSS
2025-07-05 02:33:04,011 - INFO  - ========================================

2025-07-05 02:33:04,011 - INFO  - 函数 SwitchSS 已经初始化
2025-07-05 02:33:04,011 - INFO  - 开始生成 SwitchSS 的注释代码
2025-07-05 02:33:04,013 - INFO  - 
GENERATE FUNCTION SUMMARY FOR SwitchSS
2025-07-05 02:33:04,013 - INFO  - ========================================

2025-07-05 02:33:04,029 - INFO  - 开始生成完整的 SwitchSS 的注释代码
2025-07-05 02:33:04,039 - INFO  - 开始生成 SwitchSS 的 ACSL 规约
2025-07-05 02:33:04,056 - INFO  - 
GENERATE ANNOTATION FOR SoftFaultProceedSPFun
2025-07-05 02:33:04,056 - INFO  - ========================================

2025-07-05 02:33:04,056 - INFO  - 函数 SoftFaultProceedSPFun 已经初始化
2025-07-05 02:33:04,056 - INFO  - 开始生成 SoftFaultProceedSPFun 的注释代码
2025-07-05 02:33:04,066 - INFO  - 
GENERATE FUNCTION SUMMARY FOR SoftFaultProceedSPFun
2025-07-05 02:33:04,066 - INFO  - ========================================

2025-07-05 02:33:04,151 - INFO  - 开始生成完整的 SoftFaultProceedSPFun 的注释代码
2025-07-05 02:33:04,166 - INFO  - 开始生成 SoftFaultProceedSPFun 的 ACSL 规约
2025-07-05 02:33:04,192 - INFO  - 
SUMMARY FOR SoftFaultProceedSPFun
2025-07-05 02:33:04,192 - INFO  - ========================================

2025-07-05 02:33:04,192 - INFO  - 
函数 SoftFaultProceedSPFun 的 VST Summary 为:
/*@
With pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP pIp_mFWarning_CWsp pIp_mFWarning_CWtf pIp_mFWarning_Wsp pIp_mFWarning_Wtf pIp_mFWarning_Wav pIp_mFWarning_flgups pIp_mFWarning_flgModeChange pIp_mFWarning_countAV pIp_mFWarning_countSPLost pIp_mFWarning_countSPSeen pIp_mFWarning_countSPset pIp_mFWarning_countUPSpc pIp_mController_Up pIp_mController_Ud pIp_mController_fy pIp_countPublic pIp_countMode
Require pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP && pIp->mFWarning.CWsp == pIp_mFWarning_CWsp && pIp->mFWarning.CWtf == pIp_mFWarning_CWtf && pIp->mFWarning.Wsp == pIp_mFWarning_Wsp && pIp->mFWarning.Wtf == pIp_mFWarning_Wtf && pIp->mFWarning.Wav == pIp_mFWarning_Wav && pIp->mFWarning.flgups == pIp_mFWarning_flgups && pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange && pIp->mFWarning.countAV == pIp_mFWarning_countAV && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset && pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc && pIp->mController.Up == pIp_mController_Up && pIp->mController.Ud == pIp_mController_Ud && pIp->mController.fy == pIp_mController_fy && pIp->countPublic == pIp_countPublic && pIp->countMode == pIp_countMode
Ensure (pIp_mDSSData_stateFlag_A != 1 && pIp->mDSSData.stateFlag_A == 1 && pIp_mFWarning_countSPset + 1 == 5 && (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode)) || (pIp_mDSSData_stateFlag_A == 1 && pIp->mDSSData.stateFlag_A == 0 && pIp_mFWarning_countSPset + 1 == 5 && (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode)) || (pIp_mFWarning_countSPset + 1 == 10 && pIp_mFWarning_countSPset + 1 != 5 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == 0) * (pIp->mFWarning.CWtf == 0) * (pIp->mFWarning.Wsp == 0) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == 0) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == 0) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == 0) * (pIp->countMode == 0)) || (pIp_mFWarning_countSPset + 1 != 10 && pIp_mFWarning_countSPset + 1 != 5 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode))
*/
2025-07-05 02:33:04,193 - INFO  - 
函数 SoftFaultProceedSPFun 的 ACSL Summary 为:
/*@
 requires \valid(pIp) ;

ensures \old(pIp->mDSSData.stateFlag_A) != 1 && pIp->mDSSData.stateFlag_A == 1 && \old(pIp->mFWarning.countSPset) + 1 == 5 ==> pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset) + 1&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode);

ensures \old(pIp->mDSSData.stateFlag_A) == 1 && pIp->mDSSData.stateFlag_A == 0 && \old(pIp->mFWarning.countSPset) + 1 == 5 ==> pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset) + 1&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode);

ensures \old(pIp->mFWarning.countSPset) + 1 == 10 && \old(pIp->mFWarning.countSPset) + 1 != 5 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == 0&&pIp->mFWarning.CWtf == 0&&pIp->mFWarning.Wsp == 0&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == 0&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == 0&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == 0&&pIp->countMode == 0;

ensures \old(pIp->mFWarning.countSPset) + 1 != 10 && \old(pIp->mFWarning.countSPset) + 1 != 5 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset) + 1&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode);

*/

2025-07-05 02:33:04,416 - INFO  - 
VERIFICATION FOR SoftFaultProceedSPFun
2025-07-05 02:33:04,416 - INFO  - ========================================

2025-07-05 02:33:05,799 - INFO  - 
GENERLIZATION FOR SoftFaultProceedSPFun
2025-07-05 02:33:05,799 - INFO  - ========================================

2025-07-05 02:33:06,422 - INFO  - Original ACSL: \old(pIp->mDSSData.stateFlag_A) != 1 && pIp->mDSSData.stateFlag_A == 1 && \old(pIp->mFWarning.countSPset) + 1 == 5 ==> pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset) + 1&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode)
2025-07-05 02:33:06,434 - INFO  - Z3 Expression: Implies(And(And(1 != old_pIp_mDSSData_stateFlag_A,
                1 == pIp_mDSSData_stateFlag_A),
            5 == old_pIp_mFWarning_countSPset + 1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(...,
                                        ...),
                                        ... == ...),
                                        pIp_mDSSData_flgSP ==
                                        old_pIp_mDSSData_flgSP),
                                        pIp_mFWarning_CWsp ==
                                        old_pIp_mFWarning_CWsp),
                                        pIp_mFWarning_CWtf ==
                                        old_pIp_mFWarning_CWtf),
                                        pIp_mFWarning_Wsp ==
                                        old_pIp_mFWarning_Wsp),
                                        pIp_mFWarning_Wtf ==
                                        old_pIp_mFWarning_Wtf),
                                        pIp_mFWarning_Wav ==
                                        old_pIp_mFWarning_Wav),
                                        pIp_mFWarning_flgups ==
                                        old_pIp_mFWarning_flgups),
                                        pIp_mFWarning_flgModeChange ==
                                        old_pIp_mFWarning_flgModeChange),
                                        pIp_mFWarning_countAV ==
                                        old_pIp_mFWarning_countAV),
                                        pIp_mFWarning_countSPLost ==
                                        old_pIp_mFWarning_countSPLost),
                                        pIp_mFWarning_countSPSeen ==
                                        old_pIp_mFWarning_countSPSeen),
                                    pIp_mFWarning_countSPset ==
                                    old_pIp_mFWarning_countSPset +
                                    1),
                                pIp_mFWarning_countUPSpc ==
                                old_pIp_mFWarning_countUPSpc),
                            pIp_mController_Up ==
                            old_pIp_mController_Up),
                        pIp_mController_Ud ==
                        old_pIp_mController_Ud),
                    pIp_mController_fy ==
                    old_pIp_mController_fy),
                pIp_countPublic == old_pIp_countPublic),
            pIp_countMode == old_pIp_countMode))
2025-07-05 02:33:06,438 - INFO  - Original ACSL: \old(pIp->mDSSData.stateFlag_A) == 1 && pIp->mDSSData.stateFlag_A == 0 && \old(pIp->mFWarning.countSPset) + 1 == 5 ==> pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset) + 1&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode)
2025-07-05 02:33:06,449 - INFO  - Z3 Expression: Implies(And(And(1 == old_pIp_mDSSData_stateFlag_A,
                0 == pIp_mDSSData_stateFlag_A),
            5 == old_pIp_mFWarning_countSPset + 1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(...,
                                        ...),
                                        ... == ...),
                                        pIp_mDSSData_flgSP ==
                                        old_pIp_mDSSData_flgSP),
                                        pIp_mFWarning_CWsp ==
                                        old_pIp_mFWarning_CWsp),
                                        pIp_mFWarning_CWtf ==
                                        old_pIp_mFWarning_CWtf),
                                        pIp_mFWarning_Wsp ==
                                        old_pIp_mFWarning_Wsp),
                                        pIp_mFWarning_Wtf ==
                                        old_pIp_mFWarning_Wtf),
                                        pIp_mFWarning_Wav ==
                                        old_pIp_mFWarning_Wav),
                                        pIp_mFWarning_flgups ==
                                        old_pIp_mFWarning_flgups),
                                        pIp_mFWarning_flgModeChange ==
                                        old_pIp_mFWarning_flgModeChange),
                                        pIp_mFWarning_countAV ==
                                        old_pIp_mFWarning_countAV),
                                        pIp_mFWarning_countSPLost ==
                                        old_pIp_mFWarning_countSPLost),
                                        pIp_mFWarning_countSPSeen ==
                                        old_pIp_mFWarning_countSPSeen),
                                    pIp_mFWarning_countSPset ==
                                    old_pIp_mFWarning_countSPset +
                                    1),
                                pIp_mFWarning_countUPSpc ==
                                old_pIp_mFWarning_countUPSpc),
                            pIp_mController_Up ==
                            old_pIp_mController_Up),
                        pIp_mController_Ud ==
                        old_pIp_mController_Ud),
                    pIp_mController_fy ==
                    old_pIp_mController_fy),
                pIp_countPublic == old_pIp_countPublic),
            pIp_countMode == old_pIp_countMode))
2025-07-05 02:33:06,453 - INFO  - Original ACSL: \old(pIp->mFWarning.countSPset) + 1 == 10 && \old(pIp->mFWarning.countSPset) + 1 != 5 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == 0&&pIp->mFWarning.CWtf == 0&&pIp->mFWarning.Wsp == 0&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == 0&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == 0&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == 0&&pIp->countMode == 0
2025-07-05 02:33:06,464 - INFO  - Z3 Expression: Implies(And(10 == old_pIp_mFWarning_countSPset + 1,
            5 != old_pIp_mFWarning_countSPset + 1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(...,
                                        ...),
                                        ... == ...),
                                        pIp_mDSSData_flgSP ==
                                        old_pIp_mDSSData_flgSP),
                                        0 ==
                                        pIp_mFWarning_CWsp),
                                        0 ==
                                        pIp_mFWarning_CWtf),
                                        0 ==
                                        pIp_mFWarning_Wsp),
                                        pIp_mFWarning_Wtf ==
                                        old_pIp_mFWarning_Wtf),
                                        pIp_mFWarning_Wav ==
                                        old_pIp_mFWarning_Wav),
                                        pIp_mFWarning_flgups ==
                                        old_pIp_mFWarning_flgups),
                                        pIp_mFWarning_flgModeChange ==
                                        old_pIp_mFWarning_flgModeChange),
                                        pIp_mFWarning_countAV ==
                                        old_pIp_mFWarning_countAV),
                                        pIp_mFWarning_countSPLost ==
                                        old_pIp_mFWarning_countSPLost),
                                        pIp_mFWarning_countSPSeen ==
                                        old_pIp_mFWarning_countSPSeen),
                                    0 ==
                                    pIp_mFWarning_countSPset),
                                pIp_mFWarning_countUPSpc ==
                                old_pIp_mFWarning_countUPSpc),
                            0 == pIp_mController_Up),
                        pIp_mController_Ud ==
                        old_pIp_mController_Ud),
                    pIp_mController_fy ==
                    old_pIp_mController_fy),
                0 == pIp_countPublic),
            0 == pIp_countMode))
2025-07-05 02:33:06,467 - INFO  - Original ACSL: \old(pIp->mFWarning.countSPset) + 1 != 10 && \old(pIp->mFWarning.countSPset) + 1 != 5 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset) + 1&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode);
2025-07-05 02:33:06,478 - INFO  - Z3 Expression: Implies(And(10 != old_pIp_mFWarning_countSPset + 1,
            5 != old_pIp_mFWarning_countSPset + 1),
        And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(And(...,
                                        ...),
                                        ... == ...),
                                        pIp_mDSSData_flgSP ==
                                        old_pIp_mDSSData_flgSP),
                                        pIp_mFWarning_CWsp ==
                                        old_pIp_mFWarning_CWsp),
                                        pIp_mFWarning_CWtf ==
                                        old_pIp_mFWarning_CWtf),
                                        pIp_mFWarning_Wsp ==
                                        old_pIp_mFWarning_Wsp),
                                        pIp_mFWarning_Wtf ==
                                        old_pIp_mFWarning_Wtf),
                                        pIp_mFWarning_Wav ==
                                        old_pIp_mFWarning_Wav),
                                        pIp_mFWarning_flgups ==
                                        old_pIp_mFWarning_flgups),
                                        pIp_mFWarning_flgModeChange ==
                                        old_pIp_mFWarning_flgModeChange),
                                        pIp_mFWarning_countAV ==
                                        old_pIp_mFWarning_countAV),
                                        pIp_mFWarning_countSPLost ==
                                        old_pIp_mFWarning_countSPLost),
                                        pIp_mFWarning_countSPSeen ==
                                        old_pIp_mFWarning_countSPSeen),
                                    pIp_mFWarning_countSPset ==
                                    old_pIp_mFWarning_countSPset +
                                    1),
                                pIp_mFWarning_countUPSpc ==
                                old_pIp_mFWarning_countUPSpc),
                            pIp_mController_Up ==
                            old_pIp_mController_Up),
                        pIp_mController_Ud ==
                        old_pIp_mController_Ud),
                    pIp_mController_fy ==
                    old_pIp_mController_fy),
                pIp_countPublic == old_pIp_countPublic),
            pIp_countMode == old_pIp_countMode))
2025-07-05 02:33:11,777 - INFO  - 
SoftFaultProceedSPFun 的最大非冗余集合:
2025-07-05 02:33:11,778 - INFO  - []
