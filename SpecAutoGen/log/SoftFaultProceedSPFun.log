FUNCTION INITIALIZATION
========================================

type_name:__SoftFaultProceedSP
type_name:TAG_DSS_DATA
type_name:TAG_FAULT_WARNING
type_name:TAG_CONTROLLERIN
初始待处理函数: ['SoftFaultProceedSPFun', 'SwitchSS']
现在处理函数 SwitchSS

type_name:__SoftFaultProceedSP
type_name:TAG_DSS_DATA
type_name:TAG_FAULT_WARNING
type_name:TAG_CONTROLLERIN

GENERATE ANNOTATION FOR SwitchSS
========================================

函数 SwitchSS 已经初始化
开始生成 SwitchSS 的注释代码
ACSL SwitchSS.c文件的内容为: 

typedef struct TAG_CONTROLLERIN
{
    
    int 	Up;						
    int 	Ud;					
    int 	fy;					
    
}SController;


typedef struct TAG_FAULT_WARNING
{
 	int CWsp;
 	int CWtf;

    int Wsp;
    int Wtf;
    int Wav;

    int flgups;
    int flgModeChange;

    int countAV;
    int countSPLost;
    int countSPSeen;
    int countSPset;
    int countUPSpc;

} SFWarning;



typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
}SDSSData;

typedef struct TAG_CONTROLLER
{
	int Up;
	int Up_last;
}SController;

typedef struct __SoftFaultProceedSP
{

	SDSSData		mDSSData;
	SFWarning		mFWarning;
	SController     mController;
	int				countPublic;
	int				countMode;

} SoftFaultProceedSP;



void SwitchSS(SoftFaultProceedSP *pIp)
{

    if (pIp->mDSSData.stateFlag_A == 1)
    {
		pIp -> mDSSData.stateFlag_A = 0;
    }
    else
    {
		pIp -> mDSSData.stateFlag_A = 1;
    }

    return;
}

void SoftFaultProceedSPFun(SoftFaultProceedSP *pIp)
{

	pIp -> mFWarning.countSPset++ ;


	if(pIp -> mFWarning.countSPset == 5){

			SwitchSS(pIp);
	}else if(pIp -> mFWarning.countSPset == 10){

			pIp -> mFWarning.CWsp = 0 ;
			pIp -> mFWarning.CWtf = 0 ;
			pIp -> mFWarning.countSPset = 0 ;
			pIp -> mFWarning.Wsp = 0 ;
	        pIp -> mController.Up = 0 ;
	        pIp -> countMode = 0 ;
	        pIp -> countPublic = 0 ;
	}
	   

	return ;
}
文件 3_output/test_ip/SwitchSS.c 已成功创建并写入。
预注释SwitchSS.c文件的内容为: 

#include "../verification_stdlib.h"
#include "../verification_list.h"
#include "../int_array_def.h"

/*@ Extern Coq (Result: Assertion) */
/*@ Extern Coq (Results: Z -> Assertion) */

    typedef struct TAG_CONTROLLERIN
{
    
    int 	Up;						
    int 	Ud;					
    int 	fy;					
    
}SController;
typedef struct TAG_FAULT_WARNING
{
 	int CWsp;
 	int CWtf;

    int Wsp;
    int Wtf;
    int Wav;

    int flgups;
    int flgModeChange;

    int countAV;
    int countSPLost;
    int countSPSeen;
    int countSPset;
    int countUPSpc;

} SFWarning;
typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
}SDSSData;
typedef struct __SoftFaultProceedSP
{

	SDSSData		mDSSData;
	SFWarning		mFWarning;
	SController     mController;
	int				countPublic;
	int				countMode;

} SoftFaultProceedSP;

void SwitchSS(SoftFaultProceedSP *pIp)

/*@
With pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP pIp_mFWarning_CWsp pIp_mFWarning_CWtf pIp_mFWarning_Wsp pIp_mFWarning_Wtf pIp_mFWarning_Wav pIp_mFWarning_flgups pIp_mFWarning_flgModeChange pIp_mFWarning_countAV pIp_mFWarning_countSPLost pIp_mFWarning_countSPSeen pIp_mFWarning_countSPset pIp_mFWarning_countUPSpc pIp_mController_Up pIp_mController_Ud pIp_mController_fy pIp_countPublic pIp_countMode
Require pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP && pIp->mFWarning.CWsp == pIp_mFWarning_CWsp && pIp->mFWarning.CWtf == pIp_mFWarning_CWtf && pIp->mFWarning.Wsp == pIp_mFWarning_Wsp && pIp->mFWarning.Wtf == pIp_mFWarning_Wtf && pIp->mFWarning.Wav == pIp_mFWarning_Wav && pIp->mFWarning.flgups == pIp_mFWarning_flgups && pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange && pIp->mFWarning.countAV == pIp_mFWarning_countAV && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset && pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc && pIp->mController.Up == pIp_mController_Up && pIp->mController.Ud == pIp_mController_Ud && pIp->mController.fy == pIp_mController_fy && pIp->countPublic == pIp_countPublic && pIp->countMode == pIp_countMode
Ensure emp
*/{

    if (pIp->mDSSData.stateFlag_A == 1)
    {
		pIp -> mDSSData.stateFlag_A = 0;
    }
    else
    {
		pIp -> mDSSData.stateFlag_A = 1;
    }

    return;
}
文件 1_output/test_ip/SwitchSS.c 已成功创建并写入。
文件 2_output/test_ip/SwitchSS.c 已成功创建并写入。

GENERATE FUNCTION SUMMARY FOR SwitchSS
========================================

----------------------------------------
路径约束与返回值
Combined path condition:
(pIp_mDSSData_stateFlag_A == 1 && (pIp->mDSSData.stateFlag_A == 0) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode)) || (pIp_mDSSData_stateFlag_A != 1 && (pIp->mDSSData.stateFlag_A == 1) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode))
----------------------------------------

开始生成完整的 SwitchSS 的注释代码
完整注释SwitchSS.c 文件的内容为: 

#include "../verification_stdlib.h"
#include "../verification_list.h"
#include "../int_array_def.h"

/*@ Extern Coq (Result: Assertion) */
/*@ Extern Coq (Results: Z -> Assertion) */

    typedef struct TAG_CONTROLLERIN
{
    
    int 	Up;						
    int 	Ud;					
    int 	fy;					
    
}SController;
typedef struct TAG_FAULT_WARNING
{
 	int CWsp;
 	int CWtf;

    int Wsp;
    int Wtf;
    int Wav;

    int flgups;
    int flgModeChange;

    int countAV;
    int countSPLost;
    int countSPSeen;
    int countSPset;
    int countUPSpc;

} SFWarning;
typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
}SDSSData;
typedef struct __SoftFaultProceedSP
{

	SDSSData		mDSSData;
	SFWarning		mFWarning;
	SController     mController;
	int				countPublic;
	int				countMode;

} SoftFaultProceedSP;

void SwitchSS(SoftFaultProceedSP *pIp)

/*@
With pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP pIp_mFWarning_CWsp pIp_mFWarning_CWtf pIp_mFWarning_Wsp pIp_mFWarning_Wtf pIp_mFWarning_Wav pIp_mFWarning_flgups pIp_mFWarning_flgModeChange pIp_mFWarning_countAV pIp_mFWarning_countSPLost pIp_mFWarning_countSPSeen pIp_mFWarning_countSPset pIp_mFWarning_countUPSpc pIp_mController_Up pIp_mController_Ud pIp_mController_fy pIp_countPublic pIp_countMode
Require pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP && pIp->mFWarning.CWsp == pIp_mFWarning_CWsp && pIp->mFWarning.CWtf == pIp_mFWarning_CWtf && pIp->mFWarning.Wsp == pIp_mFWarning_Wsp && pIp->mFWarning.Wtf == pIp_mFWarning_Wtf && pIp->mFWarning.Wav == pIp_mFWarning_Wav && pIp->mFWarning.flgups == pIp_mFWarning_flgups && pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange && pIp->mFWarning.countAV == pIp_mFWarning_countAV && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset && pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc && pIp->mController.Up == pIp_mController_Up && pIp->mController.Ud == pIp_mController_Ud && pIp->mController.fy == pIp_mController_fy && pIp->countPublic == pIp_countPublic && pIp->countMode == pIp_countMode
Ensure (pIp_mDSSData_stateFlag_A == 1 && (pIp->mDSSData.stateFlag_A == 0) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode)) || (pIp_mDSSData_stateFlag_A != 1 && (pIp->mDSSData.stateFlag_A == 1) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode))
*/
{

    if (pIp->mDSSData.stateFlag_A == 1)
    {
		pIp -> mDSSData.stateFlag_A = 0;
    }
    else
    {
		pIp -> mDSSData.stateFlag_A = 1;
    }

    return;
}
文件 2_output/test_ip/SwitchSS.c 已成功创建并写入。
开始生成 SwitchSS 的 ACSL 规约
Variable Map: {'pIp->mDSSData.stateFlag_A': '0', 'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP', 'pIp->mFWarning.CWsp': 'pIp_mFWarning_CWsp', 'pIp->mFWarning.CWtf': 'pIp_mFWarning_CWtf', 'pIp->mFWarning.Wsp': 'pIp_mFWarning_Wsp', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': 'pIp_mFWarning_countSPLost', 'pIp->mFWarning.countSPSeen': 'pIp_mFWarning_countSPSeen', 'pIp->mFWarning.countSPset': 'pIp_mFWarning_countSPset', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc', 'pIp->mController.Up': 'pIp_mController_Up', 'pIp->mController.Ud': 'pIp_mController_Ud', 'pIp->mController.fy': 'pIp_mController_fy', 'pIp->countPublic': 'pIp_countPublic', 'pIp->countMode': 'pIp_countMode'}
Path Condition: pIp_mDSSData_stateFlag_A == 1 
Result: None
Variable Map: {'pIp->mDSSData.stateFlag_A': '1', 'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP', 'pIp->mFWarning.CWsp': 'pIp_mFWarning_CWsp', 'pIp->mFWarning.CWtf': 'pIp_mFWarning_CWtf', 'pIp->mFWarning.Wsp': 'pIp_mFWarning_Wsp', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': 'pIp_mFWarning_countSPLost', 'pIp->mFWarning.countSPSeen': 'pIp_mFWarning_countSPSeen', 'pIp->mFWarning.countSPset': 'pIp_mFWarning_countSPset', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc', 'pIp->mController.Up': 'pIp_mController_Up', 'pIp->mController.Ud': 'pIp_mController_Ud', 'pIp->mController.fy': 'pIp_mController_fy', 'pIp->countPublic': 'pIp_countPublic', 'pIp->countMode': 'pIp_countMode'}
Path Condition: pIp_mDSSData_stateFlag_A != 1 
Result: None
SwitchSS.c 的规约的内容为: 
typedef struct TAG_CONTROLLERIN
{
    
    int 	Up;						
    int 	Ud;					
    int 	fy;					
    
}SController;
typedef struct TAG_FAULT_WARNING
{
 	int CWsp;
 	int CWtf;

    int Wsp;
    int Wtf;
    int Wav;

    int flgups;
    int flgModeChange;

    int countAV;
    int countSPLost;
    int countSPSeen;
    int countSPset;
    int countUPSpc;

} SFWarning;
typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
}SDSSData;
typedef struct __SoftFaultProceedSP
{

	SDSSData		mDSSData;
	SFWarning		mFWarning;
	SController     mController;
	int				countPublic;
	int				countMode;

} SoftFaultProceedSP;

/*@
 requires \valid(pIp) ;
 requires \separated(pIp) ;

ensures \old(pIp->mDSSData.stateFlag_A) == 1 ==> pIp->mDSSData.stateFlag_A == 0&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset)&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode);

ensures \old(pIp->mDSSData.stateFlag_A) != 1 ==> pIp->mDSSData.stateFlag_A == 1&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset)&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode);

*/

void SwitchSS(SoftFaultProceedSP *pIp)

{

    if (pIp->mDSSData.stateFlag_A == 1)
    {
		pIp -> mDSSData.stateFlag_A = 0;
    }
    else
    {
		pIp -> mDSSData.stateFlag_A = 1;
    }

    return;
}
文件 output/test_ip/SwitchSS.c 已成功创建并写入。

GENERATE ANNOTATION FOR SoftFaultProceedSPFun
========================================

函数 SoftFaultProceedSPFun 已经初始化
开始生成 SoftFaultProceedSPFun 的注释代码
ACSL SoftFaultProceedSPFun.c文件的内容为: 

typedef struct TAG_CONTROLLERIN
{
    
    int 	Up;						
    int 	Ud;					
    int 	fy;					
    
}SController;


typedef struct TAG_FAULT_WARNING
{
 	int CWsp;
 	int CWtf;

    int Wsp;
    int Wtf;
    int Wav;

    int flgups;
    int flgModeChange;

    int countAV;
    int countSPLost;
    int countSPSeen;
    int countSPset;
    int countUPSpc;

} SFWarning;



typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
}SDSSData;

typedef struct TAG_CONTROLLER
{
	int Up;
	int Up_last;
}SController;

typedef struct __SoftFaultProceedSP
{

	SDSSData		mDSSData;
	SFWarning		mFWarning;
	SController     mController;
	int				countPublic;
	int				countMode;

} SoftFaultProceedSP;



void SwitchSS(SoftFaultProceedSP *pIp)
{

    if (pIp->mDSSData.stateFlag_A == 1)
    {
		pIp -> mDSSData.stateFlag_A = 0;
    }
    else
    {
		pIp -> mDSSData.stateFlag_A = 1;
    }

    return;
}

void SoftFaultProceedSPFun(SoftFaultProceedSP *pIp)
{

	pIp -> mFWarning.countSPset++ ;


	if(pIp -> mFWarning.countSPset == 5){

			SwitchSS(pIp);
	}else if(pIp -> mFWarning.countSPset == 10){

			pIp -> mFWarning.CWsp = 0 ;
			pIp -> mFWarning.CWtf = 0 ;
			pIp -> mFWarning.countSPset = 0 ;
			pIp -> mFWarning.Wsp = 0 ;
	        pIp -> mController.Up = 0 ;
	        pIp -> countMode = 0 ;
	        pIp -> countPublic = 0 ;
	}
	   

	return ;
}
文件 3_output/test_ip/SoftFaultProceedSPFun.c 已成功创建并写入。
预注释SoftFaultProceedSPFun.c文件的内容为: 

#include "../verification_stdlib.h"
#include "../verification_list.h"
#include "../int_array_def.h"

/*@ Extern Coq (Result: Assertion) */
/*@ Extern Coq (Results: Z -> Assertion) */

    typedef struct TAG_CONTROLLERIN
{
    
    int 	Up;						
    int 	Ud;					
    int 	fy;					
    
}SController;
typedef struct TAG_FAULT_WARNING
{
 	int CWsp;
 	int CWtf;

    int Wsp;
    int Wtf;
    int Wav;

    int flgups;
    int flgModeChange;

    int countAV;
    int countSPLost;
    int countSPSeen;
    int countSPset;
    int countUPSpc;

} SFWarning;
typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
}SDSSData;
typedef struct __SoftFaultProceedSP
{

	SDSSData		mDSSData;
	SFWarning		mFWarning;
	SController     mController;
	int				countPublic;
	int				countMode;

} SoftFaultProceedSP;

void SwitchSS(SoftFaultProceedSP *pIp)
/*@
With pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP pIp_mFWarning_CWsp pIp_mFWarning_CWtf pIp_mFWarning_Wsp pIp_mFWarning_Wtf pIp_mFWarning_Wav pIp_mFWarning_flgups pIp_mFWarning_flgModeChange pIp_mFWarning_countAV pIp_mFWarning_countSPLost pIp_mFWarning_countSPSeen pIp_mFWarning_countSPset pIp_mFWarning_countUPSpc pIp_mController_Up pIp_mController_Ud pIp_mController_fy pIp_countPublic pIp_countMode
Require pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP && pIp->mFWarning.CWsp == pIp_mFWarning_CWsp && pIp->mFWarning.CWtf == pIp_mFWarning_CWtf && pIp->mFWarning.Wsp == pIp_mFWarning_Wsp && pIp->mFWarning.Wtf == pIp_mFWarning_Wtf && pIp->mFWarning.Wav == pIp_mFWarning_Wav && pIp->mFWarning.flgups == pIp_mFWarning_flgups && pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange && pIp->mFWarning.countAV == pIp_mFWarning_countAV && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset && pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc && pIp->mController.Up == pIp_mController_Up && pIp->mController.Ud == pIp_mController_Ud && pIp->mController.fy == pIp_mController_fy && pIp->countPublic == pIp_countPublic && pIp->countMode == pIp_countMode
Ensure (pIp_mDSSData_stateFlag_A == 1 && (pIp->mDSSData.stateFlag_A == 0) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode)) || (pIp_mDSSData_stateFlag_A != 1 && (pIp->mDSSData.stateFlag_A == 1) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode))
*/
{

    if (pIp->mDSSData.stateFlag_A == 1)
    {
		pIp -> mDSSData.stateFlag_A = 0;
    }
    else
    {
		pIp -> mDSSData.stateFlag_A = 1;
    }

    return;
}
void SoftFaultProceedSPFun(SoftFaultProceedSP *pIp)

/*@
With pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP pIp_mFWarning_CWsp pIp_mFWarning_CWtf pIp_mFWarning_Wsp pIp_mFWarning_Wtf pIp_mFWarning_Wav pIp_mFWarning_flgups pIp_mFWarning_flgModeChange pIp_mFWarning_countAV pIp_mFWarning_countSPLost pIp_mFWarning_countSPSeen pIp_mFWarning_countSPset pIp_mFWarning_countUPSpc pIp_mController_Up pIp_mController_Ud pIp_mController_fy pIp_countPublic pIp_countMode
Require pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP && pIp->mFWarning.CWsp == pIp_mFWarning_CWsp && pIp->mFWarning.CWtf == pIp_mFWarning_CWtf && pIp->mFWarning.Wsp == pIp_mFWarning_Wsp && pIp->mFWarning.Wtf == pIp_mFWarning_Wtf && pIp->mFWarning.Wav == pIp_mFWarning_Wav && pIp->mFWarning.flgups == pIp_mFWarning_flgups && pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange && pIp->mFWarning.countAV == pIp_mFWarning_countAV && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset && pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc && pIp->mController.Up == pIp_mController_Up && pIp->mController.Ud == pIp_mController_Ud && pIp->mController.fy == pIp_mController_fy && pIp->countPublic == pIp_countPublic && pIp->countMode == pIp_countMode
Ensure emp
*/{

	pIp -> mFWarning.countSPset++ ;


	if(pIp -> mFWarning.countSPset == 5){

			SwitchSS(pIp);
	}else if(pIp -> mFWarning.countSPset == 10){

			pIp -> mFWarning.CWsp = 0 ;
			pIp -> mFWarning.CWtf = 0 ;
			pIp -> mFWarning.countSPset = 0 ;
			pIp -> mFWarning.Wsp = 0 ;
	        pIp -> mController.Up = 0 ;
	        pIp -> countMode = 0 ;
	        pIp -> countPublic = 0 ;
	}
	   

	return ;
}
文件 1_output/test_ip/SoftFaultProceedSPFun.c 已成功创建并写入。
文件 2_output/test_ip/SoftFaultProceedSPFun.c 已成功创建并写入。

GENERATE FUNCTION SUMMARY FOR SoftFaultProceedSPFun
========================================

----------------------------------------
路径约束与返回值
Combined path condition:
(pIp_mDSSData_stateFlag_A != 1 && pIp->mDSSData.stateFlag_A == 1 && pIp_mFWarning_countSPset + 1 == 5 && (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode)) || (pIp_mDSSData_stateFlag_A == 1 && pIp->mDSSData.stateFlag_A == 0 && pIp_mFWarning_countSPset + 1 == 5 && (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode)) || (pIp_mFWarning_countSPset + 1 == 10 && pIp_mFWarning_countSPset + 1 != 5 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == 0) * (pIp->mFWarning.CWtf == 0) * (pIp->mFWarning.Wsp == 0) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == 0) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == 0) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == 0) * (pIp->countMode == 0)) || (pIp_mFWarning_countSPset + 1 != 10 && pIp_mFWarning_countSPset + 1 != 5 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode))
----------------------------------------

开始生成完整的 SoftFaultProceedSPFun 的注释代码
完整注释SoftFaultProceedSPFun.c 文件的内容为: 

#include "../verification_stdlib.h"
#include "../verification_list.h"
#include "../int_array_def.h"

/*@ Extern Coq (Result: Assertion) */
/*@ Extern Coq (Results: Z -> Assertion) */

    typedef struct TAG_CONTROLLERIN
{
    
    int 	Up;						
    int 	Ud;					
    int 	fy;					
    
}SController;
typedef struct TAG_FAULT_WARNING
{
 	int CWsp;
 	int CWtf;

    int Wsp;
    int Wtf;
    int Wav;

    int flgups;
    int flgModeChange;

    int countAV;
    int countSPLost;
    int countSPSeen;
    int countSPset;
    int countUPSpc;

} SFWarning;
typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
}SDSSData;
typedef struct __SoftFaultProceedSP
{

	SDSSData		mDSSData;
	SFWarning		mFWarning;
	SController     mController;
	int				countPublic;
	int				countMode;

} SoftFaultProceedSP;

void SwitchSS(SoftFaultProceedSP *pIp)
/*@
With pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP pIp_mFWarning_CWsp pIp_mFWarning_CWtf pIp_mFWarning_Wsp pIp_mFWarning_Wtf pIp_mFWarning_Wav pIp_mFWarning_flgups pIp_mFWarning_flgModeChange pIp_mFWarning_countAV pIp_mFWarning_countSPLost pIp_mFWarning_countSPSeen pIp_mFWarning_countSPset pIp_mFWarning_countUPSpc pIp_mController_Up pIp_mController_Ud pIp_mController_fy pIp_countPublic pIp_countMode
Require pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP && pIp->mFWarning.CWsp == pIp_mFWarning_CWsp && pIp->mFWarning.CWtf == pIp_mFWarning_CWtf && pIp->mFWarning.Wsp == pIp_mFWarning_Wsp && pIp->mFWarning.Wtf == pIp_mFWarning_Wtf && pIp->mFWarning.Wav == pIp_mFWarning_Wav && pIp->mFWarning.flgups == pIp_mFWarning_flgups && pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange && pIp->mFWarning.countAV == pIp_mFWarning_countAV && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset && pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc && pIp->mController.Up == pIp_mController_Up && pIp->mController.Ud == pIp_mController_Ud && pIp->mController.fy == pIp_mController_fy && pIp->countPublic == pIp_countPublic && pIp->countMode == pIp_countMode
Ensure (pIp_mDSSData_stateFlag_A == 1 && (pIp->mDSSData.stateFlag_A == 0) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode)) || (pIp_mDSSData_stateFlag_A != 1 && (pIp->mDSSData.stateFlag_A == 1) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode))
*/
{

    if (pIp->mDSSData.stateFlag_A == 1)
    {
		pIp -> mDSSData.stateFlag_A = 0;
    }
    else
    {
		pIp -> mDSSData.stateFlag_A = 1;
    }

    return;
}
void SoftFaultProceedSPFun(SoftFaultProceedSP *pIp)

/*@
With pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP pIp_mFWarning_CWsp pIp_mFWarning_CWtf pIp_mFWarning_Wsp pIp_mFWarning_Wtf pIp_mFWarning_Wav pIp_mFWarning_flgups pIp_mFWarning_flgModeChange pIp_mFWarning_countAV pIp_mFWarning_countSPLost pIp_mFWarning_countSPSeen pIp_mFWarning_countSPset pIp_mFWarning_countUPSpc pIp_mController_Up pIp_mController_Ud pIp_mController_fy pIp_countPublic pIp_countMode
Require pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP && pIp->mFWarning.CWsp == pIp_mFWarning_CWsp && pIp->mFWarning.CWtf == pIp_mFWarning_CWtf && pIp->mFWarning.Wsp == pIp_mFWarning_Wsp && pIp->mFWarning.Wtf == pIp_mFWarning_Wtf && pIp->mFWarning.Wav == pIp_mFWarning_Wav && pIp->mFWarning.flgups == pIp_mFWarning_flgups && pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange && pIp->mFWarning.countAV == pIp_mFWarning_countAV && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset && pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc && pIp->mController.Up == pIp_mController_Up && pIp->mController.Ud == pIp_mController_Ud && pIp->mController.fy == pIp_mController_fy && pIp->countPublic == pIp_countPublic && pIp->countMode == pIp_countMode
Ensure (pIp_mDSSData_stateFlag_A != 1 && pIp->mDSSData.stateFlag_A == 1 && pIp_mFWarning_countSPset + 1 == 5 && (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode)) || (pIp_mDSSData_stateFlag_A == 1 && pIp->mDSSData.stateFlag_A == 0 && pIp_mFWarning_countSPset + 1 == 5 && (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode)) || (pIp_mFWarning_countSPset + 1 == 10 && pIp_mFWarning_countSPset + 1 != 5 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == 0) * (pIp->mFWarning.CWtf == 0) * (pIp->mFWarning.Wsp == 0) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == 0) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == 0) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == 0) * (pIp->countMode == 0)) || (pIp_mFWarning_countSPset + 1 != 10 && pIp_mFWarning_countSPset + 1 != 5 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode))
*/
{

	pIp -> mFWarning.countSPset++ ;


	if(pIp -> mFWarning.countSPset == 5){

			SwitchSS(pIp);
	}else if(pIp -> mFWarning.countSPset == 10){

			pIp -> mFWarning.CWsp = 0 ;
			pIp -> mFWarning.CWtf = 0 ;
			pIp -> mFWarning.countSPset = 0 ;
			pIp -> mFWarning.Wsp = 0 ;
	        pIp -> mController.Up = 0 ;
	        pIp -> countMode = 0 ;
	        pIp -> countPublic = 0 ;
	}
	   

	return ;
}
文件 2_output/test_ip/SoftFaultProceedSPFun.c 已成功创建并写入。
开始生成 SoftFaultProceedSPFun 的 ACSL 规约
Variable Map: {'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP', 'pIp->mFWarning.CWsp': 'pIp_mFWarning_CWsp', 'pIp->mFWarning.CWtf': 'pIp_mFWarning_CWtf', 'pIp->mFWarning.Wsp': 'pIp_mFWarning_Wsp', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': 'pIp_mFWarning_countSPLost', 'pIp->mFWarning.countSPSeen': 'pIp_mFWarning_countSPSeen', 'pIp->mFWarning.countSPset': 'pIp_mFWarning_countSPset + 1', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc', 'pIp->mController.Up': 'pIp_mController_Up', 'pIp->mController.Ud': 'pIp_mController_Ud', 'pIp->mController.fy': 'pIp_mController_fy', 'pIp->countPublic': 'pIp_countPublic', 'pIp->countMode': 'pIp_countMode'}
Path Condition: pIp_mDSSData_stateFlag_A != 1 && pIp->mDSSData.stateFlag_A == 1 && pIp_mFWarning_countSPset + 1 == 5 
Result: None
Variable Map: {'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP', 'pIp->mFWarning.CWsp': 'pIp_mFWarning_CWsp', 'pIp->mFWarning.CWtf': 'pIp_mFWarning_CWtf', 'pIp->mFWarning.Wsp': 'pIp_mFWarning_Wsp', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': 'pIp_mFWarning_countSPLost', 'pIp->mFWarning.countSPSeen': 'pIp_mFWarning_countSPSeen', 'pIp->mFWarning.countSPset': 'pIp_mFWarning_countSPset + 1', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc', 'pIp->mController.Up': 'pIp_mController_Up', 'pIp->mController.Ud': 'pIp_mController_Ud', 'pIp->mController.fy': 'pIp_mController_fy', 'pIp->countPublic': 'pIp_countPublic', 'pIp->countMode': 'pIp_countMode'}
Path Condition: pIp_mDSSData_stateFlag_A == 1 && pIp->mDSSData.stateFlag_A == 0 && pIp_mFWarning_countSPset + 1 == 5 
Result: None
Variable Map: {'pIp->mDSSData.stateFlag_A': 'pIp_mDSSData_stateFlag_A', 'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP', 'pIp->mFWarning.CWsp': '0', 'pIp->mFWarning.CWtf': '0', 'pIp->mFWarning.Wsp': '0', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': 'pIp_mFWarning_countSPLost', 'pIp->mFWarning.countSPSeen': 'pIp_mFWarning_countSPSeen', 'pIp->mFWarning.countSPset': '0', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc', 'pIp->mController.Up': '0', 'pIp->mController.Ud': 'pIp_mController_Ud', 'pIp->mController.fy': 'pIp_mController_fy', 'pIp->countPublic': '0', 'pIp->countMode': '0'}
Path Condition: pIp_mFWarning_countSPset + 1 == 10 && pIp_mFWarning_countSPset + 1 != 5 
Result: None
Variable Map: {'pIp->mDSSData.stateFlag_A': 'pIp_mDSSData_stateFlag_A', 'pIp->mDSSData.stateFlag_B': 'pIp_mDSSData_stateFlag_B', 'pIp->mDSSData.royaw': 'pIp_mDSSData_royaw', 'pIp->mDSSData.piyaw': 'pIp_mDSSData_piyaw', 'pIp->mDSSData.flgSP': 'pIp_mDSSData_flgSP', 'pIp->mFWarning.CWsp': 'pIp_mFWarning_CWsp', 'pIp->mFWarning.CWtf': 'pIp_mFWarning_CWtf', 'pIp->mFWarning.Wsp': 'pIp_mFWarning_Wsp', 'pIp->mFWarning.Wtf': 'pIp_mFWarning_Wtf', 'pIp->mFWarning.Wav': 'pIp_mFWarning_Wav', 'pIp->mFWarning.flgups': 'pIp_mFWarning_flgups', 'pIp->mFWarning.flgModeChange': 'pIp_mFWarning_flgModeChange', 'pIp->mFWarning.countAV': 'pIp_mFWarning_countAV', 'pIp->mFWarning.countSPLost': 'pIp_mFWarning_countSPLost', 'pIp->mFWarning.countSPSeen': 'pIp_mFWarning_countSPSeen', 'pIp->mFWarning.countSPset': 'pIp_mFWarning_countSPset + 1', 'pIp->mFWarning.countUPSpc': 'pIp_mFWarning_countUPSpc', 'pIp->mController.Up': 'pIp_mController_Up', 'pIp->mController.Ud': 'pIp_mController_Ud', 'pIp->mController.fy': 'pIp_mController_fy', 'pIp->countPublic': 'pIp_countPublic', 'pIp->countMode': 'pIp_countMode'}
Path Condition: pIp_mFWarning_countSPset + 1 != 10 && pIp_mFWarning_countSPset + 1 != 5 
Result: None
SoftFaultProceedSPFun.c 的规约的内容为: 
typedef struct TAG_CONTROLLERIN
{
    
    int 	Up;						
    int 	Ud;					
    int 	fy;					
    
}SController;
typedef struct TAG_FAULT_WARNING
{
 	int CWsp;
 	int CWtf;

    int Wsp;
    int Wtf;
    int Wav;

    int flgups;
    int flgModeChange;

    int countAV;
    int countSPLost;
    int countSPSeen;
    int countSPset;
    int countUPSpc;

} SFWarning;
typedef struct TAG_DSS_DATA
{
 	int stateFlag_A;
 	int stateFlag_B;
 	int royaw;
 	int piyaw;
	int flgSP;
}SDSSData;
typedef struct __SoftFaultProceedSP
{

	SDSSData		mDSSData;
	SFWarning		mFWarning;
	SController     mController;
	int				countPublic;
	int				countMode;

} SoftFaultProceedSP;

/*@
 requires \valid(pIp) ;
 requires \separated(pIp) ;

ensures \old(pIp->mDSSData.stateFlag_A) == 1 ==> pIp->mDSSData.stateFlag_A == 0&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset)&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode);

ensures \old(pIp->mDSSData.stateFlag_A) != 1 ==> pIp->mDSSData.stateFlag_A == 1&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset)&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode);

*/

void SwitchSS(SoftFaultProceedSP *pIp)

{

    if (pIp->mDSSData.stateFlag_A == 1)
    {
		pIp -> mDSSData.stateFlag_A = 0;
    }
    else
    {
		pIp -> mDSSData.stateFlag_A = 1;
    }

    return;
}
/*@
 requires \valid(pIp) ;
 requires \separated(pIp) ;

ensures \old(pIp->mDSSData.stateFlag_A) != 1 && pIp->mDSSData.stateFlag_A == 1 && \old(pIp->mFWarning.countSPset) + 1 == 5 ==> pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset) + 1&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode);

ensures \old(pIp->mDSSData.stateFlag_A) == 1 && pIp->mDSSData.stateFlag_A == 0 && \old(pIp->mFWarning.countSPset) + 1 == 5 ==> pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset) + 1&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode);

ensures \old(pIp->mFWarning.countSPset) + 1 == 10 && \old(pIp->mFWarning.countSPset) + 1 != 5 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == 0&&pIp->mFWarning.CWtf == 0&&pIp->mFWarning.Wsp == 0&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == 0&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == 0&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == 0&&pIp->countMode == 0;

ensures \old(pIp->mFWarning.countSPset) + 1 != 10 && \old(pIp->mFWarning.countSPset) + 1 != 5 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset) + 1&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode);

*/

void SoftFaultProceedSPFun(SoftFaultProceedSP *pIp)

{

	pIp -> mFWarning.countSPset++ ;


	if(pIp -> mFWarning.countSPset == 5){

			SwitchSS(pIp);
	}else if(pIp -> mFWarning.countSPset == 10){

			pIp -> mFWarning.CWsp = 0 ;
			pIp -> mFWarning.CWtf = 0 ;
			pIp -> mFWarning.countSPset = 0 ;
			pIp -> mFWarning.Wsp = 0 ;
	        pIp -> mController.Up = 0 ;
	        pIp -> countMode = 0 ;
	        pIp -> countPublic = 0 ;
	}
	   

	return ;
}
文件 output/test_ip/SoftFaultProceedSPFun.c 已成功创建并写入。

SUMMARY FOR SoftFaultProceedSPFun
========================================


函数 SoftFaultProceedSPFun 的 VST Summary 为:
/*@
With pIp_mDSSData_stateFlag_A pIp_mDSSData_stateFlag_B pIp_mDSSData_royaw pIp_mDSSData_piyaw pIp_mDSSData_flgSP pIp_mFWarning_CWsp pIp_mFWarning_CWtf pIp_mFWarning_Wsp pIp_mFWarning_Wtf pIp_mFWarning_Wav pIp_mFWarning_flgups pIp_mFWarning_flgModeChange pIp_mFWarning_countAV pIp_mFWarning_countSPLost pIp_mFWarning_countSPSeen pIp_mFWarning_countSPset pIp_mFWarning_countUPSpc pIp_mController_Up pIp_mController_Ud pIp_mController_fy pIp_countPublic pIp_countMode
Require pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A && pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B && pIp->mDSSData.royaw == pIp_mDSSData_royaw && pIp->mDSSData.piyaw == pIp_mDSSData_piyaw && pIp->mDSSData.flgSP == pIp_mDSSData_flgSP && pIp->mFWarning.CWsp == pIp_mFWarning_CWsp && pIp->mFWarning.CWtf == pIp_mFWarning_CWtf && pIp->mFWarning.Wsp == pIp_mFWarning_Wsp && pIp->mFWarning.Wtf == pIp_mFWarning_Wtf && pIp->mFWarning.Wav == pIp_mFWarning_Wav && pIp->mFWarning.flgups == pIp_mFWarning_flgups && pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange && pIp->mFWarning.countAV == pIp_mFWarning_countAV && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset && pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc && pIp->mController.Up == pIp_mController_Up && pIp->mController.Ud == pIp_mController_Ud && pIp->mController.fy == pIp_mController_fy && pIp->countPublic == pIp_countPublic && pIp->countMode == pIp_countMode
Ensure (pIp_mDSSData_stateFlag_A != 1 && pIp->mDSSData.stateFlag_A == 1 && pIp_mFWarning_countSPset + 1 == 5 && (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode)) || (pIp_mDSSData_stateFlag_A == 1 && pIp->mDSSData.stateFlag_A == 0 && pIp_mFWarning_countSPset + 1 == 5 && (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode)) || (pIp_mFWarning_countSPset + 1 == 10 && pIp_mFWarning_countSPset + 1 != 5 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == 0) * (pIp->mFWarning.CWtf == 0) * (pIp->mFWarning.Wsp == 0) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == 0) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == 0) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == 0) * (pIp->countMode == 0)) || (pIp_mFWarning_countSPset + 1 != 10 && pIp_mFWarning_countSPset + 1 != 5 && (pIp->mDSSData.stateFlag_A == pIp_mDSSData_stateFlag_A) * (pIp->mDSSData.stateFlag_B == pIp_mDSSData_stateFlag_B) * (pIp->mDSSData.royaw == pIp_mDSSData_royaw) * (pIp->mDSSData.piyaw == pIp_mDSSData_piyaw) * (pIp->mDSSData.flgSP == pIp_mDSSData_flgSP) * (pIp->mFWarning.CWsp == pIp_mFWarning_CWsp) * (pIp->mFWarning.CWtf == pIp_mFWarning_CWtf) * (pIp->mFWarning.Wsp == pIp_mFWarning_Wsp) * (pIp->mFWarning.Wtf == pIp_mFWarning_Wtf) * (pIp->mFWarning.Wav == pIp_mFWarning_Wav) * (pIp->mFWarning.flgups == pIp_mFWarning_flgups) * (pIp->mFWarning.flgModeChange == pIp_mFWarning_flgModeChange) * (pIp->mFWarning.countAV == pIp_mFWarning_countAV) * (pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost) * (pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen) * (pIp->mFWarning.countSPset == pIp_mFWarning_countSPset + 1) * (pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc) * (pIp->mController.Up == pIp_mController_Up) * (pIp->mController.Ud == pIp_mController_Ud) * (pIp->mController.fy == pIp_mController_fy) * (pIp->countPublic == pIp_countPublic) * (pIp->countMode == pIp_countMode))
*/

函数 SoftFaultProceedSPFun 的 ACSL Summary 为:
/*@
 requires \valid(pIp) ;
 requires \separated(pIp) ;

ensures \old(pIp->mDSSData.stateFlag_A) != 1 && pIp->mDSSData.stateFlag_A == 1 && \old(pIp->mFWarning.countSPset) + 1 == 5 ==> pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset) + 1&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode);

ensures \old(pIp->mDSSData.stateFlag_A) == 1 && pIp->mDSSData.stateFlag_A == 0 && \old(pIp->mFWarning.countSPset) + 1 == 5 ==> pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset) + 1&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode);

ensures \old(pIp->mFWarning.countSPset) + 1 == 10 && \old(pIp->mFWarning.countSPset) + 1 != 5 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == 0&&pIp->mFWarning.CWtf == 0&&pIp->mFWarning.Wsp == 0&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == 0&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == 0&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == 0&&pIp->countMode == 0;

ensures \old(pIp->mFWarning.countSPset) + 1 != 10 && \old(pIp->mFWarning.countSPset) + 1 != 5 ==> pIp->mDSSData.stateFlag_A == \old(pIp->mDSSData.stateFlag_A)&&pIp->mDSSData.stateFlag_B == \old(pIp->mDSSData.stateFlag_B)&&pIp->mDSSData.royaw == \old(pIp->mDSSData.royaw)&&pIp->mDSSData.piyaw == \old(pIp->mDSSData.piyaw)&&pIp->mDSSData.flgSP == \old(pIp->mDSSData.flgSP)&&pIp->mFWarning.CWsp == \old(pIp->mFWarning.CWsp)&&pIp->mFWarning.CWtf == \old(pIp->mFWarning.CWtf)&&pIp->mFWarning.Wsp == \old(pIp->mFWarning.Wsp)&&pIp->mFWarning.Wtf == \old(pIp->mFWarning.Wtf)&&pIp->mFWarning.Wav == \old(pIp->mFWarning.Wav)&&pIp->mFWarning.flgups == \old(pIp->mFWarning.flgups)&&pIp->mFWarning.flgModeChange == \old(pIp->mFWarning.flgModeChange)&&pIp->mFWarning.countAV == \old(pIp->mFWarning.countAV)&&pIp->mFWarning.countSPLost == \old(pIp->mFWarning.countSPLost)&&pIp->mFWarning.countSPSeen == \old(pIp->mFWarning.countSPSeen)&&pIp->mFWarning.countSPset == \old(pIp->mFWarning.countSPset) + 1&&pIp->mFWarning.countUPSpc == \old(pIp->mFWarning.countUPSpc)&&pIp->mController.Up == \old(pIp->mController.Up)&&pIp->mController.Ud == \old(pIp->mController.Ud)&&pIp->mController.fy == \old(pIp->mController.fy)&&pIp->countPublic == \old(pIp->countPublic)&&pIp->countMode == \old(pIp->countMode);

*/


VERIFICATION FOR SoftFaultProceedSPFun
========================================

syntax Correct
Loop Invariant:
[]

Assertion:
[]

Post Condition:
[True, True, True, True, True, True]

